# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from phrasetms_client.models import MachineTranslateResponse
from phrasetms_client.api_client import ApiClient


class MachineTranslationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def machine_translation(
        self, mt_settings_uid, **kwargs
    ) -> MachineTranslateResponse:  # noqa: E501
        """Translate with MT  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machine_translation(mt_settings_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mt_settings_uid: (required)
        :param TranslationRequestExtendedDto body:
        :return: MachineTranslateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.machine_translation_with_http_info(
                mt_settings_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.machine_translation_with_http_info(
                mt_settings_uid, **kwargs
            )  # noqa: E501
            return data

    def machine_translation_with_http_info(
        self, mt_settings_uid, **kwargs
    ) -> MachineTranslateResponse:  # noqa: E501
        """Translate with MT  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.machine_translation_with_http_info(mt_settings_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mt_settings_uid: (required)
        :param TranslationRequestExtendedDto body:
        :return: MachineTranslateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["mt_settings_uid", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machine_translation" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'mt_settings_uid' is set
        if "mt_settings_uid" not in params or params["mt_settings_uid"] is None:
            raise ValueError(
                "Missing the required parameter `mt_settings_uid` when calling `machine_translation`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "mt_settings_uid" in params:
            path_params["mtSettingsUid"] = params["mt_settings_uid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/machineTranslations/{mtSettingsUid}/translate",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="MachineTranslateResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
