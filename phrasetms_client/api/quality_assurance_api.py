# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from phrasetms_client.api_client import ApiClient


class QualityAssuranceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_ignored_warnings(
        self, project_uid, job_uid, **kwargs
    ) -> UpdateIgnoredWarningsDto:  # noqa: E501
        """Add ignored warnings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_ignored_warnings(project_uid, job_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_uid: (required)
        :param str job_uid: (required)
        :param UpdateIgnoredWarningsDto body:
        :return: UpdateIgnoredWarningsDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.add_ignored_warnings_with_http_info(
                project_uid, job_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.add_ignored_warnings_with_http_info(
                project_uid, job_uid, **kwargs
            )  # noqa: E501
            return data

    def add_ignored_warnings_with_http_info(
        self, project_uid, job_uid, **kwargs
    ) -> UpdateIgnoredWarningsDto:  # noqa: E501
        """Add ignored warnings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_ignored_warnings_with_http_info(project_uid, job_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_uid: (required)
        :param str job_uid: (required)
        :param UpdateIgnoredWarningsDto body:
        :return: UpdateIgnoredWarningsDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["project_uid", "job_uid", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_ignored_warnings" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_uid' is set
        if "project_uid" not in params or params["project_uid"] is None:
            raise ValueError(
                "Missing the required parameter `project_uid` when calling `add_ignored_warnings`"
            )  # noqa: E501
        # verify the required parameter 'job_uid' is set
        if "job_uid" not in params or params["job_uid"] is None:
            raise ValueError(
                "Missing the required parameter `job_uid` when calling `add_ignored_warnings`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_uid" in params:
            path_params["projectUid"] = params["project_uid"]  # noqa: E501
        if "job_uid" in params:
            path_params["jobUid"] = params["job_uid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/projects/{projectUid}/jobs/{jobUid}/qualityAssurances/ignoredWarnings",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="UpdateIgnoredWarningsDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def add_ignored_warnings1(
        self, project_uid, **kwargs
    ) -> UpdateIgnoredWarningsDto:  # noqa: E501
        """Add ignored warnings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_ignored_warnings1(project_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_uid: (required)
        :param UpdateIgnoredWarningsDto body:
        :return: UpdateIgnoredWarningsDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.add_ignored_warnings1_with_http_info(
                project_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.add_ignored_warnings1_with_http_info(
                project_uid, **kwargs
            )  # noqa: E501
            return data

    def add_ignored_warnings1_with_http_info(
        self, project_uid, **kwargs
    ) -> UpdateIgnoredWarningsDto:  # noqa: E501
        """Add ignored warnings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_ignored_warnings1_with_http_info(project_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_uid: (required)
        :param UpdateIgnoredWarningsDto body:
        :return: UpdateIgnoredWarningsDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["project_uid", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_ignored_warnings1" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_uid' is set
        if "project_uid" not in params or params["project_uid"] is None:
            raise ValueError(
                "Missing the required parameter `project_uid` when calling `add_ignored_warnings1`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_uid" in params:
            path_params["projectUid"] = params["project_uid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["*/*"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["*/*"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v2/projects/{projectUid}/jobs/qualityAssurances/ignoredWarnings",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="UpdateIgnoredWarningsDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_lqa_profile(self, **kwargs) -> LqaProfileDetailDto:  # noqa: E501
        """Create LQA profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_lqa_profile(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateLqaProfileDto body:
        :return: LqaProfileDetailDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_lqa_profile_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_lqa_profile_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_lqa_profile_with_http_info(
        self, **kwargs
    ) -> LqaProfileDetailDto:  # noqa: E501
        """Create LQA profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_lqa_profile_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateLqaProfileDto body:
        :return: LqaProfileDetailDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_lqa_profile" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/lqa/profiles",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="LqaProfileDetailDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_ignored_warnings(
        self, project_uid, job_uid, **kwargs
    ) -> None:  # noqa: E501
        """Delete ignored warnings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ignored_warnings(project_uid, job_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_uid: (required)
        :param str job_uid: (required)
        :param UpdateIgnoredWarningsDto body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_ignored_warnings_with_http_info(
                project_uid, job_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_ignored_warnings_with_http_info(
                project_uid, job_uid, **kwargs
            )  # noqa: E501
            return data

    def delete_ignored_warnings_with_http_info(
        self, project_uid, job_uid, **kwargs
    ) -> None:  # noqa: E501
        """Delete ignored warnings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ignored_warnings_with_http_info(project_uid, job_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_uid: (required)
        :param str job_uid: (required)
        :param UpdateIgnoredWarningsDto body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["project_uid", "job_uid", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ignored_warnings" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_uid' is set
        if "project_uid" not in params or params["project_uid"] is None:
            raise ValueError(
                "Missing the required parameter `project_uid` when calling `delete_ignored_warnings`"
            )  # noqa: E501
        # verify the required parameter 'job_uid' is set
        if "job_uid" not in params or params["job_uid"] is None:
            raise ValueError(
                "Missing the required parameter `job_uid` when calling `delete_ignored_warnings`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_uid" in params:
            path_params["projectUid"] = params["project_uid"]  # noqa: E501
        if "job_uid" in params:
            path_params["jobUid"] = params["job_uid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/projects/{projectUid}/jobs/{jobUid}/qualityAssurances/ignoredWarnings",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_ignored_warnings1(self, project_uid, **kwargs) -> None:  # noqa: E501
        """Delete ignored warnings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ignored_warnings1(project_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_uid: (required)
        :param UpdateIgnoredWarningsDto body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_ignored_warnings1_with_http_info(
                project_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_ignored_warnings1_with_http_info(
                project_uid, **kwargs
            )  # noqa: E501
            return data

    def delete_ignored_warnings1_with_http_info(
        self, project_uid, **kwargs
    ) -> None:  # noqa: E501
        """Delete ignored warnings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ignored_warnings1_with_http_info(project_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_uid: (required)
        :param UpdateIgnoredWarningsDto body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["project_uid", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ignored_warnings1" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_uid' is set
        if "project_uid" not in params or params["project_uid"] is None:
            raise ValueError(
                "Missing the required parameter `project_uid` when calling `delete_ignored_warnings1`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_uid" in params:
            path_params["projectUid"] = params["project_uid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["*/*"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v2/projects/{projectUid}/jobs/qualityAssurances/ignoredWarnings",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_lqa_profile(self, profile_uid, **kwargs) -> None:  # noqa: E501
        """Delete LQA profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_lqa_profile(profile_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_uid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_lqa_profile_with_http_info(
                profile_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_lqa_profile_with_http_info(
                profile_uid, **kwargs
            )  # noqa: E501
            return data

    def delete_lqa_profile_with_http_info(
        self, profile_uid, **kwargs
    ) -> None:  # noqa: E501
        """Delete LQA profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_lqa_profile_with_http_info(profile_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_uid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["profile_uid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_lqa_profile" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'profile_uid' is set
        if "profile_uid" not in params or params["profile_uid"] is None:
            raise ValueError(
                "Missing the required parameter `profile_uid` when calling `delete_lqa_profile`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "profile_uid" in params:
            path_params["profileUid"] = params["profile_uid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/lqa/profiles/{profileUid}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def duplicate_profile(
        self, profile_uid, **kwargs
    ) -> LqaProfileReferenceDto:  # noqa: E501
        """Duplicate LQA profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.duplicate_profile(profile_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_uid: (required)
        :return: LqaProfileReferenceDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.duplicate_profile_with_http_info(
                profile_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.duplicate_profile_with_http_info(
                profile_uid, **kwargs
            )  # noqa: E501
            return data

    def duplicate_profile_with_http_info(
        self, profile_uid, **kwargs
    ) -> LqaProfileReferenceDto:  # noqa: E501
        """Duplicate LQA profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.duplicate_profile_with_http_info(profile_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_uid: (required)
        :return: LqaProfileReferenceDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["profile_uid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method duplicate_profile" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'profile_uid' is set
        if "profile_uid" not in params or params["profile_uid"] is None:
            raise ValueError(
                "Missing the required parameter `profile_uid` when calling `duplicate_profile`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "profile_uid" in params:
            path_params["profileUid"] = params["profile_uid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/lqa/profiles/{profileUid}/duplicate",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="LqaProfileReferenceDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def enabled_quality_checks_for_job(
        self, project_uid, job_uid, **kwargs
    ) -> QualityAssuranceChecksDtoV2:  # noqa: E501
        """Get QA settings for job  # noqa: E501

        Returns enabled quality assurance checks and settings for job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enabled_quality_checks_for_job(project_uid, job_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_uid: (required)
        :param str job_uid: (required)
        :return: QualityAssuranceChecksDtoV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.enabled_quality_checks_for_job_with_http_info(
                project_uid, job_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.enabled_quality_checks_for_job_with_http_info(
                project_uid, job_uid, **kwargs
            )  # noqa: E501
            return data

    def enabled_quality_checks_for_job_with_http_info(
        self, project_uid, job_uid, **kwargs
    ) -> QualityAssuranceChecksDtoV2:  # noqa: E501
        """Get QA settings for job  # noqa: E501

        Returns enabled quality assurance checks and settings for job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enabled_quality_checks_for_job_with_http_info(project_uid, job_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_uid: (required)
        :param str job_uid: (required)
        :return: QualityAssuranceChecksDtoV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["project_uid", "job_uid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enabled_quality_checks_for_job" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_uid' is set
        if "project_uid" not in params or params["project_uid"] is None:
            raise ValueError(
                "Missing the required parameter `project_uid` when calling `enabled_quality_checks_for_job`"
            )  # noqa: E501
        # verify the required parameter 'job_uid' is set
        if "job_uid" not in params or params["job_uid"] is None:
            raise ValueError(
                "Missing the required parameter `job_uid` when calling `enabled_quality_checks_for_job`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_uid" in params:
            path_params["projectUid"] = params["project_uid"]  # noqa: E501
        if "job_uid" in params:
            path_params["jobUid"] = params["job_uid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v2/projects/{projectUid}/jobs/{jobUid}/qualityAssurances/settings",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="QualityAssuranceChecksDtoV2",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def enabled_quality_checks_for_job1(
        self, project_uid, **kwargs
    ) -> QualityAssuranceChecksDtoV2:  # noqa: E501
        """Get QA settings  # noqa: E501

        Returns enabled quality assurance checks and settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enabled_quality_checks_for_job1(project_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_uid: (required)
        :return: QualityAssuranceChecksDtoV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.enabled_quality_checks_for_job1_with_http_info(
                project_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.enabled_quality_checks_for_job1_with_http_info(
                project_uid, **kwargs
            )  # noqa: E501
            return data

    def enabled_quality_checks_for_job1_with_http_info(
        self, project_uid, **kwargs
    ) -> QualityAssuranceChecksDtoV2:  # noqa: E501
        """Get QA settings  # noqa: E501

        Returns enabled quality assurance checks and settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enabled_quality_checks_for_job1_with_http_info(project_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_uid: (required)
        :return: QualityAssuranceChecksDtoV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["project_uid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enabled_quality_checks_for_job1" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_uid' is set
        if "project_uid" not in params or params["project_uid"] is None:
            raise ValueError(
                "Missing the required parameter `project_uid` when calling `enabled_quality_checks_for_job1`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_uid" in params:
            path_params["projectUid"] = params["project_uid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v2/projects/{projectUid}/jobs/qualityAssurances/settings",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="QualityAssuranceChecksDtoV2",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_lqa_profile(
        self, profile_uid, **kwargs
    ) -> LqaProfileDetailDto:  # noqa: E501
        """Get LQA profile details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lqa_profile(profile_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_uid: (required)
        :return: LqaProfileDetailDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_lqa_profile_with_http_info(
                profile_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_lqa_profile_with_http_info(
                profile_uid, **kwargs
            )  # noqa: E501
            return data

    def get_lqa_profile_with_http_info(
        self, profile_uid, **kwargs
    ) -> LqaProfileDetailDto:  # noqa: E501
        """Get LQA profile details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lqa_profile_with_http_info(profile_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_uid: (required)
        :return: LqaProfileDetailDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["profile_uid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_lqa_profile" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'profile_uid' is set
        if "profile_uid" not in params or params["profile_uid"] is None:
            raise ValueError(
                "Missing the required parameter `profile_uid` when calling `get_lqa_profile`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "profile_uid" in params:
            path_params["profileUid"] = params["profile_uid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/lqa/profiles/{profileUid}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="LqaProfileDetailDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_lqa_profile_authors(self, **kwargs) -> list[UserReference]:  # noqa: E501
        """Get list of LQA profile authors  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lqa_profile_authors(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[UserReference]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_lqa_profile_authors_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_lqa_profile_authors_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_lqa_profile_authors_with_http_info(
        self, **kwargs
    ) -> list[UserReference]:  # noqa: E501
        """Get list of LQA profile authors  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lqa_profile_authors_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[UserReference]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_lqa_profile_authors" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/lqa/profiles/authors",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[UserReference]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_lqa_profiles(self, **kwargs) -> PageDtoLqaProfileReferenceDto:  # noqa: E501
        """GET list LQA profiles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lqa_profiles(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Name of LQA profiles, it is used for filter the list by name
        :param str created_by: It is used for filter the list by who created the profile
        :param str date_created: It is used for filter the list by date created
        :param int page_number: Page number, starting with 0, default 0
        :param int page_size: Page size, accepts values between 1 and 50, default 20
        :param list[str] sort:
        :param list[str] order:
        :return: PageDtoLqaProfileReferenceDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_lqa_profiles_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_lqa_profiles_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_lqa_profiles_with_http_info(
        self, **kwargs
    ) -> PageDtoLqaProfileReferenceDto:  # noqa: E501
        """GET list LQA profiles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lqa_profiles_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Name of LQA profiles, it is used for filter the list by name
        :param str created_by: It is used for filter the list by who created the profile
        :param str date_created: It is used for filter the list by date created
        :param int page_number: Page number, starting with 0, default 0
        :param int page_size: Page size, accepts values between 1 and 50, default 20
        :param list[str] sort:
        :param list[str] order:
        :return: PageDtoLqaProfileReferenceDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "name",
            "created_by",
            "date_created",
            "page_number",
            "page_size",
            "sort",
            "order",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_lqa_profiles" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "created_by" in params:
            query_params.append(("createdBy", params["created_by"]))  # noqa: E501
        if "date_created" in params:
            query_params.append(("dateCreated", params["date_created"]))  # noqa: E501
        if "page_number" in params:
            query_params.append(("pageNumber", params["page_number"]))  # noqa: E501
        if "page_size" in params:
            query_params.append(("pageSize", params["page_size"]))  # noqa: E501
        if "sort" in params:
            query_params.append(("sort", params["sort"]))  # noqa: E501
            collection_formats["sort"] = "multi"  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
            collection_formats["order"] = "multi"  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/lqa/profiles",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PageDtoLqaProfileReferenceDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def make_default(
        self, profile_uid, **kwargs
    ) -> LqaProfileReferenceDto:  # noqa: E501
        """Make LQA profile default  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.make_default(profile_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_uid: (required)
        :return: LqaProfileReferenceDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.make_default_with_http_info(profile_uid, **kwargs)  # noqa: E501
        else:
            (data) = self.make_default_with_http_info(
                profile_uid, **kwargs
            )  # noqa: E501
            return data

    def make_default_with_http_info(
        self, profile_uid, **kwargs
    ) -> LqaProfileReferenceDto:  # noqa: E501
        """Make LQA profile default  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.make_default_with_http_info(profile_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_uid: (required)
        :return: LqaProfileReferenceDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["profile_uid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method make_default" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'profile_uid' is set
        if "profile_uid" not in params or params["profile_uid"] is None:
            raise ValueError(
                "Missing the required parameter `profile_uid` when calling `make_default`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "profile_uid" in params:
            path_params["profileUid"] = params["profile_uid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/lqa/profiles/{profileUid}/default",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="LqaProfileReferenceDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def run_qa_for_job_part_v3(
        self, project_uid, job_uid, **kwargs
    ) -> QualityAssuranceResponseDto:  # noqa: E501
        """Run quality assurance  # noqa: E501

        Call \"Get QA settings\" endpoint to get the list of enabled QA checks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_qa_for_job_part_v3(project_uid, job_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_uid: (required)
        :param str job_uid: (required)
        :param QualityAssuranceRunDtoV3 body:
        :return: QualityAssuranceResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.run_qa_for_job_part_v3_with_http_info(
                project_uid, job_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.run_qa_for_job_part_v3_with_http_info(
                project_uid, job_uid, **kwargs
            )  # noqa: E501
            return data

    def run_qa_for_job_part_v3_with_http_info(
        self, project_uid, job_uid, **kwargs
    ) -> QualityAssuranceResponseDto:  # noqa: E501
        """Run quality assurance  # noqa: E501

        Call \"Get QA settings\" endpoint to get the list of enabled QA checks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_qa_for_job_part_v3_with_http_info(project_uid, job_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_uid: (required)
        :param str job_uid: (required)
        :param QualityAssuranceRunDtoV3 body:
        :return: QualityAssuranceResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["project_uid", "job_uid", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method run_qa_for_job_part_v3" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_uid' is set
        if "project_uid" not in params or params["project_uid"] is None:
            raise ValueError(
                "Missing the required parameter `project_uid` when calling `run_qa_for_job_part_v3`"
            )  # noqa: E501
        # verify the required parameter 'job_uid' is set
        if "job_uid" not in params or params["job_uid"] is None:
            raise ValueError(
                "Missing the required parameter `job_uid` when calling `run_qa_for_job_part_v3`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_uid" in params:
            path_params["projectUid"] = params["project_uid"]  # noqa: E501
        if "job_uid" in params:
            path_params["jobUid"] = params["job_uid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v3/projects/{projectUid}/jobs/{jobUid}/qualityAssurances/run",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="QualityAssuranceResponseDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def run_qa_for_job_parts_v3(
        self, project_uid, **kwargs
    ) -> QualityAssuranceResponseDto:  # noqa: E501
        """Run quality assurance (batch)  # noqa: E501

        Call \"Get QA settings\" endpoint to get the list of enabled QA checks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_qa_for_job_parts_v3(project_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_uid: (required)
        :param QualityAssuranceBatchRunDtoV3 body:
        :return: QualityAssuranceResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.run_qa_for_job_parts_v3_with_http_info(
                project_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.run_qa_for_job_parts_v3_with_http_info(
                project_uid, **kwargs
            )  # noqa: E501
            return data

    def run_qa_for_job_parts_v3_with_http_info(
        self, project_uid, **kwargs
    ) -> QualityAssuranceResponseDto:  # noqa: E501
        """Run quality assurance (batch)  # noqa: E501

        Call \"Get QA settings\" endpoint to get the list of enabled QA checks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_qa_for_job_parts_v3_with_http_info(project_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_uid: (required)
        :param QualityAssuranceBatchRunDtoV3 body:
        :return: QualityAssuranceResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["project_uid", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method run_qa_for_job_parts_v3" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_uid' is set
        if "project_uid" not in params or params["project_uid"] is None:
            raise ValueError(
                "Missing the required parameter `project_uid` when calling `run_qa_for_job_parts_v3`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_uid" in params:
            path_params["projectUid"] = params["project_uid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v3/projects/{projectUid}/jobs/qualityAssurances/run",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="QualityAssuranceResponseDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def run_qa_for_segments_v3(
        self, project_uid, **kwargs
    ) -> QualityAssuranceResponseDto:  # noqa: E501
        """Run quality assurance on selected segments  # noqa: E501

        By default runs only fast running checks. Source and target language of jobs have to match.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_qa_for_segments_v3(project_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_uid: (required)
        :param QualityAssuranceSegmentsRunDtoV3 body:
        :return: QualityAssuranceResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.run_qa_for_segments_v3_with_http_info(
                project_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.run_qa_for_segments_v3_with_http_info(
                project_uid, **kwargs
            )  # noqa: E501
            return data

    def run_qa_for_segments_v3_with_http_info(
        self, project_uid, **kwargs
    ) -> QualityAssuranceResponseDto:  # noqa: E501
        """Run quality assurance on selected segments  # noqa: E501

        By default runs only fast running checks. Source and target language of jobs have to match.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_qa_for_segments_v3_with_http_info(project_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_uid: (required)
        :param QualityAssuranceSegmentsRunDtoV3 body:
        :return: QualityAssuranceResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["project_uid", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method run_qa_for_segments_v3" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_uid' is set
        if "project_uid" not in params or params["project_uid"] is None:
            raise ValueError(
                "Missing the required parameter `project_uid` when calling `run_qa_for_segments_v3`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_uid" in params:
            path_params["projectUid"] = params["project_uid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v3/projects/{projectUid}/jobs/qualityAssurances/segments/run",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="QualityAssuranceResponseDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_ignored_checks(
        self, project_uid, job_uid, **kwargs
    ) -> None:  # noqa: E501
        """Edit ignored checks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ignored_checks(project_uid, job_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_uid: (required)
        :param str job_uid: (required)
        :param UpdateIgnoredChecksDto body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_ignored_checks_with_http_info(
                project_uid, job_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_ignored_checks_with_http_info(
                project_uid, job_uid, **kwargs
            )  # noqa: E501
            return data

    def update_ignored_checks_with_http_info(
        self, project_uid, job_uid, **kwargs
    ) -> None:  # noqa: E501
        """Edit ignored checks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ignored_checks_with_http_info(project_uid, job_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_uid: (required)
        :param str job_uid: (required)
        :param UpdateIgnoredChecksDto body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["project_uid", "job_uid", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_ignored_checks" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_uid' is set
        if "project_uid" not in params or params["project_uid"] is None:
            raise ValueError(
                "Missing the required parameter `project_uid` when calling `update_ignored_checks`"
            )  # noqa: E501
        # verify the required parameter 'job_uid' is set
        if "job_uid" not in params or params["job_uid"] is None:
            raise ValueError(
                "Missing the required parameter `job_uid` when calling `update_ignored_checks`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_uid" in params:
            path_params["projectUid"] = params["project_uid"]  # noqa: E501
        if "job_uid" in params:
            path_params["jobUid"] = params["job_uid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/projects/{projectUid}/jobs/{jobUid}/qualityAssurances/ignoreChecks",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_lqa_profile(
        self, profile_uid, **kwargs
    ) -> LqaProfileDetailDto:  # noqa: E501
        """Update LQA profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_lqa_profile(profile_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_uid: (required)
        :param UpdateLqaProfileDto body:
        :return: LqaProfileDetailDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_lqa_profile_with_http_info(
                profile_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_lqa_profile_with_http_info(
                profile_uid, **kwargs
            )  # noqa: E501
            return data

    def update_lqa_profile_with_http_info(
        self, profile_uid, **kwargs
    ) -> LqaProfileDetailDto:  # noqa: E501
        """Update LQA profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_lqa_profile_with_http_info(profile_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_uid: (required)
        :param UpdateLqaProfileDto body:
        :return: LqaProfileDetailDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["profile_uid", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_lqa_profile" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'profile_uid' is set
        if "profile_uid" not in params or params["profile_uid"] is None:
            raise ValueError(
                "Missing the required parameter `profile_uid` when calling `update_lqa_profile`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "profile_uid" in params:
            path_params["profileUid"] = params["profile_uid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/lqa/profiles/{profileUid}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="LqaProfileDetailDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
