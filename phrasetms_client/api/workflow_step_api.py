# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from phrasetms_client.api_client import ApiClient


class WorkflowStepApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_wf_step(self, **kwargs) -> WorkflowStepDto:  # noqa: E501
        """Create workflow step  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_wf_step(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateWorkflowStepDto body:
        :return: WorkflowStepDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_wf_step_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_wf_step_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_wf_step_with_http_info(self, **kwargs) -> WorkflowStepDto:  # noqa: E501
        """Create workflow step  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_wf_step_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateWorkflowStepDto body:
        :return: WorkflowStepDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_wf_step" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/workflowSteps",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="WorkflowStepDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def edit_wf_step(
        self, workflow_step_uid, **kwargs
    ) -> WorkflowStepDto:  # noqa: E501
        """Edit workflow step  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_wf_step(workflow_step_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_step_uid: (required)
        :param EditWorkflowStepDto body:
        :return: WorkflowStepDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.edit_wf_step_with_http_info(
                workflow_step_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.edit_wf_step_with_http_info(
                workflow_step_uid, **kwargs
            )  # noqa: E501
            return data

    def edit_wf_step_with_http_info(
        self, workflow_step_uid, **kwargs
    ) -> WorkflowStepDto:  # noqa: E501
        """Edit workflow step  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_wf_step_with_http_info(workflow_step_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_step_uid: (required)
        :param EditWorkflowStepDto body:
        :return: WorkflowStepDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workflow_step_uid", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_wf_step" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'workflow_step_uid' is set
        if "workflow_step_uid" not in params or params["workflow_step_uid"] is None:
            raise ValueError(
                "Missing the required parameter `workflow_step_uid` when calling `edit_wf_step`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workflow_step_uid" in params:
            path_params["workflowStepUid"] = params["workflow_step_uid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/workflowSteps/{workflowStepUid}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="WorkflowStepDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def list_wf_steps(self, **kwargs) -> PageDtoWorkflowStepDto:  # noqa: E501
        """List workflow steps  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_wf_steps(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_number: Page number, starting with 0, default 0
        :param int page_size: Page size, accepts values between 1 and 50, default 50
        :param str sort:
        :param str order:
        :param str name: Name of the workflow step
        :param str abbr: Abbreviation of workflow step
        :return: PageDtoWorkflowStepDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.list_wf_steps_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_wf_steps_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_wf_steps_with_http_info(
        self, **kwargs
    ) -> PageDtoWorkflowStepDto:  # noqa: E501
        """List workflow steps  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_wf_steps_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_number: Page number, starting with 0, default 0
        :param int page_size: Page size, accepts values between 1 and 50, default 50
        :param str sort:
        :param str order:
        :param str name: Name of the workflow step
        :param str abbr: Abbreviation of workflow step
        :return: PageDtoWorkflowStepDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "page_number",
            "page_size",
            "sort",
            "order",
            "name",
            "abbr",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_wf_steps" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "page_number" in params:
            query_params.append(("pageNumber", params["page_number"]))  # noqa: E501
        if "page_size" in params:
            query_params.append(("pageSize", params["page_size"]))  # noqa: E501
        if "sort" in params:
            query_params.append(("sort", params["sort"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "abbr" in params:
            query_params.append(("abbr", params["abbr"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/workflowSteps",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PageDtoWorkflowStepDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def list_workflow_steps(
        self, user_uid, **kwargs
    ) -> PageDtoWorkflowStepReference:  # noqa: E501
        """List assigned workflow steps  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_workflow_steps(user_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_uid: (required)
        :param list[str] status:
        :param str project_uid:
        :param list[str] target_lang:
        :param int due_in_hours: -1 for jobs that are overdue
        :param str filename:
        :param int page_number:
        :param int page_size:
        :return: PageDtoWorkflowStepReference
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.list_workflow_steps_with_http_info(
                user_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.list_workflow_steps_with_http_info(
                user_uid, **kwargs
            )  # noqa: E501
            return data

    def list_workflow_steps_with_http_info(
        self, user_uid, **kwargs
    ) -> PageDtoWorkflowStepReference:  # noqa: E501
        """List assigned workflow steps  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_workflow_steps_with_http_info(user_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_uid: (required)
        :param list[str] status:
        :param str project_uid:
        :param list[str] target_lang:
        :param int due_in_hours: -1 for jobs that are overdue
        :param str filename:
        :param int page_number:
        :param int page_size:
        :return: PageDtoWorkflowStepReference
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "user_uid",
            "status",
            "project_uid",
            "target_lang",
            "due_in_hours",
            "filename",
            "page_number",
            "page_size",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_workflow_steps" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'user_uid' is set
        if "user_uid" not in params or params["user_uid"] is None:
            raise ValueError(
                "Missing the required parameter `user_uid` when calling `list_workflow_steps`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "user_uid" in params:
            path_params["userUid"] = params["user_uid"]  # noqa: E501

        query_params = []
        if "status" in params:
            query_params.append(("status", params["status"]))  # noqa: E501
            collection_formats["status"] = "multi"  # noqa: E501
        if "project_uid" in params:
            query_params.append(("projectUid", params["project_uid"]))  # noqa: E501
        if "target_lang" in params:
            query_params.append(("targetLang", params["target_lang"]))  # noqa: E501
            collection_formats["targetLang"] = "multi"  # noqa: E501
        if "due_in_hours" in params:
            query_params.append(("dueInHours", params["due_in_hours"]))  # noqa: E501
        if "filename" in params:
            query_params.append(("filename", params["filename"]))  # noqa: E501
        if "page_number" in params:
            query_params.append(("pageNumber", params["page_number"]))  # noqa: E501
        if "page_size" in params:
            query_params.append(("pageSize", params["page_size"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/users/{userUid}/workflowSteps",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PageDtoWorkflowStepReference",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
