# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from phrasetms_client.api_client import ApiClient


class ProjectTemplateApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def assign_linguists_from_template(
        self, template_uid, project_uid, **kwargs
    ) -> JobPartsDto:  # noqa: E501
        """Assigns providers from template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_linguists_from_template(template_uid, project_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_uid: (required)
        :param str project_uid: (required)
        :return: JobPartsDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.assign_linguists_from_template_with_http_info(
                template_uid, project_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.assign_linguists_from_template_with_http_info(
                template_uid, project_uid, **kwargs
            )  # noqa: E501
            return data

    def assign_linguists_from_template_with_http_info(
        self, template_uid, project_uid, **kwargs
    ) -> JobPartsDto:  # noqa: E501
        """Assigns providers from template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_linguists_from_template_with_http_info(template_uid, project_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_uid: (required)
        :param str project_uid: (required)
        :return: JobPartsDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["template_uid", "project_uid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_linguists_from_template" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'template_uid' is set
        if "template_uid" not in params or params["template_uid"] is None:
            raise ValueError(
                "Missing the required parameter `template_uid` when calling `assign_linguists_from_template`"
            )  # noqa: E501
        # verify the required parameter 'project_uid' is set
        if "project_uid" not in params or params["project_uid"] is None:
            raise ValueError(
                "Missing the required parameter `project_uid` when calling `assign_linguists_from_template`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "template_uid" in params:
            path_params["templateUid"] = params["template_uid"]  # noqa: E501
        if "project_uid" in params:
            path_params["projectUid"] = params["project_uid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/projects/{projectUid}/applyTemplate/{templateUid}/assignProviders",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="JobPartsDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def assign_linguists_from_template_to_job_parts(
        self, template_uid, project_uid, **kwargs
    ) -> JobPartsDto:  # noqa: E501
        """Assigns providers from template (specific jobs)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_linguists_from_template_to_job_parts(template_uid, project_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_uid: (required)
        :param str project_uid: (required)
        :param JobPartReferences body:
        :return: JobPartsDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.assign_linguists_from_template_to_job_parts_with_http_info(
                template_uid, project_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.assign_linguists_from_template_to_job_parts_with_http_info(
                template_uid, project_uid, **kwargs
            )  # noqa: E501
            return data

    def assign_linguists_from_template_to_job_parts_with_http_info(
        self, template_uid, project_uid, **kwargs
    ) -> JobPartsDto:  # noqa: E501
        """Assigns providers from template (specific jobs)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_linguists_from_template_to_job_parts_with_http_info(template_uid, project_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_uid: (required)
        :param str project_uid: (required)
        :param JobPartReferences body:
        :return: JobPartsDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["template_uid", "project_uid", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_linguists_from_template_to_job_parts" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'template_uid' is set
        if "template_uid" not in params or params["template_uid"] is None:
            raise ValueError(
                "Missing the required parameter `template_uid` when calling `assign_linguists_from_template_to_job_parts`"
            )  # noqa: E501
        # verify the required parameter 'project_uid' is set
        if "project_uid" not in params or params["project_uid"] is None:
            raise ValueError(
                "Missing the required parameter `project_uid` when calling `assign_linguists_from_template_to_job_parts`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "template_uid" in params:
            path_params["templateUid"] = params["template_uid"]  # noqa: E501
        if "project_uid" in params:
            path_params["projectUid"] = params["project_uid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/projects/{projectUid}/applyTemplate/{templateUid}/assignProviders/forJobParts",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="JobPartsDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def assignable_templates(
        self, project_uid, **kwargs
    ) -> AssignableTemplatesDto:  # noqa: E501
        """List assignable templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignable_templates(project_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_uid: (required)
        :return: AssignableTemplatesDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.assignable_templates_with_http_info(
                project_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.assignable_templates_with_http_info(
                project_uid, **kwargs
            )  # noqa: E501
            return data

    def assignable_templates_with_http_info(
        self, project_uid, **kwargs
    ) -> AssignableTemplatesDto:  # noqa: E501
        """List assignable templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignable_templates_with_http_info(project_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_uid: (required)
        :return: AssignableTemplatesDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["project_uid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignable_templates" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_uid' is set
        if "project_uid" not in params or params["project_uid"] is None:
            raise ValueError(
                "Missing the required parameter `project_uid` when calling `assignable_templates`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_uid" in params:
            path_params["projectUid"] = params["project_uid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/projects/{projectUid}/assignableTemplates",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="AssignableTemplatesDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_custom_fields1(
        self, project_template_uid, **kwargs
    ) -> CustomFieldInstancesDto:  # noqa: E501
        """Create custom field instances  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_custom_fields1(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :param CreateCustomFieldInstancesDto body:
        :return: CustomFieldInstancesDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_custom_fields1_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.create_custom_fields1_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
            return data

    def create_custom_fields1_with_http_info(
        self, project_template_uid, **kwargs
    ) -> CustomFieldInstancesDto:  # noqa: E501
        """Create custom field instances  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_custom_fields1_with_http_info(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :param CreateCustomFieldInstancesDto body:
        :return: CustomFieldInstancesDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["project_template_uid", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_custom_fields1" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_template_uid' is set
        if (
            "project_template_uid" not in params
            or params["project_template_uid"] is None
        ):
            raise ValueError(
                "Missing the required parameter `project_template_uid` when calling `create_custom_fields1`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_template_uid" in params:
            path_params["projectTemplateUid"] = params[
                "project_template_uid"
            ]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["*/*"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["*/*"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/projectTemplates/{projectTemplateUid}/customFields",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="CustomFieldInstancesDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_project_from_template_v2(
        self, template_uid, **kwargs
    ) -> AbstractProjectDtoV2:  # noqa: E501
        """Create project from template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_project_from_template_v2(template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_uid: (required)
        :param CreateProjectFromTemplateV2Dto body:
        :return: AbstractProjectDtoV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_project_from_template_v2_with_http_info(
                template_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.create_project_from_template_v2_with_http_info(
                template_uid, **kwargs
            )  # noqa: E501
            return data

    def create_project_from_template_v2_with_http_info(
        self, template_uid, **kwargs
    ) -> AbstractProjectDtoV2:  # noqa: E501
        """Create project from template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_project_from_template_v2_with_http_info(template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_uid: (required)
        :param CreateProjectFromTemplateV2Dto body:
        :return: AbstractProjectDtoV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["template_uid", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_project_from_template_v2" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'template_uid' is set
        if "template_uid" not in params or params["template_uid"] is None:
            raise ValueError(
                "Missing the required parameter `template_uid` when calling `create_project_from_template_v2`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "template_uid" in params:
            path_params["templateUid"] = params["template_uid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v2/projects/applyTemplate/{templateUid}",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="AbstractProjectDtoV2",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_project_from_template_v2_async(
        self, template_uid, **kwargs
    ) -> AsyncRequestWrapperV2Dto:  # noqa: E501
        """Create project from template (async)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_project_from_template_v2_async(template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_uid: (required)
        :param CreateProjectFromTemplateAsyncV2Dto body:
        :return: AsyncRequestWrapperV2Dto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_project_from_template_v2_async_with_http_info(
                template_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.create_project_from_template_v2_async_with_http_info(
                template_uid, **kwargs
            )  # noqa: E501
            return data

    def create_project_from_template_v2_async_with_http_info(
        self, template_uid, **kwargs
    ) -> AsyncRequestWrapperV2Dto:  # noqa: E501
        """Create project from template (async)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_project_from_template_v2_async_with_http_info(template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_uid: (required)
        :param CreateProjectFromTemplateAsyncV2Dto body:
        :return: AsyncRequestWrapperV2Dto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["template_uid", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_project_from_template_v2_async" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'template_uid' is set
        if "template_uid" not in params or params["template_uid"] is None:
            raise ValueError(
                "Missing the required parameter `template_uid` when calling `create_project_from_template_v2_async`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "template_uid" in params:
            path_params["templateUid"] = params["template_uid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v2/projects/applyTemplate/async/{templateUid}",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="AsyncRequestWrapperV2Dto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_project_template(
        self, body, **kwargs
    ) -> ProjectTemplateDto:  # noqa: E501
        """Create project template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_project_template(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectTemplateCreateActionDto body: (required)
        :return: ProjectTemplateDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_project_template_with_http_info(
                body, **kwargs
            )  # noqa: E501
        else:
            (data) = self.create_project_template_with_http_info(
                body, **kwargs
            )  # noqa: E501
            return data

    def create_project_template_with_http_info(
        self, body, **kwargs
    ) -> ProjectTemplateDto:  # noqa: E501
        """Create project template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_project_template_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectTemplateCreateActionDto body: (required)
        :return: ProjectTemplateDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_project_template" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `create_project_template`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/projectTemplates",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ProjectTemplateDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_custom_field2(
        self, project_template_uid, field_instance_uid, **kwargs
    ) -> None:  # noqa: E501
        """Delete custom field of project template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_custom_field2(project_template_uid, field_instance_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :param str field_instance_uid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_custom_field2_with_http_info(
                project_template_uid, field_instance_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_custom_field2_with_http_info(
                project_template_uid, field_instance_uid, **kwargs
            )  # noqa: E501
            return data

    def delete_custom_field2_with_http_info(
        self, project_template_uid, field_instance_uid, **kwargs
    ) -> None:  # noqa: E501
        """Delete custom field of project template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_custom_field2_with_http_info(project_template_uid, field_instance_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :param str field_instance_uid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["project_template_uid", "field_instance_uid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_custom_field2" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_template_uid' is set
        if (
            "project_template_uid" not in params
            or params["project_template_uid"] is None
        ):
            raise ValueError(
                "Missing the required parameter `project_template_uid` when calling `delete_custom_field2`"
            )  # noqa: E501
        # verify the required parameter 'field_instance_uid' is set
        if "field_instance_uid" not in params or params["field_instance_uid"] is None:
            raise ValueError(
                "Missing the required parameter `field_instance_uid` when calling `delete_custom_field2`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_template_uid" in params:
            path_params["projectTemplateUid"] = params[
                "project_template_uid"
            ]  # noqa: E501
        if "field_instance_uid" in params:
            path_params["fieldInstanceUid"] = params["field_instance_uid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/projectTemplates/{projectTemplateUid}/customFields/{fieldInstanceUid}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_project_template(
        self, project_template_uid, **kwargs
    ) -> None:  # noqa: E501
        """Delete project template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_project_template(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_project_template_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_project_template_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
            return data

    def delete_project_template_with_http_info(
        self, project_template_uid, **kwargs
    ) -> None:  # noqa: E501
        """Delete project template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_project_template_with_http_info(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["project_template_uid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_project_template" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_template_uid' is set
        if (
            "project_template_uid" not in params
            or params["project_template_uid"] is None
        ):
            raise ValueError(
                "Missing the required parameter `project_template_uid` when calling `delete_project_template`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_template_uid" in params:
            path_params["projectTemplateUid"] = params[
                "project_template_uid"
            ]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/projectTemplates/{projectTemplateUid}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def edit_custom_field1(
        self, project_template_uid, field_instance_uid, **kwargs
    ) -> CustomFieldInstanceDto:  # noqa: E501
        """Edit custom field of project template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_custom_field1(project_template_uid, field_instance_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :param str field_instance_uid: (required)
        :param UpdateCustomFieldInstanceDto body:
        :return: CustomFieldInstanceDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.edit_custom_field1_with_http_info(
                project_template_uid, field_instance_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.edit_custom_field1_with_http_info(
                project_template_uid, field_instance_uid, **kwargs
            )  # noqa: E501
            return data

    def edit_custom_field1_with_http_info(
        self, project_template_uid, field_instance_uid, **kwargs
    ) -> CustomFieldInstanceDto:  # noqa: E501
        """Edit custom field of project template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_custom_field1_with_http_info(project_template_uid, field_instance_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :param str field_instance_uid: (required)
        :param UpdateCustomFieldInstanceDto body:
        :return: CustomFieldInstanceDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "project_template_uid",
            "field_instance_uid",
            "body",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_custom_field1" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_template_uid' is set
        if (
            "project_template_uid" not in params
            or params["project_template_uid"] is None
        ):
            raise ValueError(
                "Missing the required parameter `project_template_uid` when calling `edit_custom_field1`"
            )  # noqa: E501
        # verify the required parameter 'field_instance_uid' is set
        if "field_instance_uid" not in params or params["field_instance_uid"] is None:
            raise ValueError(
                "Missing the required parameter `field_instance_uid` when calling `edit_custom_field1`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_template_uid" in params:
            path_params["projectTemplateUid"] = params[
                "project_template_uid"
            ]  # noqa: E501
        if "field_instance_uid" in params:
            path_params["fieldInstanceUid"] = params["field_instance_uid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["*/*"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["*/*"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/projectTemplates/{projectTemplateUid}/customFields/{fieldInstanceUid}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="CustomFieldInstanceDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def edit_custom_fields1(
        self, project_template_uid, **kwargs
    ) -> CustomFieldInstancesDto:  # noqa: E501
        """Edit custom fields of the project template (batch)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_custom_fields1(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :param UpdateCustomFieldInstancesDto body:
        :return: CustomFieldInstancesDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.edit_custom_fields1_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.edit_custom_fields1_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
            return data

    def edit_custom_fields1_with_http_info(
        self, project_template_uid, **kwargs
    ) -> CustomFieldInstancesDto:  # noqa: E501
        """Edit custom fields of the project template (batch)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_custom_fields1_with_http_info(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :param UpdateCustomFieldInstancesDto body:
        :return: CustomFieldInstancesDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["project_template_uid", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_custom_fields1" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_template_uid' is set
        if (
            "project_template_uid" not in params
            or params["project_template_uid"] is None
        ):
            raise ValueError(
                "Missing the required parameter `project_template_uid` when calling `edit_custom_fields1`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_template_uid" in params:
            path_params["projectTemplateUid"] = params[
                "project_template_uid"
            ]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["*/*"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["*/*"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/projectTemplates/{projectTemplateUid}/customFields",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="CustomFieldInstancesDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def edit_project_template(
        self, body, project_template_uid, **kwargs
    ) -> ProjectTemplateDto:  # noqa: E501
        """Edit project template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_project_template(body, project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectTemplateEditDto body: (required)
        :param str project_template_uid: (required)
        :return: ProjectTemplateDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.edit_project_template_with_http_info(
                body, project_template_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.edit_project_template_with_http_info(
                body, project_template_uid, **kwargs
            )  # noqa: E501
            return data

    def edit_project_template_with_http_info(
        self, body, project_template_uid, **kwargs
    ) -> ProjectTemplateDto:  # noqa: E501
        """Edit project template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_project_template_with_http_info(body, project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectTemplateEditDto body: (required)
        :param str project_template_uid: (required)
        :return: ProjectTemplateDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body", "project_template_uid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_project_template" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `edit_project_template`"
            )  # noqa: E501
        # verify the required parameter 'project_template_uid' is set
        if (
            "project_template_uid" not in params
            or params["project_template_uid"] is None
        ):
            raise ValueError(
                "Missing the required parameter `project_template_uid` when calling `edit_project_template`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_template_uid" in params:
            path_params["projectTemplateUid"] = params[
                "project_template_uid"
            ]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/projectTemplates/{projectTemplateUid}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ProjectTemplateDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def edit_project_template_access_settings(
        self, project_template_uid, **kwargs
    ) -> ProjectSecuritySettingsDtoV2:  # noqa: E501
        """Edit project template access and security settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_project_template_access_settings(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :param EditProjectSecuritySettingsDtoV2 body:
        :return: ProjectSecuritySettingsDtoV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.edit_project_template_access_settings_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.edit_project_template_access_settings_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
            return data

    def edit_project_template_access_settings_with_http_info(
        self, project_template_uid, **kwargs
    ) -> ProjectSecuritySettingsDtoV2:  # noqa: E501
        """Edit project template access and security settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_project_template_access_settings_with_http_info(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :param EditProjectSecuritySettingsDtoV2 body:
        :return: ProjectSecuritySettingsDtoV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["project_template_uid", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_project_template_access_settings" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_template_uid' is set
        if (
            "project_template_uid" not in params
            or params["project_template_uid"] is None
        ):
            raise ValueError(
                "Missing the required parameter `project_template_uid` when calling `edit_project_template_access_settings`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_template_uid" in params:
            path_params["projectTemplateUid"] = params[
                "project_template_uid"
            ]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/projectTemplates/{projectTemplateUid}/accessSettings",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ProjectSecuritySettingsDtoV2",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def edit_project_template_import_settings(
        self, project_template_uid, **kwargs
    ) -> FileImportSettingsDto:  # noqa: E501
        """Edit project template import settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_project_template_import_settings(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :param FileImportSettingsCreateDto body:
        :return: FileImportSettingsDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.edit_project_template_import_settings_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.edit_project_template_import_settings_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
            return data

    def edit_project_template_import_settings_with_http_info(
        self, project_template_uid, **kwargs
    ) -> FileImportSettingsDto:  # noqa: E501
        """Edit project template import settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_project_template_import_settings_with_http_info(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :param FileImportSettingsCreateDto body:
        :return: FileImportSettingsDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["project_template_uid", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_project_template_import_settings" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_template_uid' is set
        if (
            "project_template_uid" not in params
            or params["project_template_uid"] is None
        ):
            raise ValueError(
                "Missing the required parameter `project_template_uid` when calling `edit_project_template_import_settings`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_template_uid" in params:
            path_params["projectTemplateUid"] = params[
                "project_template_uid"
            ]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/projectTemplates/{projectTemplateUid}/importSettings",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="FileImportSettingsDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_analyse_settings_for_project_template(
        self, project_template_uid, **kwargs
    ) -> AbstractAnalyseSettingsDto:  # noqa: E501
        """Get analyse settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_analyse_settings_for_project_template(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :return: AbstractAnalyseSettingsDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_analyse_settings_for_project_template_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_analyse_settings_for_project_template_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
            return data

    def get_analyse_settings_for_project_template_with_http_info(
        self, project_template_uid, **kwargs
    ) -> AbstractAnalyseSettingsDto:  # noqa: E501
        """Get analyse settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_analyse_settings_for_project_template_with_http_info(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :return: AbstractAnalyseSettingsDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["project_template_uid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_analyse_settings_for_project_template" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_template_uid' is set
        if (
            "project_template_uid" not in params
            or params["project_template_uid"] is None
        ):
            raise ValueError(
                "Missing the required parameter `project_template_uid` when calling `get_analyse_settings_for_project_template`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_template_uid" in params:
            path_params["projectTemplateUid"] = params[
                "project_template_uid"
            ]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/projectTemplates/{projectTemplateUid}/analyseSettings",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="AbstractAnalyseSettingsDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_custom_field2(
        self, project_template_uid, field_instance_uid, **kwargs
    ) -> CustomFieldInstanceDto:  # noqa: E501
        """Get custom field of project template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_custom_field2(project_template_uid, field_instance_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :param str field_instance_uid: (required)
        :return: CustomFieldInstanceDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_custom_field2_with_http_info(
                project_template_uid, field_instance_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_custom_field2_with_http_info(
                project_template_uid, field_instance_uid, **kwargs
            )  # noqa: E501
            return data

    def get_custom_field2_with_http_info(
        self, project_template_uid, field_instance_uid, **kwargs
    ) -> CustomFieldInstanceDto:  # noqa: E501
        """Get custom field of project template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_custom_field2_with_http_info(project_template_uid, field_instance_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :param str field_instance_uid: (required)
        :return: CustomFieldInstanceDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["project_template_uid", "field_instance_uid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_custom_field2" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_template_uid' is set
        if (
            "project_template_uid" not in params
            or params["project_template_uid"] is None
        ):
            raise ValueError(
                "Missing the required parameter `project_template_uid` when calling `get_custom_field2`"
            )  # noqa: E501
        # verify the required parameter 'field_instance_uid' is set
        if "field_instance_uid" not in params or params["field_instance_uid"] is None:
            raise ValueError(
                "Missing the required parameter `field_instance_uid` when calling `get_custom_field2`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_template_uid" in params:
            path_params["projectTemplateUid"] = params[
                "project_template_uid"
            ]  # noqa: E501
        if "field_instance_uid" in params:
            path_params["fieldInstanceUid"] = params["field_instance_uid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["*/*"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/projectTemplates/{projectTemplateUid}/customFields/{fieldInstanceUid}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="CustomFieldInstanceDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_custom_fields_page1(
        self, project_template_uid, **kwargs
    ) -> PageDtoCustomFieldInstanceDto:  # noqa: E501
        """Get custom fields of project template (page)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_custom_fields_page1(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :param int page_number: Page number, starting with 0, default 0
        :param int page_size: Page size, accepts values between 1 and 50, default 20
        :param list[str] created_by: Filter by webhook creators UIDs
        :param list[str] modified_by: Filter by webhook updaters UIDs
        :param str sort_field: Sort by this field
        :param str sort_trend: Sort direction
        :return: PageDtoCustomFieldInstanceDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_custom_fields_page1_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_custom_fields_page1_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
            return data

    def get_custom_fields_page1_with_http_info(
        self, project_template_uid, **kwargs
    ) -> PageDtoCustomFieldInstanceDto:  # noqa: E501
        """Get custom fields of project template (page)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_custom_fields_page1_with_http_info(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :param int page_number: Page number, starting with 0, default 0
        :param int page_size: Page size, accepts values between 1 and 50, default 20
        :param list[str] created_by: Filter by webhook creators UIDs
        :param list[str] modified_by: Filter by webhook updaters UIDs
        :param str sort_field: Sort by this field
        :param str sort_trend: Sort direction
        :return: PageDtoCustomFieldInstanceDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "project_template_uid",
            "page_number",
            "page_size",
            "created_by",
            "modified_by",
            "sort_field",
            "sort_trend",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_custom_fields_page1" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_template_uid' is set
        if (
            "project_template_uid" not in params
            or params["project_template_uid"] is None
        ):
            raise ValueError(
                "Missing the required parameter `project_template_uid` when calling `get_custom_fields_page1`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_template_uid" in params:
            path_params["projectTemplateUid"] = params[
                "project_template_uid"
            ]  # noqa: E501

        query_params = []
        if "page_number" in params:
            query_params.append(("pageNumber", params["page_number"]))  # noqa: E501
        if "page_size" in params:
            query_params.append(("pageSize", params["page_size"]))  # noqa: E501
        if "created_by" in params:
            query_params.append(("createdBy", params["created_by"]))  # noqa: E501
            collection_formats["createdBy"] = "multi"  # noqa: E501
        if "modified_by" in params:
            query_params.append(("modifiedBy", params["modified_by"]))  # noqa: E501
            collection_formats["modifiedBy"] = "multi"  # noqa: E501
        if "sort_field" in params:
            query_params.append(("sortField", params["sort_field"]))  # noqa: E501
        if "sort_trend" in params:
            query_params.append(("sortTrend", params["sort_trend"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["*/*"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/projectTemplates/{projectTemplateUid}/customFields",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PageDtoCustomFieldInstanceDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_import_settings_for_project_template(
        self, project_template_uid, **kwargs
    ) -> FileImportSettingsDto:  # noqa: E501
        """Get import settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_import_settings_for_project_template(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :return: FileImportSettingsDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_import_settings_for_project_template_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_import_settings_for_project_template_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
            return data

    def get_import_settings_for_project_template_with_http_info(
        self, project_template_uid, **kwargs
    ) -> FileImportSettingsDto:  # noqa: E501
        """Get import settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_import_settings_for_project_template_with_http_info(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :return: FileImportSettingsDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["project_template_uid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_import_settings_for_project_template" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_template_uid' is set
        if (
            "project_template_uid" not in params
            or params["project_template_uid"] is None
        ):
            raise ValueError(
                "Missing the required parameter `project_template_uid` when calling `get_import_settings_for_project_template`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_template_uid" in params:
            path_params["projectTemplateUid"] = params[
                "project_template_uid"
            ]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/projectTemplates/{projectTemplateUid}/importSettings",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="FileImportSettingsDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_machine_translate_settings_for_project_template(
        self, project_template_uid, **kwargs
    ) -> MTSettingsPerLanguageListDto:  # noqa: E501
        """Get project template machine translate settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_machine_translate_settings_for_project_template(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :return: MTSettingsPerLanguageListDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.get_machine_translate_settings_for_project_template_with_http_info(
                    project_template_uid, **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_machine_translate_settings_for_project_template_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
            return data

    def get_machine_translate_settings_for_project_template_with_http_info(
        self, project_template_uid, **kwargs
    ) -> MTSettingsPerLanguageListDto:  # noqa: E501
        """Get project template machine translate settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_machine_translate_settings_for_project_template_with_http_info(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :return: MTSettingsPerLanguageListDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["project_template_uid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_machine_translate_settings_for_project_template"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_template_uid' is set
        if (
            "project_template_uid" not in params
            or params["project_template_uid"] is None
        ):
            raise ValueError(
                "Missing the required parameter `project_template_uid` when calling `get_machine_translate_settings_for_project_template`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_template_uid" in params:
            path_params["projectTemplateUid"] = params[
                "project_template_uid"
            ]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/projectTemplates/{projectTemplateUid}/mtSettings",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="MTSettingsPerLanguageListDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_pre_translate_settings_for_project_template2(
        self, project_template_uid, **kwargs
    ) -> PreTranslateSettingsV3Dto:  # noqa: E501
        """Get Pre-translate settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pre_translate_settings_for_project_template2(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :return: PreTranslateSettingsV3Dto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_pre_translate_settings_for_project_template2_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_pre_translate_settings_for_project_template2_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
            return data

    def get_pre_translate_settings_for_project_template2_with_http_info(
        self, project_template_uid, **kwargs
    ) -> PreTranslateSettingsV3Dto:  # noqa: E501
        """Get Pre-translate settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pre_translate_settings_for_project_template2_with_http_info(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :return: PreTranslateSettingsV3Dto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["project_template_uid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pre_translate_settings_for_project_template2" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_template_uid' is set
        if (
            "project_template_uid" not in params
            or params["project_template_uid"] is None
        ):
            raise ValueError(
                "Missing the required parameter `project_template_uid` when calling `get_pre_translate_settings_for_project_template2`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_template_uid" in params:
            path_params["projectTemplateUid"] = params[
                "project_template_uid"
            ]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v3/projectTemplates/{projectTemplateUid}/preTranslateSettings",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PreTranslateSettingsV3Dto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_project_template(
        self, project_template_uid, **kwargs
    ) -> ProjectTemplateDto:  # noqa: E501
        """Get project template  # noqa: E501

        Note: importSettings in response is deprecated and will be always null  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_template(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :return: ProjectTemplateDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_project_template_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_project_template_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
            return data

    def get_project_template_with_http_info(
        self, project_template_uid, **kwargs
    ) -> ProjectTemplateDto:  # noqa: E501
        """Get project template  # noqa: E501

        Note: importSettings in response is deprecated and will be always null  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_template_with_http_info(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :return: ProjectTemplateDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["project_template_uid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_template" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_template_uid' is set
        if (
            "project_template_uid" not in params
            or params["project_template_uid"] is None
        ):
            raise ValueError(
                "Missing the required parameter `project_template_uid` when calling `get_project_template`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_template_uid" in params:
            path_params["projectTemplateUid"] = params[
                "project_template_uid"
            ]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/projectTemplates/{projectTemplateUid}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ProjectTemplateDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_project_template_access_settings(
        self, project_template_uid, **kwargs
    ) -> ProjectSecuritySettingsDtoV2:  # noqa: E501
        """Get project template access and security settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_template_access_settings(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :return: ProjectSecuritySettingsDtoV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_project_template_access_settings_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_project_template_access_settings_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
            return data

    def get_project_template_access_settings_with_http_info(
        self, project_template_uid, **kwargs
    ) -> ProjectSecuritySettingsDtoV2:  # noqa: E501
        """Get project template access and security settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_template_access_settings_with_http_info(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :return: ProjectSecuritySettingsDtoV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["project_template_uid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_template_access_settings" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_template_uid' is set
        if (
            "project_template_uid" not in params
            or params["project_template_uid"] is None
        ):
            raise ValueError(
                "Missing the required parameter `project_template_uid` when calling `get_project_template_access_settings`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_template_uid" in params:
            path_params["projectTemplateUid"] = params[
                "project_template_uid"
            ]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/projectTemplates/{projectTemplateUid}/accessSettings",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ProjectSecuritySettingsDtoV2",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_project_template_qa_settings(
        self, project_template_uid, **kwargs
    ) -> QASettingsDtoV2:  # noqa: E501
        """Get quality assurance settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_template_qa_settings(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :return: QASettingsDtoV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_project_template_qa_settings_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_project_template_qa_settings_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
            return data

    def get_project_template_qa_settings_with_http_info(
        self, project_template_uid, **kwargs
    ) -> QASettingsDtoV2:  # noqa: E501
        """Get quality assurance settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_template_qa_settings_with_http_info(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :return: QASettingsDtoV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["project_template_uid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_template_qa_settings" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_template_uid' is set
        if (
            "project_template_uid" not in params
            or params["project_template_uid"] is None
        ):
            raise ValueError(
                "Missing the required parameter `project_template_uid` when calling `get_project_template_qa_settings`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_template_uid" in params:
            path_params["projectTemplateUid"] = params[
                "project_template_uid"
            ]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/projectTemplates/{projectTemplateUid}/qaSettings",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="QASettingsDtoV2",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_project_template_term_bases(
        self, project_template_uid, **kwargs
    ) -> ProjectTemplateTermBaseListDto:  # noqa: E501
        """Get term bases  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_template_term_bases(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :return: ProjectTemplateTermBaseListDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_project_template_term_bases_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_project_template_term_bases_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
            return data

    def get_project_template_term_bases_with_http_info(
        self, project_template_uid, **kwargs
    ) -> ProjectTemplateTermBaseListDto:  # noqa: E501
        """Get term bases  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_template_term_bases_with_http_info(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :return: ProjectTemplateTermBaseListDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["project_template_uid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_template_term_bases" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_template_uid' is set
        if (
            "project_template_uid" not in params
            or params["project_template_uid"] is None
        ):
            raise ValueError(
                "Missing the required parameter `project_template_uid` when calling `get_project_template_term_bases`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_template_uid" in params:
            path_params["projectTemplateUid"] = params[
                "project_template_uid"
            ]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/projectTemplates/{projectTemplateUid}/termBases",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ProjectTemplateTermBaseListDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_project_template_trans_memories2(
        self, project_template_uid, **kwargs
    ) -> ProjectTemplateTransMemoryListDtoV3:  # noqa: E501
        """Get translation memories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_template_trans_memories2(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :param str target_lang: Filter project translation memories by target language
        :param str wf_step_uid: Filter project translation memories by workflow step
        :return: ProjectTemplateTransMemoryListDtoV3
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_project_template_trans_memories2_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_project_template_trans_memories2_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
            return data

    def get_project_template_trans_memories2_with_http_info(
        self, project_template_uid, **kwargs
    ) -> ProjectTemplateTransMemoryListDtoV3:  # noqa: E501
        """Get translation memories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_template_trans_memories2_with_http_info(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :param str target_lang: Filter project translation memories by target language
        :param str wf_step_uid: Filter project translation memories by workflow step
        :return: ProjectTemplateTransMemoryListDtoV3
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "project_template_uid",
            "target_lang",
            "wf_step_uid",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_template_trans_memories2" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_template_uid' is set
        if (
            "project_template_uid" not in params
            or params["project_template_uid"] is None
        ):
            raise ValueError(
                "Missing the required parameter `project_template_uid` when calling `get_project_template_trans_memories2`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_template_uid" in params:
            path_params["projectTemplateUid"] = params[
                "project_template_uid"
            ]  # noqa: E501

        query_params = []
        if "target_lang" in params:
            query_params.append(("targetLang", params["target_lang"]))  # noqa: E501
        if "wf_step_uid" in params:
            query_params.append(("wfStepUid", params["wf_step_uid"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v3/projectTemplates/{projectTemplateUid}/transMemories",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ProjectTemplateTransMemoryListDtoV3",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_project_templates(
        self, **kwargs
    ) -> PageDtoProjectTemplateReference:  # noqa: E501
        """List project templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_templates(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:
        :param int client_id:
        :param str client_name:
        :param str owner_uid:
        :param str domain_name:
        :param str sub_domain_name:
        :param int cost_center_id:
        :param str cost_center_name:
        :param str business_unit_name:
        :param str sort:
        :param str direction:
        :param int page_number: Page number, starting with 0, default 0
        :param int page_size: Page size, accepts values between 1 and 50, default 50
        :return: PageDtoProjectTemplateReference
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_project_templates_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_project_templates_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_project_templates_with_http_info(
        self, **kwargs
    ) -> PageDtoProjectTemplateReference:  # noqa: E501
        """List project templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_templates_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:
        :param int client_id:
        :param str client_name:
        :param str owner_uid:
        :param str domain_name:
        :param str sub_domain_name:
        :param int cost_center_id:
        :param str cost_center_name:
        :param str business_unit_name:
        :param str sort:
        :param str direction:
        :param int page_number: Page number, starting with 0, default 0
        :param int page_size: Page size, accepts values between 1 and 50, default 50
        :return: PageDtoProjectTemplateReference
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "name",
            "client_id",
            "client_name",
            "owner_uid",
            "domain_name",
            "sub_domain_name",
            "cost_center_id",
            "cost_center_name",
            "business_unit_name",
            "sort",
            "direction",
            "page_number",
            "page_size",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_templates" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "client_id" in params:
            query_params.append(("clientId", params["client_id"]))  # noqa: E501
        if "client_name" in params:
            query_params.append(("clientName", params["client_name"]))  # noqa: E501
        if "owner_uid" in params:
            query_params.append(("ownerUid", params["owner_uid"]))  # noqa: E501
        if "domain_name" in params:
            query_params.append(("domainName", params["domain_name"]))  # noqa: E501
        if "sub_domain_name" in params:
            query_params.append(
                ("subDomainName", params["sub_domain_name"])
            )  # noqa: E501
        if "cost_center_id" in params:
            query_params.append(
                ("costCenterId", params["cost_center_id"])
            )  # noqa: E501
        if "cost_center_name" in params:
            query_params.append(
                ("costCenterName", params["cost_center_name"])
            )  # noqa: E501
        if "business_unit_name" in params:
            query_params.append(
                ("businessUnitName", params["business_unit_name"])
            )  # noqa: E501
        if "sort" in params:
            query_params.append(("sort", params["sort"]))  # noqa: E501
        if "direction" in params:
            query_params.append(("direction", params["direction"]))  # noqa: E501
        if "page_number" in params:
            query_params.append(("pageNumber", params["page_number"]))  # noqa: E501
        if "page_size" in params:
            query_params.append(("pageSize", params["page_size"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/projectTemplates",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PageDtoProjectTemplateReference",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def relevant_trans_memories(
        self, project_template_uid, **kwargs
    ) -> PageDtoTransMemoryDto:  # noqa: E501
        """List project template relevant translation memories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.relevant_trans_memories(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :param str name:
        :param str domain_name:
        :param str client_name:
        :param str sub_domain_name:
        :param list[str] target_langs:
        :param bool strict_lang_matching:
        :param int page_number: Page number, starting with 0, default 0
        :param int page_size: Page size, accepts values between 1 and 50, default 50
        :return: PageDtoTransMemoryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.relevant_trans_memories_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.relevant_trans_memories_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
            return data

    def relevant_trans_memories_with_http_info(
        self, project_template_uid, **kwargs
    ) -> PageDtoTransMemoryDto:  # noqa: E501
        """List project template relevant translation memories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.relevant_trans_memories_with_http_info(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :param str name:
        :param str domain_name:
        :param str client_name:
        :param str sub_domain_name:
        :param list[str] target_langs:
        :param bool strict_lang_matching:
        :param int page_number: Page number, starting with 0, default 0
        :param int page_size: Page size, accepts values between 1 and 50, default 50
        :return: PageDtoTransMemoryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "project_template_uid",
            "name",
            "domain_name",
            "client_name",
            "sub_domain_name",
            "target_langs",
            "strict_lang_matching",
            "page_number",
            "page_size",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method relevant_trans_memories" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_template_uid' is set
        if (
            "project_template_uid" not in params
            or params["project_template_uid"] is None
        ):
            raise ValueError(
                "Missing the required parameter `project_template_uid` when calling `relevant_trans_memories`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_template_uid" in params:
            path_params["projectTemplateUid"] = params[
                "project_template_uid"
            ]  # noqa: E501

        query_params = []
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "domain_name" in params:
            query_params.append(("domainName", params["domain_name"]))  # noqa: E501
        if "client_name" in params:
            query_params.append(("clientName", params["client_name"]))  # noqa: E501
        if "sub_domain_name" in params:
            query_params.append(
                ("subDomainName", params["sub_domain_name"])
            )  # noqa: E501
        if "target_langs" in params:
            query_params.append(("targetLangs", params["target_langs"]))  # noqa: E501
            collection_formats["targetLangs"] = "multi"  # noqa: E501
        if "strict_lang_matching" in params:
            query_params.append(
                ("strictLangMatching", params["strict_lang_matching"])
            )  # noqa: E501
        if "page_number" in params:
            query_params.append(("pageNumber", params["page_number"]))  # noqa: E501
        if "page_size" in params:
            query_params.append(("pageSize", params["page_size"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/projectTemplates/{projectTemplateUid}/transMemories/relevant",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PageDtoTransMemoryDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def set_project_template_qa_settings(
        self, project_template_uid, **kwargs
    ) -> QASettingsDtoV2:  # noqa: E501
        """Edit quality assurance settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_project_template_qa_settings(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :param EditQASettingsDtoV2 body:
        :return: QASettingsDtoV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.set_project_template_qa_settings_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.set_project_template_qa_settings_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
            return data

    def set_project_template_qa_settings_with_http_info(
        self, project_template_uid, **kwargs
    ) -> QASettingsDtoV2:  # noqa: E501
        """Edit quality assurance settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_project_template_qa_settings_with_http_info(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :param EditQASettingsDtoV2 body:
        :return: QASettingsDtoV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["project_template_uid", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_project_template_qa_settings" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_template_uid' is set
        if (
            "project_template_uid" not in params
            or params["project_template_uid"] is None
        ):
            raise ValueError(
                "Missing the required parameter `project_template_uid` when calling `set_project_template_qa_settings`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_template_uid" in params:
            path_params["projectTemplateUid"] = params[
                "project_template_uid"
            ]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["*/*"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/projectTemplates/{projectTemplateUid}/qaSettings",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="QASettingsDtoV2",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def set_project_template_term_bases(
        self, project_template_uid, **kwargs
    ) -> ProjectTemplateTermBaseListDto:  # noqa: E501
        """Edit term bases in project template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_project_template_term_bases(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :param SetProjectTemplateTermBaseDto body:
        :return: ProjectTemplateTermBaseListDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.set_project_template_term_bases_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.set_project_template_term_bases_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
            return data

    def set_project_template_term_bases_with_http_info(
        self, project_template_uid, **kwargs
    ) -> ProjectTemplateTermBaseListDto:  # noqa: E501
        """Edit term bases in project template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_project_template_term_bases_with_http_info(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :param SetProjectTemplateTermBaseDto body:
        :return: ProjectTemplateTermBaseListDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["project_template_uid", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_project_template_term_bases" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_template_uid' is set
        if (
            "project_template_uid" not in params
            or params["project_template_uid"] is None
        ):
            raise ValueError(
                "Missing the required parameter `project_template_uid` when calling `set_project_template_term_bases`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_template_uid" in params:
            path_params["projectTemplateUid"] = params[
                "project_template_uid"
            ]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["*/*"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/projectTemplates/{projectTemplateUid}/termBases",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ProjectTemplateTermBaseListDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def set_project_template_trans_memories_v2(
        self, project_template_uid, **kwargs
    ) -> ProjectTemplateTransMemoryListV2Dto:  # noqa: E501
        """Edit translation memories  # noqa: E501

        If user wants to edit “All target languages” or \"All workflow steps”,                         but there are already varied TM settings for individual languages or steps,                         then the user risks to overwrite these individual choices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_project_template_trans_memories_v2(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :param SetProjectTemplateTransMemoriesV2Dto body:
        :return: ProjectTemplateTransMemoryListV2Dto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.set_project_template_trans_memories_v2_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.set_project_template_trans_memories_v2_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
            return data

    def set_project_template_trans_memories_v2_with_http_info(
        self, project_template_uid, **kwargs
    ) -> ProjectTemplateTransMemoryListV2Dto:  # noqa: E501
        """Edit translation memories  # noqa: E501

        If user wants to edit “All target languages” or \"All workflow steps”,                         but there are already varied TM settings for individual languages or steps,                         then the user risks to overwrite these individual choices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_project_template_trans_memories_v2_with_http_info(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :param SetProjectTemplateTransMemoriesV2Dto body:
        :return: ProjectTemplateTransMemoryListV2Dto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["project_template_uid", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_project_template_trans_memories_v2" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_template_uid' is set
        if (
            "project_template_uid" not in params
            or params["project_template_uid"] is None
        ):
            raise ValueError(
                "Missing the required parameter `project_template_uid` when calling `set_project_template_trans_memories_v2`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_template_uid" in params:
            path_params["projectTemplateUid"] = params[
                "project_template_uid"
            ]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v2/projectTemplates/{projectTemplateUid}/transMemories",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ProjectTemplateTransMemoryListV2Dto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_analyse_settings_for_project_template(
        self, project_template_uid, **kwargs
    ) -> AbstractAnalyseSettingsDto:  # noqa: E501
        """Edit analyse settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_analyse_settings_for_project_template(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :param EditAnalyseSettingsDto body:
        :return: AbstractAnalyseSettingsDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_analyse_settings_for_project_template_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_analyse_settings_for_project_template_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
            return data

    def update_analyse_settings_for_project_template_with_http_info(
        self, project_template_uid, **kwargs
    ) -> AbstractAnalyseSettingsDto:  # noqa: E501
        """Edit analyse settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_analyse_settings_for_project_template_with_http_info(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :param EditAnalyseSettingsDto body:
        :return: AbstractAnalyseSettingsDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["project_template_uid", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_analyse_settings_for_project_template" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_template_uid' is set
        if (
            "project_template_uid" not in params
            or params["project_template_uid"] is None
        ):
            raise ValueError(
                "Missing the required parameter `project_template_uid` when calling `update_analyse_settings_for_project_template`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_template_uid" in params:
            path_params["projectTemplateUid"] = params[
                "project_template_uid"
            ]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/projectTemplates/{projectTemplateUid}/analyseSettings",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="AbstractAnalyseSettingsDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_pre_translate_settings_for_project_template2(
        self, project_template_uid, **kwargs
    ) -> PreTranslateSettingsV3Dto:  # noqa: E501
        """Update Pre-translate settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pre_translate_settings_for_project_template2(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :param PreTranslateSettingsV3Dto body:
        :return: PreTranslateSettingsV3Dto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.update_pre_translate_settings_for_project_template2_with_http_info(
                    project_template_uid, **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.update_pre_translate_settings_for_project_template2_with_http_info(
                project_template_uid, **kwargs
            )  # noqa: E501
            return data

    def update_pre_translate_settings_for_project_template2_with_http_info(
        self, project_template_uid, **kwargs
    ) -> PreTranslateSettingsV3Dto:  # noqa: E501
        """Update Pre-translate settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pre_translate_settings_for_project_template2_with_http_info(project_template_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_template_uid: (required)
        :param PreTranslateSettingsV3Dto body:
        :return: PreTranslateSettingsV3Dto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["project_template_uid", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_pre_translate_settings_for_project_template2"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_template_uid' is set
        if (
            "project_template_uid" not in params
            or params["project_template_uid"] is None
        ):
            raise ValueError(
                "Missing the required parameter `project_template_uid` when calling `update_pre_translate_settings_for_project_template2`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_template_uid" in params:
            path_params["projectTemplateUid"] = params[
                "project_template_uid"
            ]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v3/projectTemplates/{projectTemplateUid}/preTranslateSettings",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PreTranslateSettingsV3Dto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
