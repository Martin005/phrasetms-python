# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from phrasetms_client.models import (
    PageDtoCustomFieldOptionDto,
    PageDtoCustomFieldDto,
    CustomFieldDto,
)
from phrasetms_client.api_client import ApiClient


class CustomFieldsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_custom_field(self, **kwargs) -> CustomFieldDto:  # noqa: E501
        """Create custom field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_custom_field(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCustomFieldDto body:
        :return: CustomFieldDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_custom_field_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_custom_field_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_custom_field_with_http_info(
        self, **kwargs
    ) -> CustomFieldDto:  # noqa: E501
        """Create custom field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_custom_field_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCustomFieldDto body:
        :return: CustomFieldDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_custom_field" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/customFields",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="CustomFieldDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_custom_field(self, field_uid, **kwargs) -> CustomFieldDto:  # noqa: E501
        """Get custom field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_custom_field(field_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str field_uid: (required)
        :return: CustomFieldDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_custom_field_with_http_info(
                field_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_custom_field_with_http_info(
                field_uid, **kwargs
            )  # noqa: E501
            return data

    def get_custom_field_with_http_info(
        self, field_uid, **kwargs
    ) -> CustomFieldDto:  # noqa: E501
        """Get custom field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_custom_field_with_http_info(field_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str field_uid: (required)
        :return: CustomFieldDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["field_uid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_custom_field" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'field_uid' is set
        if "field_uid" not in params or params["field_uid"] is None:
            raise ValueError(
                "Missing the required parameter `field_uid` when calling `get_custom_field`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "field_uid" in params:
            path_params["fieldUid"] = params["field_uid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/customFields/{fieldUid}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="CustomFieldDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_custom_field_list(self, **kwargs) -> PageDtoCustomFieldDto:  # noqa: E501
        """Lists custom fields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_custom_field_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_number: Page number, starting with 0, default 0
        :param int page_size: Page size, accepts values between 1 and 50, default 50
        :param str name: Filter by custom field name
        :param list[str] allowed_entities: Filter by custom field allowed entities
        :param list[str] types: Filter by custom field types
        :param list[str] created_by: Filter by custom field creators UIDs
        :param list[str] modified_by: Filter by custom field updaters UIDs
        :param list[str] uids: Filter by custom field UIDs
        :param bool required: Filter by custom field required parameter
        :param str sort_field: Sort by this field
        :param str sort_trend: Sort direction
        :return: PageDtoCustomFieldDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_custom_field_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_custom_field_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_custom_field_list_with_http_info(
        self, **kwargs
    ) -> PageDtoCustomFieldDto:  # noqa: E501
        """Lists custom fields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_custom_field_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_number: Page number, starting with 0, default 0
        :param int page_size: Page size, accepts values between 1 and 50, default 50
        :param str name: Filter by custom field name
        :param list[str] allowed_entities: Filter by custom field allowed entities
        :param list[str] types: Filter by custom field types
        :param list[str] created_by: Filter by custom field creators UIDs
        :param list[str] modified_by: Filter by custom field updaters UIDs
        :param list[str] uids: Filter by custom field UIDs
        :param bool required: Filter by custom field required parameter
        :param str sort_field: Sort by this field
        :param str sort_trend: Sort direction
        :return: PageDtoCustomFieldDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "page_number",
            "page_size",
            "name",
            "allowed_entities",
            "types",
            "created_by",
            "modified_by",
            "uids",
            "required",
            "sort_field",
            "sort_trend",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_custom_field_list" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "page_number" in params:
            query_params.append(("pageNumber", params["page_number"]))  # noqa: E501
        if "page_size" in params:
            query_params.append(("pageSize", params["page_size"]))  # noqa: E501
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "allowed_entities" in params:
            query_params.append(
                ("allowedEntities", params["allowed_entities"])
            )  # noqa: E501
            collection_formats["allowedEntities"] = "multi"  # noqa: E501
        if "types" in params:
            query_params.append(("types", params["types"]))  # noqa: E501
            collection_formats["types"] = "multi"  # noqa: E501
        if "created_by" in params:
            query_params.append(("createdBy", params["created_by"]))  # noqa: E501
            collection_formats["createdBy"] = "multi"  # noqa: E501
        if "modified_by" in params:
            query_params.append(("modifiedBy", params["modified_by"]))  # noqa: E501
            collection_formats["modifiedBy"] = "multi"  # noqa: E501
        if "uids" in params:
            query_params.append(("uids", params["uids"]))  # noqa: E501
            collection_formats["uids"] = "multi"  # noqa: E501
        if "required" in params:
            query_params.append(("required", params["required"]))  # noqa: E501
        if "sort_field" in params:
            query_params.append(("sortField", params["sort_field"]))  # noqa: E501
        if "sort_trend" in params:
            query_params.append(("sortTrend", params["sort_trend"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/customFields",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PageDtoCustomFieldDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_custom_field_option_list(
        self, field_uid, **kwargs
    ) -> PageDtoCustomFieldOptionDto:  # noqa: E501
        """Lists options of custom field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_custom_field_option_list(field_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str field_uid: (required)
        :param int page_number: Page number, starting with 0, default 0
        :param int page_size: Page size, accepts values between 1 and 50, default 50
        :param str name: Filter by option name
        :param str sort_field: Sort by this field
        :param str sort_trend: Sort direction
        :return: PageDtoCustomFieldOptionDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_custom_field_option_list_with_http_info(
                field_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_custom_field_option_list_with_http_info(
                field_uid, **kwargs
            )  # noqa: E501
            return data

    def get_custom_field_option_list_with_http_info(
        self, field_uid, **kwargs
    ) -> PageDtoCustomFieldOptionDto:  # noqa: E501
        """Lists options of custom field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_custom_field_option_list_with_http_info(field_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str field_uid: (required)
        :param int page_number: Page number, starting with 0, default 0
        :param int page_size: Page size, accepts values between 1 and 50, default 50
        :param str name: Filter by option name
        :param str sort_field: Sort by this field
        :param str sort_trend: Sort direction
        :return: PageDtoCustomFieldOptionDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "field_uid",
            "page_number",
            "page_size",
            "name",
            "sort_field",
            "sort_trend",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_custom_field_option_list" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'field_uid' is set
        if "field_uid" not in params or params["field_uid"] is None:
            raise ValueError(
                "Missing the required parameter `field_uid` when calling `get_custom_field_option_list`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "field_uid" in params:
            path_params["fieldUid"] = params["field_uid"]  # noqa: E501

        query_params = []
        if "page_number" in params:
            query_params.append(("pageNumber", params["page_number"]))  # noqa: E501
        if "page_size" in params:
            query_params.append(("pageSize", params["page_size"]))  # noqa: E501
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "sort_field" in params:
            query_params.append(("sortField", params["sort_field"]))  # noqa: E501
        if "sort_trend" in params:
            query_params.append(("sortTrend", params["sort_trend"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/customFields/{fieldUid}/options",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PageDtoCustomFieldOptionDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
