# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from phrasetms_client.models import (
    PageDtoAsyncRequestDto,
    AsyncRequestStatusDto,
    AsyncRequestDto,
)
from phrasetms_client.api_client import ApiClient


class AsyncRequestApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_async_request(
        self, async_request_id, **kwargs
    ) -> AsyncRequestDto:  # noqa: E501
        """Get asynchronous request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_async_request(async_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int async_request_id: (required)
        :return: AsyncRequestDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_async_request_with_http_info(
                async_request_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_async_request_with_http_info(
                async_request_id, **kwargs
            )  # noqa: E501
            return data

    def get_async_request_with_http_info(
        self, async_request_id, **kwargs
    ) -> AsyncRequestDto:  # noqa: E501
        """Get asynchronous request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_async_request_with_http_info(async_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int async_request_id: (required)
        :return: AsyncRequestDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["async_request_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_async_request" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'async_request_id' is set
        if "async_request_id" not in params or params["async_request_id"] is None:
            raise ValueError(
                "Missing the required parameter `async_request_id` when calling `get_async_request`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "async_request_id" in params:
            path_params["asyncRequestId"] = params["async_request_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/async/{asyncRequestId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="AsyncRequestDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_current_limit_status(self, **kwargs) -> AsyncRequestStatusDto:  # noqa: E501
        """Get current limits  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_limit_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: AsyncRequestStatusDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_current_limit_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_current_limit_status_with_http_info(
                **kwargs
            )  # noqa: E501
            return data

    def get_current_limit_status_with_http_info(
        self, **kwargs
    ) -> AsyncRequestStatusDto:  # noqa: E501
        """Get current limits  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_limit_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: AsyncRequestStatusDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_current_limit_status" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/async/status",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="AsyncRequestStatusDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def list_pending_requests(self, **kwargs) -> PageDtoAsyncRequestDto:  # noqa: E501
        """List pending requests  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pending_requests(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool all: Pending requests for organization instead of current user. Only for ADMIN.
        :param int page_number: Page number, starting with 0, default 0
        :param int page_size: Page size, accepts values between 1 and 50, default 50
        :return: PageDtoAsyncRequestDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.list_pending_requests_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_pending_requests_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_pending_requests_with_http_info(
        self, **kwargs
    ) -> PageDtoAsyncRequestDto:  # noqa: E501
        """List pending requests  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pending_requests_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool all: Pending requests for organization instead of current user. Only for ADMIN.
        :param int page_number: Page number, starting with 0, default 0
        :param int page_size: Page size, accepts values between 1 and 50, default 50
        :return: PageDtoAsyncRequestDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["all", "page_number", "page_size"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_pending_requests" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "all" in params:
            query_params.append(("all", params["all"]))  # noqa: E501
        if "page_number" in params:
            query_params.append(("pageNumber", params["page_number"]))  # noqa: E501
        if "page_size" in params:
            query_params.append(("pageSize", params["page_size"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/async",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PageDtoAsyncRequestDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
