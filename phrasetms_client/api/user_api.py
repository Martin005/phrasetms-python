# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from phrasetms_client.models import (
    PageDtoLastLoginDto,
    UserDetailsDtoV3,
    UserStatisticsListDto,
    PageDtoWorkflowStepReference,
    PageDtoString,
    PageDtoAssignedJobDto,
    PageDtoProjectReference,
    PageDtoUserDto,
    UserDto,
)
from phrasetms_client.api_client import ApiClient


class UserApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cancel_deletion(self, user_uid, **kwargs) -> UserDto:  # noqa: E501
        """Restore user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_deletion(user_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_uid: (required)
        :return: UserDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.cancel_deletion_with_http_info(user_uid, **kwargs)  # noqa: E501
        else:
            (data) = self.cancel_deletion_with_http_info(
                user_uid, **kwargs
            )  # noqa: E501
            return data

    def cancel_deletion_with_http_info(
        self, user_uid, **kwargs
    ) -> UserDto:  # noqa: E501
        """Restore user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_deletion_with_http_info(user_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_uid: (required)
        :return: UserDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["user_uid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_deletion" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'user_uid' is set
        if "user_uid" not in params or params["user_uid"] is None:
            raise ValueError(
                "Missing the required parameter `user_uid` when calling `cancel_deletion`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "user_uid" in params:
            path_params["userUid"] = params["user_uid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/users/{userUid}/undelete",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="UserDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_user_v3(self, **kwargs) -> UserDetailsDtoV3:  # noqa: E501
        """Create user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_user_v3(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AbstractUserCreateDto body:
        :return: UserDetailsDtoV3
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_user_v3_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_user_v3_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_user_v3_with_http_info(self, **kwargs) -> UserDetailsDtoV3:  # noqa: E501
        """Create user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_user_v3_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AbstractUserCreateDto body:
        :return: UserDetailsDtoV3
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_user_v3" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v3/users",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="UserDetailsDtoV3",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_user1(self, user_uid, **kwargs) -> None:  # noqa: E501
        """Delete user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user1(user_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_uid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_user1_with_http_info(user_uid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_user1_with_http_info(user_uid, **kwargs)  # noqa: E501
            return data

    def delete_user1_with_http_info(self, user_uid, **kwargs) -> None:  # noqa: E501
        """Delete user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user1_with_http_info(user_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_uid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["user_uid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_user1" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'user_uid' is set
        if "user_uid" not in params or params["user_uid"] is None:
            raise ValueError(
                "Missing the required parameter `user_uid` when calling `delete_user1`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "user_uid" in params:
            path_params["userUid"] = params["user_uid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/users/{userUid}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def disable_two_factor_auth_v3(
        self, user_uid, **kwargs
    ) -> UserDetailsDtoV3:  # noqa: E501
        """Disable two-factor authentication  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.disable_two_factor_auth_v3(user_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_uid: (required)
        :return: UserDetailsDtoV3
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.disable_two_factor_auth_v3_with_http_info(
                user_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.disable_two_factor_auth_v3_with_http_info(
                user_uid, **kwargs
            )  # noqa: E501
            return data

    def disable_two_factor_auth_v3_with_http_info(
        self, user_uid, **kwargs
    ) -> UserDetailsDtoV3:  # noqa: E501
        """Disable two-factor authentication  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.disable_two_factor_auth_v3_with_http_info(user_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_uid: (required)
        :return: UserDetailsDtoV3
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["user_uid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method disable_two_factor_auth_v3" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'user_uid' is set
        if "user_uid" not in params or params["user_uid"] is None:
            raise ValueError(
                "Missing the required parameter `user_uid` when calling `disable_two_factor_auth_v3`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "user_uid" in params:
            path_params["userUid"] = params["user_uid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v3/users/{userUid}/disableTwoFactorAuth",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="UserDetailsDtoV3",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_list_of_users_filtered(self, **kwargs) -> PageDtoUserDto:  # noqa: E501
        """List users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_of_users_filtered(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str first_name: Filter for first name, that starts with value
        :param str last_name: Filter for last name, that starts with value
        :param str name: Filter for last name or first name, that starts with value
        :param str user_name:
        :param str email:
        :param str name_or_email: Filter for last name, first name or email starting with the value
        :param list[str] role:
        :param bool include_deleted:
        :param int page_number: Page number, starting with 0, default 0
        :param int page_size: Page size, accepts values between 1 and 50, default 50
        :param list[str] sort:
        :param list[str] order:
        :return: PageDtoUserDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_list_of_users_filtered_with_http_info(
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_list_of_users_filtered_with_http_info(
                **kwargs
            )  # noqa: E501
            return data

    def get_list_of_users_filtered_with_http_info(
        self, **kwargs
    ) -> PageDtoUserDto:  # noqa: E501
        """List users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_of_users_filtered_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str first_name: Filter for first name, that starts with value
        :param str last_name: Filter for last name, that starts with value
        :param str name: Filter for last name or first name, that starts with value
        :param str user_name:
        :param str email:
        :param str name_or_email: Filter for last name, first name or email starting with the value
        :param list[str] role:
        :param bool include_deleted:
        :param int page_number: Page number, starting with 0, default 0
        :param int page_size: Page size, accepts values between 1 and 50, default 50
        :param list[str] sort:
        :param list[str] order:
        :return: PageDtoUserDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "first_name",
            "last_name",
            "name",
            "user_name",
            "email",
            "name_or_email",
            "role",
            "include_deleted",
            "page_number",
            "page_size",
            "sort",
            "order",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_of_users_filtered" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "first_name" in params:
            query_params.append(("firstName", params["first_name"]))  # noqa: E501
        if "last_name" in params:
            query_params.append(("lastName", params["last_name"]))  # noqa: E501
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "user_name" in params:
            query_params.append(("userName", params["user_name"]))  # noqa: E501
        if "email" in params:
            query_params.append(("email", params["email"]))  # noqa: E501
        if "name_or_email" in params:
            query_params.append(("nameOrEmail", params["name_or_email"]))  # noqa: E501
        if "role" in params:
            query_params.append(("role", params["role"]))  # noqa: E501
            collection_formats["role"] = "multi"  # noqa: E501
        if "include_deleted" in params:
            query_params.append(
                ("includeDeleted", params["include_deleted"])
            )  # noqa: E501
        if "page_number" in params:
            query_params.append(("pageNumber", params["page_number"]))  # noqa: E501
        if "page_size" in params:
            query_params.append(("pageSize", params["page_size"]))  # noqa: E501
        if "sort" in params:
            query_params.append(("sort", params["sort"]))  # noqa: E501
            collection_formats["sort"] = "multi"  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
            collection_formats["order"] = "multi"  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/users",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PageDtoUserDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_user_v3(self, user_uid, **kwargs) -> UserDetailsDtoV3:  # noqa: E501
        """Get user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_v3(user_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_uid: (required)
        :return: UserDetailsDtoV3
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_user_v3_with_http_info(user_uid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_v3_with_http_info(user_uid, **kwargs)  # noqa: E501
            return data

    def get_user_v3_with_http_info(
        self, user_uid, **kwargs
    ) -> UserDetailsDtoV3:  # noqa: E501
        """Get user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_v3_with_http_info(user_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_uid: (required)
        :return: UserDetailsDtoV3
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["user_uid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_v3" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'user_uid' is set
        if "user_uid" not in params or params["user_uid"] is None:
            raise ValueError(
                "Missing the required parameter `user_uid` when calling `get_user_v3`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "user_uid" in params:
            path_params["userUid"] = params["user_uid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v3/users/{userUid}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="UserDetailsDtoV3",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def list_assigned_projects(
        self, user_uid, **kwargs
    ) -> PageDtoProjectReference:  # noqa: E501
        """List assigned projects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_assigned_projects(user_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_uid: (required)
        :param list[str] status:
        :param list[str] target_lang:
        :param int workflow_step_id:
        :param int due_in_hours: -1 for jobs that are overdue
        :param str filename:
        :param str project_name:
        :param int page_number:
        :param int page_size:
        :return: PageDtoProjectReference
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.list_assigned_projects_with_http_info(
                user_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.list_assigned_projects_with_http_info(
                user_uid, **kwargs
            )  # noqa: E501
            return data

    def list_assigned_projects_with_http_info(
        self, user_uid, **kwargs
    ) -> PageDtoProjectReference:  # noqa: E501
        """List assigned projects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_assigned_projects_with_http_info(user_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_uid: (required)
        :param list[str] status:
        :param list[str] target_lang:
        :param int workflow_step_id:
        :param int due_in_hours: -1 for jobs that are overdue
        :param str filename:
        :param str project_name:
        :param int page_number:
        :param int page_size:
        :return: PageDtoProjectReference
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "user_uid",
            "status",
            "target_lang",
            "workflow_step_id",
            "due_in_hours",
            "filename",
            "project_name",
            "page_number",
            "page_size",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_assigned_projects" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'user_uid' is set
        if "user_uid" not in params or params["user_uid"] is None:
            raise ValueError(
                "Missing the required parameter `user_uid` when calling `list_assigned_projects`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "user_uid" in params:
            path_params["userUid"] = params["user_uid"]  # noqa: E501

        query_params = []
        if "status" in params:
            query_params.append(("status", params["status"]))  # noqa: E501
            collection_formats["status"] = "multi"  # noqa: E501
        if "target_lang" in params:
            query_params.append(("targetLang", params["target_lang"]))  # noqa: E501
            collection_formats["targetLang"] = "multi"  # noqa: E501
        if "workflow_step_id" in params:
            query_params.append(
                ("workflowStepId", params["workflow_step_id"])
            )  # noqa: E501
        if "due_in_hours" in params:
            query_params.append(("dueInHours", params["due_in_hours"]))  # noqa: E501
        if "filename" in params:
            query_params.append(("filename", params["filename"]))  # noqa: E501
        if "project_name" in params:
            query_params.append(("projectName", params["project_name"]))  # noqa: E501
        if "page_number" in params:
            query_params.append(("pageNumber", params["page_number"]))  # noqa: E501
        if "page_size" in params:
            query_params.append(("pageSize", params["page_size"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/users/{userUid}/projects",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PageDtoProjectReference",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def list_jobs(self, user_uid, **kwargs) -> PageDtoAssignedJobDto:  # noqa: E501
        """List assigned jobs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_jobs(user_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_uid: (required)
        :param list[str] status:
        :param str project_uid:
        :param list[str] target_lang:
        :param int workflow_step_id:
        :param int due_in_hours: -1 for jobs that are overdue
        :param str filename:
        :param int page_number:
        :param int page_size:
        :return: PageDtoAssignedJobDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.list_jobs_with_http_info(user_uid, **kwargs)  # noqa: E501
        else:
            (data) = self.list_jobs_with_http_info(user_uid, **kwargs)  # noqa: E501
            return data

    def list_jobs_with_http_info(
        self, user_uid, **kwargs
    ) -> PageDtoAssignedJobDto:  # noqa: E501
        """List assigned jobs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_jobs_with_http_info(user_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_uid: (required)
        :param list[str] status:
        :param str project_uid:
        :param list[str] target_lang:
        :param int workflow_step_id:
        :param int due_in_hours: -1 for jobs that are overdue
        :param str filename:
        :param int page_number:
        :param int page_size:
        :return: PageDtoAssignedJobDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "user_uid",
            "status",
            "project_uid",
            "target_lang",
            "workflow_step_id",
            "due_in_hours",
            "filename",
            "page_number",
            "page_size",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_jobs" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'user_uid' is set
        if "user_uid" not in params or params["user_uid"] is None:
            raise ValueError(
                "Missing the required parameter `user_uid` when calling `list_jobs`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "user_uid" in params:
            path_params["userUid"] = params["user_uid"]  # noqa: E501

        query_params = []
        if "status" in params:
            query_params.append(("status", params["status"]))  # noqa: E501
            collection_formats["status"] = "multi"  # noqa: E501
        if "project_uid" in params:
            query_params.append(("projectUid", params["project_uid"]))  # noqa: E501
        if "target_lang" in params:
            query_params.append(("targetLang", params["target_lang"]))  # noqa: E501
            collection_formats["targetLang"] = "multi"  # noqa: E501
        if "workflow_step_id" in params:
            query_params.append(
                ("workflowStepId", params["workflow_step_id"])
            )  # noqa: E501
        if "due_in_hours" in params:
            query_params.append(("dueInHours", params["due_in_hours"]))  # noqa: E501
        if "filename" in params:
            query_params.append(("filename", params["filename"]))  # noqa: E501
        if "page_number" in params:
            query_params.append(("pageNumber", params["page_number"]))  # noqa: E501
        if "page_size" in params:
            query_params.append(("pageSize", params["page_size"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/users/{userUid}/jobs",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PageDtoAssignedJobDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def list_target_langs(self, user_uid, **kwargs) -> PageDtoString:  # noqa: E501
        """List assigned target languages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_target_langs(user_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_uid: (required)
        :param list[str] status:
        :param str project_uid:
        :param int workflow_step_id:
        :param int due_in_hours: -1 for jobs that are overdue
        :param str filename:
        :param int page_number:
        :param int page_size:
        :return: PageDtoString
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.list_target_langs_with_http_info(
                user_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.list_target_langs_with_http_info(
                user_uid, **kwargs
            )  # noqa: E501
            return data

    def list_target_langs_with_http_info(
        self, user_uid, **kwargs
    ) -> PageDtoString:  # noqa: E501
        """List assigned target languages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_target_langs_with_http_info(user_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_uid: (required)
        :param list[str] status:
        :param str project_uid:
        :param int workflow_step_id:
        :param int due_in_hours: -1 for jobs that are overdue
        :param str filename:
        :param int page_number:
        :param int page_size:
        :return: PageDtoString
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "user_uid",
            "status",
            "project_uid",
            "workflow_step_id",
            "due_in_hours",
            "filename",
            "page_number",
            "page_size",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_target_langs" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'user_uid' is set
        if "user_uid" not in params or params["user_uid"] is None:
            raise ValueError(
                "Missing the required parameter `user_uid` when calling `list_target_langs`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "user_uid" in params:
            path_params["userUid"] = params["user_uid"]  # noqa: E501

        query_params = []
        if "status" in params:
            query_params.append(("status", params["status"]))  # noqa: E501
            collection_formats["status"] = "multi"  # noqa: E501
        if "project_uid" in params:
            query_params.append(("projectUid", params["project_uid"]))  # noqa: E501
        if "workflow_step_id" in params:
            query_params.append(
                ("workflowStepId", params["workflow_step_id"])
            )  # noqa: E501
        if "due_in_hours" in params:
            query_params.append(("dueInHours", params["due_in_hours"]))  # noqa: E501
        if "filename" in params:
            query_params.append(("filename", params["filename"]))  # noqa: E501
        if "page_number" in params:
            query_params.append(("pageNumber", params["page_number"]))  # noqa: E501
        if "page_size" in params:
            query_params.append(("pageSize", params["page_size"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/users/{userUid}/targetLangs",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PageDtoString",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def list_workflow_steps(
        self, user_uid, **kwargs
    ) -> PageDtoWorkflowStepReference:  # noqa: E501
        """List assigned workflow steps  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_workflow_steps(user_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_uid: (required)
        :param list[str] status:
        :param str project_uid:
        :param list[str] target_lang:
        :param int due_in_hours: -1 for jobs that are overdue
        :param str filename:
        :param int page_number:
        :param int page_size:
        :return: PageDtoWorkflowStepReference
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.list_workflow_steps_with_http_info(
                user_uid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.list_workflow_steps_with_http_info(
                user_uid, **kwargs
            )  # noqa: E501
            return data

    def list_workflow_steps_with_http_info(
        self, user_uid, **kwargs
    ) -> PageDtoWorkflowStepReference:  # noqa: E501
        """List assigned workflow steps  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_workflow_steps_with_http_info(user_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_uid: (required)
        :param list[str] status:
        :param str project_uid:
        :param list[str] target_lang:
        :param int due_in_hours: -1 for jobs that are overdue
        :param str filename:
        :param int page_number:
        :param int page_size:
        :return: PageDtoWorkflowStepReference
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "user_uid",
            "status",
            "project_uid",
            "target_lang",
            "due_in_hours",
            "filename",
            "page_number",
            "page_size",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_workflow_steps" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'user_uid' is set
        if "user_uid" not in params or params["user_uid"] is None:
            raise ValueError(
                "Missing the required parameter `user_uid` when calling `list_workflow_steps`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "user_uid" in params:
            path_params["userUid"] = params["user_uid"]  # noqa: E501

        query_params = []
        if "status" in params:
            query_params.append(("status", params["status"]))  # noqa: E501
            collection_formats["status"] = "multi"  # noqa: E501
        if "project_uid" in params:
            query_params.append(("projectUid", params["project_uid"]))  # noqa: E501
        if "target_lang" in params:
            query_params.append(("targetLang", params["target_lang"]))  # noqa: E501
            collection_formats["targetLang"] = "multi"  # noqa: E501
        if "due_in_hours" in params:
            query_params.append(("dueInHours", params["due_in_hours"]))  # noqa: E501
        if "filename" in params:
            query_params.append(("filename", params["filename"]))  # noqa: E501
        if "page_number" in params:
            query_params.append(("pageNumber", params["page_number"]))  # noqa: E501
        if "page_size" in params:
            query_params.append(("pageSize", params["page_size"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/users/{userUid}/workflowSteps",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PageDtoWorkflowStepReference",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def login_activity(self, user_uid, **kwargs) -> UserStatisticsListDto:  # noqa: E501
        """Login statistics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login_activity(user_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_uid: (required)
        :return: UserStatisticsListDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.login_activity_with_http_info(user_uid, **kwargs)  # noqa: E501
        else:
            (data) = self.login_activity_with_http_info(
                user_uid, **kwargs
            )  # noqa: E501
            return data

    def login_activity_with_http_info(
        self, user_uid, **kwargs
    ) -> UserStatisticsListDto:  # noqa: E501
        """Login statistics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login_activity_with_http_info(user_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_uid: (required)
        :return: UserStatisticsListDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["user_uid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method login_activity" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'user_uid' is set
        if "user_uid" not in params or params["user_uid"] is None:
            raise ValueError(
                "Missing the required parameter `user_uid` when calling `login_activity`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "user_uid" in params:
            path_params["userUid"] = params["user_uid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/users/{userUid}/loginStatistics",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="UserStatisticsListDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def send_login_info(self, user_uid, **kwargs) -> None:  # noqa: E501
        """Send login information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_login_info(user_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_uid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.send_login_info_with_http_info(user_uid, **kwargs)  # noqa: E501
        else:
            (data) = self.send_login_info_with_http_info(
                user_uid, **kwargs
            )  # noqa: E501
            return data

    def send_login_info_with_http_info(self, user_uid, **kwargs) -> None:  # noqa: E501
        """Send login information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_login_info_with_http_info(user_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_uid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["user_uid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_login_info" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'user_uid' is set
        if "user_uid" not in params or params["user_uid"] is None:
            raise ValueError(
                "Missing the required parameter `user_uid` when calling `send_login_info`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "user_uid" in params:
            path_params["userUid"] = params["user_uid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/users/{userUid}/emailLoginInformation",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_password(self, user_uid, **kwargs) -> None:  # noqa: E501
        """Update password  # noqa: E501

         * Password length must be between 8 and 255 * Password must not be same as the username   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_password(user_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_uid: (required)
        :param UserPasswordEditDto body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_password_with_http_info(user_uid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_password_with_http_info(
                user_uid, **kwargs
            )  # noqa: E501
            return data

    def update_password_with_http_info(self, user_uid, **kwargs) -> None:  # noqa: E501
        """Update password  # noqa: E501

         * Password length must be between 8 and 255 * Password must not be same as the username   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_password_with_http_info(user_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_uid: (required)
        :param UserPasswordEditDto body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["user_uid", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_password" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'user_uid' is set
        if "user_uid" not in params or params["user_uid"] is None:
            raise ValueError(
                "Missing the required parameter `user_uid` when calling `update_password`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "user_uid" in params:
            path_params["userUid"] = params["user_uid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/users/{userUid}/updatePassword",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_user_v3(self, user_uid, **kwargs) -> UserDetailsDtoV3:  # noqa: E501
        """Edit user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_user_v3(user_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_uid: (required)
        :param AbstractUserEditDto body:
        :return: UserDetailsDtoV3
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_user_v3_with_http_info(user_uid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_user_v3_with_http_info(
                user_uid, **kwargs
            )  # noqa: E501
            return data

    def update_user_v3_with_http_info(
        self, user_uid, **kwargs
    ) -> UserDetailsDtoV3:  # noqa: E501
        """Edit user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_user_v3_with_http_info(user_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_uid: (required)
        :param AbstractUserEditDto body:
        :return: UserDetailsDtoV3
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["user_uid", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_user_v3" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'user_uid' is set
        if "user_uid" not in params or params["user_uid"] is None:
            raise ValueError(
                "Missing the required parameter `user_uid` when calling `update_user_v3`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "user_uid" in params:
            path_params["userUid"] = params["user_uid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v3/users/{userUid}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="UserDetailsDtoV3",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def user_last_logins(self, **kwargs) -> PageDtoLastLoginDto:  # noqa: E501
        """List last login dates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_last_logins(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_name:
        :param list[str] role:
        :param list[str] sort:
        :param list[str] order:
        :param int page_number: Page number, starting with 0, default 0
        :param int page_size: Page size, accepts values between 1 and 100, default 100
        :return: PageDtoLastLoginDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.user_last_logins_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_last_logins_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_last_logins_with_http_info(
        self, **kwargs
    ) -> PageDtoLastLoginDto:  # noqa: E501
        """List last login dates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_last_logins_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_name:
        :param list[str] role:
        :param list[str] sort:
        :param list[str] order:
        :param int page_number: Page number, starting with 0, default 0
        :param int page_size: Page size, accepts values between 1 and 100, default 100
        :return: PageDtoLastLoginDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "user_name",
            "role",
            "sort",
            "order",
            "page_number",
            "page_size",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_last_logins" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "user_name" in params:
            query_params.append(("userName", params["user_name"]))  # noqa: E501
        if "role" in params:
            query_params.append(("role", params["role"]))  # noqa: E501
            collection_formats["role"] = "multi"  # noqa: E501
        if "sort" in params:
            query_params.append(("sort", params["sort"]))  # noqa: E501
            collection_formats["sort"] = "multi"  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
            collection_formats["order"] = "multi"  # noqa: E501
        if "page_number" in params:
            query_params.append(("pageNumber", params["page_number"]))  # noqa: E501
        if "page_size" in params:
            query_params.append(("pageSize", params["page_size"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api2/v1/users/lastLogins",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PageDtoLastLoginDto",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
