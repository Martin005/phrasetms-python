# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class StyleWeightsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "style": "ToggleableWeightDto",
        "awkward": "ToggleableWeightDto",
        "company_style": "ToggleableWeightDto",
        "inconsistent_style": "ToggleableWeightDto",
        "third_party_style": "ToggleableWeightDto",
        "unidiomatic": "ToggleableWeightDto",
    }

    attribute_map = {
        "style": "style",
        "awkward": "awkward",
        "company_style": "companyStyle",
        "inconsistent_style": "inconsistentStyle",
        "third_party_style": "thirdPartyStyle",
        "unidiomatic": "unidiomatic",
    }

    def __init__(
        self,
        style=None,
        awkward=None,
        company_style=None,
        inconsistent_style=None,
        third_party_style=None,
        unidiomatic=None,
    ):  # noqa: E501
        """StyleWeightsDto - a model defined in Swagger"""  # noqa: E501
        self._style = None
        self._awkward = None
        self._company_style = None
        self._inconsistent_style = None
        self._third_party_style = None
        self._unidiomatic = None
        self.discriminator = None
        if style is not None:
            self.style = style
        if awkward is not None:
            self.awkward = awkward
        if company_style is not None:
            self.company_style = company_style
        if inconsistent_style is not None:
            self.inconsistent_style = inconsistent_style
        if third_party_style is not None:
            self.third_party_style = third_party_style
        if unidiomatic is not None:
            self.unidiomatic = unidiomatic

    @property
    def style(self) -> ToggleableWeightDto:
        """Gets the style of this StyleWeightsDto.  # noqa: E501


        :return: The style of this StyleWeightsDto.  # noqa: E501
        :rtype: ToggleableWeightDto
        """
        return self._style

    @style.setter
    def style(self, style):
        """Sets the style of this StyleWeightsDto.


        :param style: The style of this StyleWeightsDto.  # noqa: E501
        :type: ToggleableWeightDto
        """

        self._style = style

    @property
    def awkward(self) -> ToggleableWeightDto:
        """Gets the awkward of this StyleWeightsDto.  # noqa: E501


        :return: The awkward of this StyleWeightsDto.  # noqa: E501
        :rtype: ToggleableWeightDto
        """
        return self._awkward

    @awkward.setter
    def awkward(self, awkward):
        """Sets the awkward of this StyleWeightsDto.


        :param awkward: The awkward of this StyleWeightsDto.  # noqa: E501
        :type: ToggleableWeightDto
        """

        self._awkward = awkward

    @property
    def company_style(self) -> ToggleableWeightDto:
        """Gets the company_style of this StyleWeightsDto.  # noqa: E501


        :return: The company_style of this StyleWeightsDto.  # noqa: E501
        :rtype: ToggleableWeightDto
        """
        return self._company_style

    @company_style.setter
    def company_style(self, company_style):
        """Sets the company_style of this StyleWeightsDto.


        :param company_style: The company_style of this StyleWeightsDto.  # noqa: E501
        :type: ToggleableWeightDto
        """

        self._company_style = company_style

    @property
    def inconsistent_style(self) -> ToggleableWeightDto:
        """Gets the inconsistent_style of this StyleWeightsDto.  # noqa: E501


        :return: The inconsistent_style of this StyleWeightsDto.  # noqa: E501
        :rtype: ToggleableWeightDto
        """
        return self._inconsistent_style

    @inconsistent_style.setter
    def inconsistent_style(self, inconsistent_style):
        """Sets the inconsistent_style of this StyleWeightsDto.


        :param inconsistent_style: The inconsistent_style of this StyleWeightsDto.  # noqa: E501
        :type: ToggleableWeightDto
        """

        self._inconsistent_style = inconsistent_style

    @property
    def third_party_style(self) -> ToggleableWeightDto:
        """Gets the third_party_style of this StyleWeightsDto.  # noqa: E501


        :return: The third_party_style of this StyleWeightsDto.  # noqa: E501
        :rtype: ToggleableWeightDto
        """
        return self._third_party_style

    @third_party_style.setter
    def third_party_style(self, third_party_style):
        """Sets the third_party_style of this StyleWeightsDto.


        :param third_party_style: The third_party_style of this StyleWeightsDto.  # noqa: E501
        :type: ToggleableWeightDto
        """

        self._third_party_style = third_party_style

    @property
    def unidiomatic(self) -> ToggleableWeightDto:
        """Gets the unidiomatic of this StyleWeightsDto.  # noqa: E501


        :return: The unidiomatic of this StyleWeightsDto.  # noqa: E501
        :rtype: ToggleableWeightDto
        """
        return self._unidiomatic

    @unidiomatic.setter
    def unidiomatic(self, unidiomatic):
        """Sets the unidiomatic of this StyleWeightsDto.


        :param unidiomatic: The unidiomatic of this StyleWeightsDto.  # noqa: E501
        :type: ToggleableWeightDto
        """

        self._unidiomatic = unidiomatic

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(StyleWeightsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StyleWeightsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
