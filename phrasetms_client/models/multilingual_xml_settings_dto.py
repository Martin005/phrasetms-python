# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class MultilingualXmlSettingsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "translatable_elements_x_path": "str",
        "source_elements_x_path": "str",
        "target_elements_x_paths": "dict(str, str)",
        "inline_elements_non_translatable_x_path": "str",
        "tag_regexp": "str",
        "segmentation": "bool",
        "html_sub_filter": "bool",
        "context_key_x_path": "str",
        "context_note_x_path": "str",
        "max_len_x_path": "str",
        "preserve_whitespace": "bool",
        "preserve_char_entities": "str",
        "xsl_url": "str",
        "xsl_file": "str",
        "non_empty_segment_action": "str",
        "save_confirmed_segments_to_tm": "bool",
        "icu_sub_filter": "bool",
    }

    attribute_map = {
        "translatable_elements_x_path": "translatableElementsXPath",
        "source_elements_x_path": "sourceElementsXPath",
        "target_elements_x_paths": "targetElementsXPaths",
        "inline_elements_non_translatable_x_path": "inlineElementsNonTranslatableXPath",
        "tag_regexp": "tagRegexp",
        "segmentation": "segmentation",
        "html_sub_filter": "htmlSubFilter",
        "context_key_x_path": "contextKeyXPath",
        "context_note_x_path": "contextNoteXPath",
        "max_len_x_path": "maxLenXPath",
        "preserve_whitespace": "preserveWhitespace",
        "preserve_char_entities": "preserveCharEntities",
        "xsl_url": "xslUrl",
        "xsl_file": "xslFile",
        "non_empty_segment_action": "nonEmptySegmentAction",
        "save_confirmed_segments_to_tm": "saveConfirmedSegmentsToTm",
        "icu_sub_filter": "icuSubFilter",
    }

    def __init__(
        self,
        translatable_elements_x_path=None,
        source_elements_x_path=None,
        target_elements_x_paths=None,
        inline_elements_non_translatable_x_path=None,
        tag_regexp=None,
        segmentation=None,
        html_sub_filter=None,
        context_key_x_path=None,
        context_note_x_path=None,
        max_len_x_path=None,
        preserve_whitespace=None,
        preserve_char_entities=None,
        xsl_url=None,
        xsl_file=None,
        non_empty_segment_action=None,
        save_confirmed_segments_to_tm=None,
        icu_sub_filter=None,
    ):  # noqa: E501
        """MultilingualXmlSettingsDto - a model defined in Swagger"""  # noqa: E501
        self._translatable_elements_x_path = None
        self._source_elements_x_path = None
        self._target_elements_x_paths = None
        self._inline_elements_non_translatable_x_path = None
        self._tag_regexp = None
        self._segmentation = None
        self._html_sub_filter = None
        self._context_key_x_path = None
        self._context_note_x_path = None
        self._max_len_x_path = None
        self._preserve_whitespace = None
        self._preserve_char_entities = None
        self._xsl_url = None
        self._xsl_file = None
        self._non_empty_segment_action = None
        self._save_confirmed_segments_to_tm = None
        self._icu_sub_filter = None
        self.discriminator = None
        if translatable_elements_x_path is not None:
            self.translatable_elements_x_path = translatable_elements_x_path
        if source_elements_x_path is not None:
            self.source_elements_x_path = source_elements_x_path
        if target_elements_x_paths is not None:
            self.target_elements_x_paths = target_elements_x_paths
        if inline_elements_non_translatable_x_path is not None:
            self.inline_elements_non_translatable_x_path = (
                inline_elements_non_translatable_x_path
            )
        if tag_regexp is not None:
            self.tag_regexp = tag_regexp
        if segmentation is not None:
            self.segmentation = segmentation
        if html_sub_filter is not None:
            self.html_sub_filter = html_sub_filter
        if context_key_x_path is not None:
            self.context_key_x_path = context_key_x_path
        if context_note_x_path is not None:
            self.context_note_x_path = context_note_x_path
        if max_len_x_path is not None:
            self.max_len_x_path = max_len_x_path
        if preserve_whitespace is not None:
            self.preserve_whitespace = preserve_whitespace
        if preserve_char_entities is not None:
            self.preserve_char_entities = preserve_char_entities
        if xsl_url is not None:
            self.xsl_url = xsl_url
        if xsl_file is not None:
            self.xsl_file = xsl_file
        if non_empty_segment_action is not None:
            self.non_empty_segment_action = non_empty_segment_action
        if save_confirmed_segments_to_tm is not None:
            self.save_confirmed_segments_to_tm = save_confirmed_segments_to_tm
        if icu_sub_filter is not None:
            self.icu_sub_filter = icu_sub_filter

    @property
    def translatable_elements_x_path(self) -> str:
        """Gets the translatable_elements_x_path of this MultilingualXmlSettingsDto.  # noqa: E501


        :return: The translatable_elements_x_path of this MultilingualXmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._translatable_elements_x_path

    @translatable_elements_x_path.setter
    def translatable_elements_x_path(self, translatable_elements_x_path):
        """Sets the translatable_elements_x_path of this MultilingualXmlSettingsDto.


        :param translatable_elements_x_path: The translatable_elements_x_path of this MultilingualXmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._translatable_elements_x_path = translatable_elements_x_path

    @property
    def source_elements_x_path(self) -> str:
        """Gets the source_elements_x_path of this MultilingualXmlSettingsDto.  # noqa: E501


        :return: The source_elements_x_path of this MultilingualXmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._source_elements_x_path

    @source_elements_x_path.setter
    def source_elements_x_path(self, source_elements_x_path):
        """Sets the source_elements_x_path of this MultilingualXmlSettingsDto.


        :param source_elements_x_path: The source_elements_x_path of this MultilingualXmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._source_elements_x_path = source_elements_x_path

    @property
    def target_elements_x_paths(self) -> dict(str, str):
        """Gets the target_elements_x_paths of this MultilingualXmlSettingsDto.  # noqa: E501

        'Format: \"language\":\"xpath\";             example = '{\"en\": \"tuv[@lang='en']/seg\", \"sk\": \"tuv[@lang='sk']/seg\"}  # noqa: E501

        :return: The target_elements_x_paths of this MultilingualXmlSettingsDto.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._target_elements_x_paths

    @target_elements_x_paths.setter
    def target_elements_x_paths(self, target_elements_x_paths):
        """Sets the target_elements_x_paths of this MultilingualXmlSettingsDto.

        'Format: \"language\":\"xpath\";             example = '{\"en\": \"tuv[@lang='en']/seg\", \"sk\": \"tuv[@lang='sk']/seg\"}  # noqa: E501

        :param target_elements_x_paths: The target_elements_x_paths of this MultilingualXmlSettingsDto.  # noqa: E501
        :type: dict(str, str)
        """

        self._target_elements_x_paths = target_elements_x_paths

    @property
    def inline_elements_non_translatable_x_path(self) -> str:
        """Gets the inline_elements_non_translatable_x_path of this MultilingualXmlSettingsDto.  # noqa: E501


        :return: The inline_elements_non_translatable_x_path of this MultilingualXmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._inline_elements_non_translatable_x_path

    @inline_elements_non_translatable_x_path.setter
    def inline_elements_non_translatable_x_path(
        self, inline_elements_non_translatable_x_path
    ):
        """Sets the inline_elements_non_translatable_x_path of this MultilingualXmlSettingsDto.


        :param inline_elements_non_translatable_x_path: The inline_elements_non_translatable_x_path of this MultilingualXmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._inline_elements_non_translatable_x_path = (
            inline_elements_non_translatable_x_path
        )

    @property
    def tag_regexp(self) -> str:
        """Gets the tag_regexp of this MultilingualXmlSettingsDto.  # noqa: E501


        :return: The tag_regexp of this MultilingualXmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._tag_regexp

    @tag_regexp.setter
    def tag_regexp(self, tag_regexp):
        """Sets the tag_regexp of this MultilingualXmlSettingsDto.


        :param tag_regexp: The tag_regexp of this MultilingualXmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._tag_regexp = tag_regexp

    @property
    def segmentation(self) -> bool:
        """Gets the segmentation of this MultilingualXmlSettingsDto.  # noqa: E501

        Default: `true`  # noqa: E501

        :return: The segmentation of this MultilingualXmlSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._segmentation

    @segmentation.setter
    def segmentation(self, segmentation):
        """Sets the segmentation of this MultilingualXmlSettingsDto.

        Default: `true`  # noqa: E501

        :param segmentation: The segmentation of this MultilingualXmlSettingsDto.  # noqa: E501
        :type: bool
        """

        self._segmentation = segmentation

    @property
    def html_sub_filter(self) -> bool:
        """Gets the html_sub_filter of this MultilingualXmlSettingsDto.  # noqa: E501

        Default: `false`  # noqa: E501

        :return: The html_sub_filter of this MultilingualXmlSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._html_sub_filter

    @html_sub_filter.setter
    def html_sub_filter(self, html_sub_filter):
        """Sets the html_sub_filter of this MultilingualXmlSettingsDto.

        Default: `false`  # noqa: E501

        :param html_sub_filter: The html_sub_filter of this MultilingualXmlSettingsDto.  # noqa: E501
        :type: bool
        """

        self._html_sub_filter = html_sub_filter

    @property
    def context_key_x_path(self) -> str:
        """Gets the context_key_x_path of this MultilingualXmlSettingsDto.  # noqa: E501


        :return: The context_key_x_path of this MultilingualXmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._context_key_x_path

    @context_key_x_path.setter
    def context_key_x_path(self, context_key_x_path):
        """Sets the context_key_x_path of this MultilingualXmlSettingsDto.


        :param context_key_x_path: The context_key_x_path of this MultilingualXmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._context_key_x_path = context_key_x_path

    @property
    def context_note_x_path(self) -> str:
        """Gets the context_note_x_path of this MultilingualXmlSettingsDto.  # noqa: E501


        :return: The context_note_x_path of this MultilingualXmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._context_note_x_path

    @context_note_x_path.setter
    def context_note_x_path(self, context_note_x_path):
        """Sets the context_note_x_path of this MultilingualXmlSettingsDto.


        :param context_note_x_path: The context_note_x_path of this MultilingualXmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._context_note_x_path = context_note_x_path

    @property
    def max_len_x_path(self) -> str:
        """Gets the max_len_x_path of this MultilingualXmlSettingsDto.  # noqa: E501


        :return: The max_len_x_path of this MultilingualXmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._max_len_x_path

    @max_len_x_path.setter
    def max_len_x_path(self, max_len_x_path):
        """Sets the max_len_x_path of this MultilingualXmlSettingsDto.


        :param max_len_x_path: The max_len_x_path of this MultilingualXmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._max_len_x_path = max_len_x_path

    @property
    def preserve_whitespace(self) -> bool:
        """Gets the preserve_whitespace of this MultilingualXmlSettingsDto.  # noqa: E501

        Default: `false`  # noqa: E501

        :return: The preserve_whitespace of this MultilingualXmlSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._preserve_whitespace

    @preserve_whitespace.setter
    def preserve_whitespace(self, preserve_whitespace):
        """Sets the preserve_whitespace of this MultilingualXmlSettingsDto.

        Default: `false`  # noqa: E501

        :param preserve_whitespace: The preserve_whitespace of this MultilingualXmlSettingsDto.  # noqa: E501
        :type: bool
        """

        self._preserve_whitespace = preserve_whitespace

    @property
    def preserve_char_entities(self) -> str:
        """Gets the preserve_char_entities of this MultilingualXmlSettingsDto.  # noqa: E501


        :return: The preserve_char_entities of this MultilingualXmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._preserve_char_entities

    @preserve_char_entities.setter
    def preserve_char_entities(self, preserve_char_entities):
        """Sets the preserve_char_entities of this MultilingualXmlSettingsDto.


        :param preserve_char_entities: The preserve_char_entities of this MultilingualXmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._preserve_char_entities = preserve_char_entities

    @property
    def xsl_url(self) -> str:
        """Gets the xsl_url of this MultilingualXmlSettingsDto.  # noqa: E501


        :return: The xsl_url of this MultilingualXmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._xsl_url

    @xsl_url.setter
    def xsl_url(self, xsl_url):
        """Sets the xsl_url of this MultilingualXmlSettingsDto.


        :param xsl_url: The xsl_url of this MultilingualXmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._xsl_url = xsl_url

    @property
    def xsl_file(self) -> str:
        """Gets the xsl_file of this MultilingualXmlSettingsDto.  # noqa: E501

        UID of uploaded XSL file, overrides xslUrl  # noqa: E501

        :return: The xsl_file of this MultilingualXmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._xsl_file

    @xsl_file.setter
    def xsl_file(self, xsl_file):
        """Sets the xsl_file of this MultilingualXmlSettingsDto.

        UID of uploaded XSL file, overrides xslUrl  # noqa: E501

        :param xsl_file: The xsl_file of this MultilingualXmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._xsl_file = xsl_file

    @property
    def non_empty_segment_action(self) -> str:
        """Gets the non_empty_segment_action of this MultilingualXmlSettingsDto.  # noqa: E501


        :return: The non_empty_segment_action of this MultilingualXmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._non_empty_segment_action

    @non_empty_segment_action.setter
    def non_empty_segment_action(self, non_empty_segment_action):
        """Sets the non_empty_segment_action of this MultilingualXmlSettingsDto.


        :param non_empty_segment_action: The non_empty_segment_action of this MultilingualXmlSettingsDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "CONFIRM", "LOCK", "CONFIRM_LOCK"]  # noqa: E501
        if non_empty_segment_action not in allowed_values:
            raise ValueError(
                "Invalid value for `non_empty_segment_action` ({0}), must be one of {1}".format(  # noqa: E501
                    non_empty_segment_action, allowed_values
                )
            )

        self._non_empty_segment_action = non_empty_segment_action

    @property
    def save_confirmed_segments_to_tm(self) -> bool:
        """Gets the save_confirmed_segments_to_tm of this MultilingualXmlSettingsDto.  # noqa: E501


        :return: The save_confirmed_segments_to_tm of this MultilingualXmlSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._save_confirmed_segments_to_tm

    @save_confirmed_segments_to_tm.setter
    def save_confirmed_segments_to_tm(self, save_confirmed_segments_to_tm):
        """Sets the save_confirmed_segments_to_tm of this MultilingualXmlSettingsDto.


        :param save_confirmed_segments_to_tm: The save_confirmed_segments_to_tm of this MultilingualXmlSettingsDto.  # noqa: E501
        :type: bool
        """

        self._save_confirmed_segments_to_tm = save_confirmed_segments_to_tm

    @property
    def icu_sub_filter(self) -> bool:
        """Gets the icu_sub_filter of this MultilingualXmlSettingsDto.  # noqa: E501

        Default: `false`  # noqa: E501

        :return: The icu_sub_filter of this MultilingualXmlSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._icu_sub_filter

    @icu_sub_filter.setter
    def icu_sub_filter(self, icu_sub_filter):
        """Sets the icu_sub_filter of this MultilingualXmlSettingsDto.

        Default: `false`  # noqa: E501

        :param icu_sub_filter: The icu_sub_filter of this MultilingualXmlSettingsDto.  # noqa: E501
        :type: bool
        """

        self._icu_sub_filter = icu_sub_filter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(MultilingualXmlSettingsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MultilingualXmlSettingsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
