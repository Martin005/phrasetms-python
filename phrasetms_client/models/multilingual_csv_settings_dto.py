# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class MultilingualCsvSettingsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "source_columns": "str",
        "target_columns": "str",
        "context_note_columns": "str",
        "context_key_columns": "str",
        "tag_regexp": "str",
        "html_sub_filter": "bool",
        "segmentation": "bool",
        "delimiter": "str",
        "delimiter_type": "str",
        "import_rows": "str",
        "max_len_columns": "str",
        "all_target_columns": "dict(str, str)",
        "non_empty_segment_action": "str",
        "save_confirmed_segments_to_tm": "bool",
    }

    attribute_map = {
        "source_columns": "sourceColumns",
        "target_columns": "targetColumns",
        "context_note_columns": "contextNoteColumns",
        "context_key_columns": "contextKeyColumns",
        "tag_regexp": "tagRegexp",
        "html_sub_filter": "htmlSubFilter",
        "segmentation": "segmentation",
        "delimiter": "delimiter",
        "delimiter_type": "delimiterType",
        "import_rows": "importRows",
        "max_len_columns": "maxLenColumns",
        "all_target_columns": "allTargetColumns",
        "non_empty_segment_action": "nonEmptySegmentAction",
        "save_confirmed_segments_to_tm": "saveConfirmedSegmentsToTm",
    }

    def __init__(
        self,
        source_columns=None,
        target_columns=None,
        context_note_columns=None,
        context_key_columns=None,
        tag_regexp=None,
        html_sub_filter=None,
        segmentation=None,
        delimiter=None,
        delimiter_type=None,
        import_rows=None,
        max_len_columns=None,
        all_target_columns=None,
        non_empty_segment_action=None,
        save_confirmed_segments_to_tm=None,
    ):  # noqa: E501
        """MultilingualCsvSettingsDto - a model defined in Swagger"""  # noqa: E501
        self._source_columns = None
        self._target_columns = None
        self._context_note_columns = None
        self._context_key_columns = None
        self._tag_regexp = None
        self._html_sub_filter = None
        self._segmentation = None
        self._delimiter = None
        self._delimiter_type = None
        self._import_rows = None
        self._max_len_columns = None
        self._all_target_columns = None
        self._non_empty_segment_action = None
        self._save_confirmed_segments_to_tm = None
        self.discriminator = None
        if source_columns is not None:
            self.source_columns = source_columns
        if target_columns is not None:
            self.target_columns = target_columns
        if context_note_columns is not None:
            self.context_note_columns = context_note_columns
        if context_key_columns is not None:
            self.context_key_columns = context_key_columns
        if tag_regexp is not None:
            self.tag_regexp = tag_regexp
        if html_sub_filter is not None:
            self.html_sub_filter = html_sub_filter
        if segmentation is not None:
            self.segmentation = segmentation
        if delimiter is not None:
            self.delimiter = delimiter
        if delimiter_type is not None:
            self.delimiter_type = delimiter_type
        if import_rows is not None:
            self.import_rows = import_rows
        if max_len_columns is not None:
            self.max_len_columns = max_len_columns
        if all_target_columns is not None:
            self.all_target_columns = all_target_columns
        if non_empty_segment_action is not None:
            self.non_empty_segment_action = non_empty_segment_action
        if save_confirmed_segments_to_tm is not None:
            self.save_confirmed_segments_to_tm = save_confirmed_segments_to_tm

    @property
    def source_columns(self) -> str:
        """Gets the source_columns of this MultilingualCsvSettingsDto.  # noqa: E501


        :return: The source_columns of this MultilingualCsvSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._source_columns

    @source_columns.setter
    def source_columns(self, source_columns):
        """Sets the source_columns of this MultilingualCsvSettingsDto.


        :param source_columns: The source_columns of this MultilingualCsvSettingsDto.  # noqa: E501
        :type: str
        """

        self._source_columns = source_columns

    @property
    def target_columns(self) -> str:
        """Gets the target_columns of this MultilingualCsvSettingsDto.  # noqa: E501


        :return: The target_columns of this MultilingualCsvSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._target_columns

    @target_columns.setter
    def target_columns(self, target_columns):
        """Sets the target_columns of this MultilingualCsvSettingsDto.


        :param target_columns: The target_columns of this MultilingualCsvSettingsDto.  # noqa: E501
        :type: str
        """

        self._target_columns = target_columns

    @property
    def context_note_columns(self) -> str:
        """Gets the context_note_columns of this MultilingualCsvSettingsDto.  # noqa: E501


        :return: The context_note_columns of this MultilingualCsvSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._context_note_columns

    @context_note_columns.setter
    def context_note_columns(self, context_note_columns):
        """Sets the context_note_columns of this MultilingualCsvSettingsDto.


        :param context_note_columns: The context_note_columns of this MultilingualCsvSettingsDto.  # noqa: E501
        :type: str
        """

        self._context_note_columns = context_note_columns

    @property
    def context_key_columns(self) -> str:
        """Gets the context_key_columns of this MultilingualCsvSettingsDto.  # noqa: E501


        :return: The context_key_columns of this MultilingualCsvSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._context_key_columns

    @context_key_columns.setter
    def context_key_columns(self, context_key_columns):
        """Sets the context_key_columns of this MultilingualCsvSettingsDto.


        :param context_key_columns: The context_key_columns of this MultilingualCsvSettingsDto.  # noqa: E501
        :type: str
        """

        self._context_key_columns = context_key_columns

    @property
    def tag_regexp(self) -> str:
        """Gets the tag_regexp of this MultilingualCsvSettingsDto.  # noqa: E501


        :return: The tag_regexp of this MultilingualCsvSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._tag_regexp

    @tag_regexp.setter
    def tag_regexp(self, tag_regexp):
        """Sets the tag_regexp of this MultilingualCsvSettingsDto.


        :param tag_regexp: The tag_regexp of this MultilingualCsvSettingsDto.  # noqa: E501
        :type: str
        """

        self._tag_regexp = tag_regexp

    @property
    def html_sub_filter(self) -> bool:
        """Gets the html_sub_filter of this MultilingualCsvSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The html_sub_filter of this MultilingualCsvSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._html_sub_filter

    @html_sub_filter.setter
    def html_sub_filter(self, html_sub_filter):
        """Sets the html_sub_filter of this MultilingualCsvSettingsDto.

        Default: false  # noqa: E501

        :param html_sub_filter: The html_sub_filter of this MultilingualCsvSettingsDto.  # noqa: E501
        :type: bool
        """

        self._html_sub_filter = html_sub_filter

    @property
    def segmentation(self) -> bool:
        """Gets the segmentation of this MultilingualCsvSettingsDto.  # noqa: E501

        Default: true  # noqa: E501

        :return: The segmentation of this MultilingualCsvSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._segmentation

    @segmentation.setter
    def segmentation(self, segmentation):
        """Sets the segmentation of this MultilingualCsvSettingsDto.

        Default: true  # noqa: E501

        :param segmentation: The segmentation of this MultilingualCsvSettingsDto.  # noqa: E501
        :type: bool
        """

        self._segmentation = segmentation

    @property
    def delimiter(self) -> str:
        """Gets the delimiter of this MultilingualCsvSettingsDto.  # noqa: E501

        Default: ,  # noqa: E501

        :return: The delimiter of this MultilingualCsvSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._delimiter

    @delimiter.setter
    def delimiter(self, delimiter):
        """Sets the delimiter of this MultilingualCsvSettingsDto.

        Default: ,  # noqa: E501

        :param delimiter: The delimiter of this MultilingualCsvSettingsDto.  # noqa: E501
        :type: str
        """

        self._delimiter = delimiter

    @property
    def delimiter_type(self) -> str:
        """Gets the delimiter_type of this MultilingualCsvSettingsDto.  # noqa: E501

        Default: COMMA  # noqa: E501

        :return: The delimiter_type of this MultilingualCsvSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._delimiter_type

    @delimiter_type.setter
    def delimiter_type(self, delimiter_type):
        """Sets the delimiter_type of this MultilingualCsvSettingsDto.

        Default: COMMA  # noqa: E501

        :param delimiter_type: The delimiter_type of this MultilingualCsvSettingsDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["TAB", "COMMA", "SEMICOLON", "OTHER"]  # noqa: E501
        if delimiter_type not in allowed_values:
            raise ValueError(
                "Invalid value for `delimiter_type` ({0}), must be one of {1}".format(  # noqa: E501
                    delimiter_type, allowed_values
                )
            )

        self._delimiter_type = delimiter_type

    @property
    def import_rows(self) -> str:
        """Gets the import_rows of this MultilingualCsvSettingsDto.  # noqa: E501


        :return: The import_rows of this MultilingualCsvSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._import_rows

    @import_rows.setter
    def import_rows(self, import_rows):
        """Sets the import_rows of this MultilingualCsvSettingsDto.


        :param import_rows: The import_rows of this MultilingualCsvSettingsDto.  # noqa: E501
        :type: str
        """

        self._import_rows = import_rows

    @property
    def max_len_columns(self) -> str:
        """Gets the max_len_columns of this MultilingualCsvSettingsDto.  # noqa: E501


        :return: The max_len_columns of this MultilingualCsvSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._max_len_columns

    @max_len_columns.setter
    def max_len_columns(self, max_len_columns):
        """Sets the max_len_columns of this MultilingualCsvSettingsDto.


        :param max_len_columns: The max_len_columns of this MultilingualCsvSettingsDto.  # noqa: E501
        :type: str
        """

        self._max_len_columns = max_len_columns

    @property
    def all_target_columns(self) -> dict(str, str):
        """Gets the all_target_columns of this MultilingualCsvSettingsDto.  # noqa: E501

        Format: \"language\":\"column\"; example: {\"en\": \"A\", \"sk\": \"B\"}  # noqa: E501

        :return: The all_target_columns of this MultilingualCsvSettingsDto.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._all_target_columns

    @all_target_columns.setter
    def all_target_columns(self, all_target_columns):
        """Sets the all_target_columns of this MultilingualCsvSettingsDto.

        Format: \"language\":\"column\"; example: {\"en\": \"A\", \"sk\": \"B\"}  # noqa: E501

        :param all_target_columns: The all_target_columns of this MultilingualCsvSettingsDto.  # noqa: E501
        :type: dict(str, str)
        """

        self._all_target_columns = all_target_columns

    @property
    def non_empty_segment_action(self) -> str:
        """Gets the non_empty_segment_action of this MultilingualCsvSettingsDto.  # noqa: E501


        :return: The non_empty_segment_action of this MultilingualCsvSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._non_empty_segment_action

    @non_empty_segment_action.setter
    def non_empty_segment_action(self, non_empty_segment_action):
        """Sets the non_empty_segment_action of this MultilingualCsvSettingsDto.


        :param non_empty_segment_action: The non_empty_segment_action of this MultilingualCsvSettingsDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "CONFIRM", "LOCK", "CONFIRM_LOCK"]  # noqa: E501
        if non_empty_segment_action not in allowed_values:
            raise ValueError(
                "Invalid value for `non_empty_segment_action` ({0}), must be one of {1}".format(  # noqa: E501
                    non_empty_segment_action, allowed_values
                )
            )

        self._non_empty_segment_action = non_empty_segment_action

    @property
    def save_confirmed_segments_to_tm(self) -> bool:
        """Gets the save_confirmed_segments_to_tm of this MultilingualCsvSettingsDto.  # noqa: E501


        :return: The save_confirmed_segments_to_tm of this MultilingualCsvSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._save_confirmed_segments_to_tm

    @save_confirmed_segments_to_tm.setter
    def save_confirmed_segments_to_tm(self, save_confirmed_segments_to_tm):
        """Sets the save_confirmed_segments_to_tm of this MultilingualCsvSettingsDto.


        :param save_confirmed_segments_to_tm: The save_confirmed_segments_to_tm of this MultilingualCsvSettingsDto.  # noqa: E501
        :type: bool
        """

        self._save_confirmed_segments_to_tm = save_confirmed_segments_to_tm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(MultilingualCsvSettingsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MultilingualCsvSettingsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
