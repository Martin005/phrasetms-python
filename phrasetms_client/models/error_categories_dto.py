# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from phrasetms_client.models import (
    OtherWeightsDto,
    DesignWeightsDto,
    VerityWeightsDto,
    LocaleConventionWeightsDto,
    StyleWeightsDto,
    TerminologyWeightsDto,
    FluencyWeightsDto,
    AccuracyWeightsDto,
)


class ErrorCategoriesDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "accuracy": "AccuracyWeightsDto",
        "fluency": "FluencyWeightsDto",
        "terminology": "TerminologyWeightsDto",
        "style": "StyleWeightsDto",
        "locale_convention": "LocaleConventionWeightsDto",
        "verity": "VerityWeightsDto",
        "design": "DesignWeightsDto",
        "other": "OtherWeightsDto",
    }

    attribute_map = {
        "accuracy": "accuracy",
        "fluency": "fluency",
        "terminology": "terminology",
        "style": "style",
        "locale_convention": "localeConvention",
        "verity": "verity",
        "design": "design",
        "other": "other",
    }

    def __init__(
        self,
        accuracy=None,
        fluency=None,
        terminology=None,
        style=None,
        locale_convention=None,
        verity=None,
        design=None,
        other=None,
    ):  # noqa: E501
        """ErrorCategoriesDto - a model defined in Swagger"""  # noqa: E501
        self._accuracy = None
        self._fluency = None
        self._terminology = None
        self._style = None
        self._locale_convention = None
        self._verity = None
        self._design = None
        self._other = None
        self.discriminator = None
        if accuracy is not None:
            self.accuracy = accuracy
        if fluency is not None:
            self.fluency = fluency
        if terminology is not None:
            self.terminology = terminology
        if style is not None:
            self.style = style
        if locale_convention is not None:
            self.locale_convention = locale_convention
        if verity is not None:
            self.verity = verity
        if design is not None:
            self.design = design
        if other is not None:
            self.other = other

    @property
    def accuracy(self) -> AccuracyWeightsDto:
        """Gets the accuracy of this ErrorCategoriesDto.  # noqa: E501


        :return: The accuracy of this ErrorCategoriesDto.  # noqa: E501
        :rtype: AccuracyWeightsDto
        """
        return self._accuracy

    @accuracy.setter
    def accuracy(self, accuracy):
        """Sets the accuracy of this ErrorCategoriesDto.


        :param accuracy: The accuracy of this ErrorCategoriesDto.  # noqa: E501
        :type: AccuracyWeightsDto
        """

        self._accuracy = accuracy

    @property
    def fluency(self) -> FluencyWeightsDto:
        """Gets the fluency of this ErrorCategoriesDto.  # noqa: E501


        :return: The fluency of this ErrorCategoriesDto.  # noqa: E501
        :rtype: FluencyWeightsDto
        """
        return self._fluency

    @fluency.setter
    def fluency(self, fluency):
        """Sets the fluency of this ErrorCategoriesDto.


        :param fluency: The fluency of this ErrorCategoriesDto.  # noqa: E501
        :type: FluencyWeightsDto
        """

        self._fluency = fluency

    @property
    def terminology(self) -> TerminologyWeightsDto:
        """Gets the terminology of this ErrorCategoriesDto.  # noqa: E501


        :return: The terminology of this ErrorCategoriesDto.  # noqa: E501
        :rtype: TerminologyWeightsDto
        """
        return self._terminology

    @terminology.setter
    def terminology(self, terminology):
        """Sets the terminology of this ErrorCategoriesDto.


        :param terminology: The terminology of this ErrorCategoriesDto.  # noqa: E501
        :type: TerminologyWeightsDto
        """

        self._terminology = terminology

    @property
    def style(self) -> StyleWeightsDto:
        """Gets the style of this ErrorCategoriesDto.  # noqa: E501


        :return: The style of this ErrorCategoriesDto.  # noqa: E501
        :rtype: StyleWeightsDto
        """
        return self._style

    @style.setter
    def style(self, style):
        """Sets the style of this ErrorCategoriesDto.


        :param style: The style of this ErrorCategoriesDto.  # noqa: E501
        :type: StyleWeightsDto
        """

        self._style = style

    @property
    def locale_convention(self) -> LocaleConventionWeightsDto:
        """Gets the locale_convention of this ErrorCategoriesDto.  # noqa: E501


        :return: The locale_convention of this ErrorCategoriesDto.  # noqa: E501
        :rtype: LocaleConventionWeightsDto
        """
        return self._locale_convention

    @locale_convention.setter
    def locale_convention(self, locale_convention):
        """Sets the locale_convention of this ErrorCategoriesDto.


        :param locale_convention: The locale_convention of this ErrorCategoriesDto.  # noqa: E501
        :type: LocaleConventionWeightsDto
        """

        self._locale_convention = locale_convention

    @property
    def verity(self) -> VerityWeightsDto:
        """Gets the verity of this ErrorCategoriesDto.  # noqa: E501


        :return: The verity of this ErrorCategoriesDto.  # noqa: E501
        :rtype: VerityWeightsDto
        """
        return self._verity

    @verity.setter
    def verity(self, verity):
        """Sets the verity of this ErrorCategoriesDto.


        :param verity: The verity of this ErrorCategoriesDto.  # noqa: E501
        :type: VerityWeightsDto
        """

        self._verity = verity

    @property
    def design(self) -> DesignWeightsDto:
        """Gets the design of this ErrorCategoriesDto.  # noqa: E501


        :return: The design of this ErrorCategoriesDto.  # noqa: E501
        :rtype: DesignWeightsDto
        """
        return self._design

    @design.setter
    def design(self, design):
        """Sets the design of this ErrorCategoriesDto.


        :param design: The design of this ErrorCategoriesDto.  # noqa: E501
        :type: DesignWeightsDto
        """

        self._design = design

    @property
    def other(self) -> OtherWeightsDto:
        """Gets the other of this ErrorCategoriesDto.  # noqa: E501


        :return: The other of this ErrorCategoriesDto.  # noqa: E501
        :rtype: OtherWeightsDto
        """
        return self._other

    @other.setter
    def other(self, other):
        """Sets the other of this ErrorCategoriesDto.


        :param other: The other of this ErrorCategoriesDto.  # noqa: E501
        :type: OtherWeightsDto
        """

        self._other = other

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ErrorCategoriesDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErrorCategoriesDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
