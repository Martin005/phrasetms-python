# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from datetime import datetime

import six

from phrasetms_client.models import (
    ProjectReference,
    ImportStatusDto,
    AbstractAnalyseSettingsDto,
    AnalyseLanguagePartV3Dto,
    NetRateSchemeReference,
    UserReference,
    ProviderReference,
)


class AnalyseV3Dto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "uid": "str",
        "inner_id": "int",
        "type": "str",
        "name": "str",
        "provider": "ProviderReference",
        "created_by": "UserReference",
        "date_created": "datetime",
        "net_rate_scheme": "NetRateSchemeReference",
        "can_change_net_rate_scheme": "bool",
        "analyse_language_parts": "list[AnalyseLanguagePartV3Dto]",
        "settings": "AbstractAnalyseSettingsDto",
        "outdated": "bool",
        "import_status": "ImportStatusDto",
        "pure_warnings": "list[str]",
        "project": "ProjectReference",
    }

    attribute_map = {
        "id": "id",
        "uid": "uid",
        "inner_id": "innerId",
        "type": "type",
        "name": "name",
        "provider": "provider",
        "created_by": "createdBy",
        "date_created": "dateCreated",
        "net_rate_scheme": "netRateScheme",
        "can_change_net_rate_scheme": "canChangeNetRateScheme",
        "analyse_language_parts": "analyseLanguageParts",
        "settings": "settings",
        "outdated": "outdated",
        "import_status": "importStatus",
        "pure_warnings": "pureWarnings",
        "project": "project",
    }

    def __init__(
        self,
        id=None,
        uid=None,
        inner_id=None,
        type=None,
        name=None,
        provider=None,
        created_by=None,
        date_created=None,
        net_rate_scheme=None,
        can_change_net_rate_scheme=None,
        analyse_language_parts=None,
        settings=None,
        outdated=None,
        import_status=None,
        pure_warnings=None,
        project=None,
    ):  # noqa: E501
        """AnalyseV3Dto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._uid = None
        self._inner_id = None
        self._type = None
        self._name = None
        self._provider = None
        self._created_by = None
        self._date_created = None
        self._net_rate_scheme = None
        self._can_change_net_rate_scheme = None
        self._analyse_language_parts = None
        self._settings = None
        self._outdated = None
        self._import_status = None
        self._pure_warnings = None
        self._project = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if uid is not None:
            self.uid = uid
        if inner_id is not None:
            self.inner_id = inner_id
        if type is not None:
            self.type = type
        if name is not None:
            self.name = name
        if provider is not None:
            self.provider = provider
        if created_by is not None:
            self.created_by = created_by
        if date_created is not None:
            self.date_created = date_created
        if net_rate_scheme is not None:
            self.net_rate_scheme = net_rate_scheme
        if can_change_net_rate_scheme is not None:
            self.can_change_net_rate_scheme = can_change_net_rate_scheme
        if analyse_language_parts is not None:
            self.analyse_language_parts = analyse_language_parts
        if settings is not None:
            self.settings = settings
        if outdated is not None:
            self.outdated = outdated
        if import_status is not None:
            self.import_status = import_status
        if pure_warnings is not None:
            self.pure_warnings = pure_warnings
        if project is not None:
            self.project = project

    @property
    def id(self) -> str:
        """Gets the id of this AnalyseV3Dto.  # noqa: E501


        :return: The id of this AnalyseV3Dto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AnalyseV3Dto.


        :param id: The id of this AnalyseV3Dto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def uid(self) -> str:
        """Gets the uid of this AnalyseV3Dto.  # noqa: E501


        :return: The uid of this AnalyseV3Dto.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this AnalyseV3Dto.


        :param uid: The uid of this AnalyseV3Dto.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def inner_id(self) -> int:
        """Gets the inner_id of this AnalyseV3Dto.  # noqa: E501


        :return: The inner_id of this AnalyseV3Dto.  # noqa: E501
        :rtype: int
        """
        return self._inner_id

    @inner_id.setter
    def inner_id(self, inner_id):
        """Sets the inner_id of this AnalyseV3Dto.


        :param inner_id: The inner_id of this AnalyseV3Dto.  # noqa: E501
        :type: int
        """

        self._inner_id = inner_id

    @property
    def type(self) -> str:
        """Gets the type of this AnalyseV3Dto.  # noqa: E501


        :return: The type of this AnalyseV3Dto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AnalyseV3Dto.


        :param type: The type of this AnalyseV3Dto.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "PreAnalyse",
            "PostAnalyse",
            "PreAnalyseTarget",
            "Compare",
            "PreAnalyseProvider",
        ]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}".format(  # noqa: E501
                    type, allowed_values
                )
            )

        self._type = type

    @property
    def name(self) -> str:
        """Gets the name of this AnalyseV3Dto.  # noqa: E501


        :return: The name of this AnalyseV3Dto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AnalyseV3Dto.


        :param name: The name of this AnalyseV3Dto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def provider(self) -> ProviderReference:
        """Gets the provider of this AnalyseV3Dto.  # noqa: E501


        :return: The provider of this AnalyseV3Dto.  # noqa: E501
        :rtype: ProviderReference
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this AnalyseV3Dto.


        :param provider: The provider of this AnalyseV3Dto.  # noqa: E501
        :type: ProviderReference
        """

        self._provider = provider

    @property
    def created_by(self) -> UserReference:
        """Gets the created_by of this AnalyseV3Dto.  # noqa: E501


        :return: The created_by of this AnalyseV3Dto.  # noqa: E501
        :rtype: UserReference
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this AnalyseV3Dto.


        :param created_by: The created_by of this AnalyseV3Dto.  # noqa: E501
        :type: UserReference
        """

        self._created_by = created_by

    @property
    def date_created(self) -> datetime:
        """Gets the date_created of this AnalyseV3Dto.  # noqa: E501


        :return: The date_created of this AnalyseV3Dto.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this AnalyseV3Dto.


        :param date_created: The date_created of this AnalyseV3Dto.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def net_rate_scheme(self) -> NetRateSchemeReference:
        """Gets the net_rate_scheme of this AnalyseV3Dto.  # noqa: E501


        :return: The net_rate_scheme of this AnalyseV3Dto.  # noqa: E501
        :rtype: NetRateSchemeReference
        """
        return self._net_rate_scheme

    @net_rate_scheme.setter
    def net_rate_scheme(self, net_rate_scheme):
        """Sets the net_rate_scheme of this AnalyseV3Dto.


        :param net_rate_scheme: The net_rate_scheme of this AnalyseV3Dto.  # noqa: E501
        :type: NetRateSchemeReference
        """

        self._net_rate_scheme = net_rate_scheme

    @property
    def can_change_net_rate_scheme(self) -> bool:
        """Gets the can_change_net_rate_scheme of this AnalyseV3Dto.  # noqa: E501


        :return: The can_change_net_rate_scheme of this AnalyseV3Dto.  # noqa: E501
        :rtype: bool
        """
        return self._can_change_net_rate_scheme

    @can_change_net_rate_scheme.setter
    def can_change_net_rate_scheme(self, can_change_net_rate_scheme):
        """Sets the can_change_net_rate_scheme of this AnalyseV3Dto.


        :param can_change_net_rate_scheme: The can_change_net_rate_scheme of this AnalyseV3Dto.  # noqa: E501
        :type: bool
        """

        self._can_change_net_rate_scheme = can_change_net_rate_scheme

    @property
    def analyse_language_parts(self) -> list[AnalyseLanguagePartV3Dto]:
        """Gets the analyse_language_parts of this AnalyseV3Dto.  # noqa: E501


        :return: The analyse_language_parts of this AnalyseV3Dto.  # noqa: E501
        :rtype: list[AnalyseLanguagePartV3Dto]
        """
        return self._analyse_language_parts

    @analyse_language_parts.setter
    def analyse_language_parts(self, analyse_language_parts):
        """Sets the analyse_language_parts of this AnalyseV3Dto.


        :param analyse_language_parts: The analyse_language_parts of this AnalyseV3Dto.  # noqa: E501
        :type: list[AnalyseLanguagePartV3Dto]
        """

        self._analyse_language_parts = analyse_language_parts

    @property
    def settings(self) -> AbstractAnalyseSettingsDto:
        """Gets the settings of this AnalyseV3Dto.  # noqa: E501


        :return: The settings of this AnalyseV3Dto.  # noqa: E501
        :rtype: AbstractAnalyseSettingsDto
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this AnalyseV3Dto.


        :param settings: The settings of this AnalyseV3Dto.  # noqa: E501
        :type: AbstractAnalyseSettingsDto
        """

        self._settings = settings

    @property
    def outdated(self) -> bool:
        """Gets the outdated of this AnalyseV3Dto.  # noqa: E501


        :return: The outdated of this AnalyseV3Dto.  # noqa: E501
        :rtype: bool
        """
        return self._outdated

    @outdated.setter
    def outdated(self, outdated):
        """Sets the outdated of this AnalyseV3Dto.


        :param outdated: The outdated of this AnalyseV3Dto.  # noqa: E501
        :type: bool
        """

        self._outdated = outdated

    @property
    def import_status(self) -> ImportStatusDto:
        """Gets the import_status of this AnalyseV3Dto.  # noqa: E501


        :return: The import_status of this AnalyseV3Dto.  # noqa: E501
        :rtype: ImportStatusDto
        """
        return self._import_status

    @import_status.setter
    def import_status(self, import_status):
        """Sets the import_status of this AnalyseV3Dto.


        :param import_status: The import_status of this AnalyseV3Dto.  # noqa: E501
        :type: ImportStatusDto
        """

        self._import_status = import_status

    @property
    def pure_warnings(self) -> list[str]:
        """Gets the pure_warnings of this AnalyseV3Dto.  # noqa: E501


        :return: The pure_warnings of this AnalyseV3Dto.  # noqa: E501
        :rtype: list[str]
        """
        return self._pure_warnings

    @pure_warnings.setter
    def pure_warnings(self, pure_warnings):
        """Sets the pure_warnings of this AnalyseV3Dto.


        :param pure_warnings: The pure_warnings of this AnalyseV3Dto.  # noqa: E501
        :type: list[str]
        """

        self._pure_warnings = pure_warnings

    @property
    def project(self) -> ProjectReference:
        """Gets the project of this AnalyseV3Dto.  # noqa: E501


        :return: The project of this AnalyseV3Dto.  # noqa: E501
        :rtype: ProjectReference
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this AnalyseV3Dto.


        :param project: The project of this AnalyseV3Dto.  # noqa: E501
        :type: ProjectReference
        """

        self._project = project

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(AnalyseV3Dto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyseV3Dto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
