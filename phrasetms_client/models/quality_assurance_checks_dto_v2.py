# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from phrasetms_client.models import RegexpCheckRuleDtoV2, EnabledCheckDtoV2


class QualityAssuranceChecksDtoV2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "forbidden_strings": "list[str]",
        "enabled_checks": "list[EnabledCheckDtoV2]",
        "exclude_locked_segments": "bool",
        "user_can_set_instant_qa": "bool",
        "strict_job_status": "bool",
        "regexp_rules": "list[RegexpCheckRuleDtoV2]",
    }

    attribute_map = {
        "forbidden_strings": "forbiddenStrings",
        "enabled_checks": "enabledChecks",
        "exclude_locked_segments": "excludeLockedSegments",
        "user_can_set_instant_qa": "userCanSetInstantQA",
        "strict_job_status": "strictJobStatus",
        "regexp_rules": "regexpRules",
    }

    def __init__(
        self,
        forbidden_strings=None,
        enabled_checks=None,
        exclude_locked_segments=None,
        user_can_set_instant_qa=None,
        strict_job_status=None,
        regexp_rules=None,
    ):  # noqa: E501
        """QualityAssuranceChecksDtoV2 - a model defined in Swagger"""  # noqa: E501
        self._forbidden_strings = None
        self._enabled_checks = None
        self._exclude_locked_segments = None
        self._user_can_set_instant_qa = None
        self._strict_job_status = None
        self._regexp_rules = None
        self.discriminator = None
        if forbidden_strings is not None:
            self.forbidden_strings = forbidden_strings
        if enabled_checks is not None:
            self.enabled_checks = enabled_checks
        if exclude_locked_segments is not None:
            self.exclude_locked_segments = exclude_locked_segments
        if user_can_set_instant_qa is not None:
            self.user_can_set_instant_qa = user_can_set_instant_qa
        if strict_job_status is not None:
            self.strict_job_status = strict_job_status
        if regexp_rules is not None:
            self.regexp_rules = regexp_rules

    @property
    def forbidden_strings(self) -> list[str]:
        """Gets the forbidden_strings of this QualityAssuranceChecksDtoV2.  # noqa: E501


        :return: The forbidden_strings of this QualityAssuranceChecksDtoV2.  # noqa: E501
        :rtype: list[str]
        """
        return self._forbidden_strings

    @forbidden_strings.setter
    def forbidden_strings(self, forbidden_strings):
        """Sets the forbidden_strings of this QualityAssuranceChecksDtoV2.


        :param forbidden_strings: The forbidden_strings of this QualityAssuranceChecksDtoV2.  # noqa: E501
        :type: list[str]
        """

        self._forbidden_strings = forbidden_strings

    @property
    def enabled_checks(self) -> list[EnabledCheckDtoV2]:
        """Gets the enabled_checks of this QualityAssuranceChecksDtoV2.  # noqa: E501

        enabledChecks  # noqa: E501

        :return: The enabled_checks of this QualityAssuranceChecksDtoV2.  # noqa: E501
        :rtype: list[EnabledCheckDtoV2]
        """
        return self._enabled_checks

    @enabled_checks.setter
    def enabled_checks(self, enabled_checks):
        """Sets the enabled_checks of this QualityAssuranceChecksDtoV2.

        enabledChecks  # noqa: E501

        :param enabled_checks: The enabled_checks of this QualityAssuranceChecksDtoV2.  # noqa: E501
        :type: list[EnabledCheckDtoV2]
        """

        self._enabled_checks = enabled_checks

    @property
    def exclude_locked_segments(self) -> bool:
        """Gets the exclude_locked_segments of this QualityAssuranceChecksDtoV2.  # noqa: E501


        :return: The exclude_locked_segments of this QualityAssuranceChecksDtoV2.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_locked_segments

    @exclude_locked_segments.setter
    def exclude_locked_segments(self, exclude_locked_segments):
        """Sets the exclude_locked_segments of this QualityAssuranceChecksDtoV2.


        :param exclude_locked_segments: The exclude_locked_segments of this QualityAssuranceChecksDtoV2.  # noqa: E501
        :type: bool
        """

        self._exclude_locked_segments = exclude_locked_segments

    @property
    def user_can_set_instant_qa(self) -> bool:
        """Gets the user_can_set_instant_qa of this QualityAssuranceChecksDtoV2.  # noqa: E501


        :return: The user_can_set_instant_qa of this QualityAssuranceChecksDtoV2.  # noqa: E501
        :rtype: bool
        """
        return self._user_can_set_instant_qa

    @user_can_set_instant_qa.setter
    def user_can_set_instant_qa(self, user_can_set_instant_qa):
        """Sets the user_can_set_instant_qa of this QualityAssuranceChecksDtoV2.


        :param user_can_set_instant_qa: The user_can_set_instant_qa of this QualityAssuranceChecksDtoV2.  # noqa: E501
        :type: bool
        """

        self._user_can_set_instant_qa = user_can_set_instant_qa

    @property
    def strict_job_status(self) -> bool:
        """Gets the strict_job_status of this QualityAssuranceChecksDtoV2.  # noqa: E501


        :return: The strict_job_status of this QualityAssuranceChecksDtoV2.  # noqa: E501
        :rtype: bool
        """
        return self._strict_job_status

    @strict_job_status.setter
    def strict_job_status(self, strict_job_status):
        """Sets the strict_job_status of this QualityAssuranceChecksDtoV2.


        :param strict_job_status: The strict_job_status of this QualityAssuranceChecksDtoV2.  # noqa: E501
        :type: bool
        """

        self._strict_job_status = strict_job_status

    @property
    def regexp_rules(self) -> list[RegexpCheckRuleDtoV2]:
        """Gets the regexp_rules of this QualityAssuranceChecksDtoV2.  # noqa: E501


        :return: The regexp_rules of this QualityAssuranceChecksDtoV2.  # noqa: E501
        :rtype: list[RegexpCheckRuleDtoV2]
        """
        return self._regexp_rules

    @regexp_rules.setter
    def regexp_rules(self, regexp_rules):
        """Sets the regexp_rules of this QualityAssuranceChecksDtoV2.


        :param regexp_rules: The regexp_rules of this QualityAssuranceChecksDtoV2.  # noqa: E501
        :type: list[RegexpCheckRuleDtoV2]
        """

        self._regexp_rules = regexp_rules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(QualityAssuranceChecksDtoV2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QualityAssuranceChecksDtoV2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
