# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class WebhookCallDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "uid": "str",
        "parent_uid": "str",
        "event_uid": "str",
        "webhook_settings": "UidReference",
        "created_at": "datetime",
        "url": "str",
        "forced": "bool",
        "last_forced_at": "datetime",
        "body": "str",
        "trigger_event": "str",
        "retry_attempt": "int",
        "status_code": "int",
        "error_message": "str",
    }

    attribute_map = {
        "uid": "uid",
        "parent_uid": "parentUid",
        "event_uid": "eventUid",
        "webhook_settings": "webhookSettings",
        "created_at": "createdAt",
        "url": "url",
        "forced": "forced",
        "last_forced_at": "lastForcedAt",
        "body": "body",
        "trigger_event": "triggerEvent",
        "retry_attempt": "retryAttempt",
        "status_code": "statusCode",
        "error_message": "errorMessage",
    }

    def __init__(
        self,
        uid=None,
        parent_uid=None,
        event_uid=None,
        webhook_settings=None,
        created_at=None,
        url=None,
        forced=None,
        last_forced_at=None,
        body=None,
        trigger_event=None,
        retry_attempt=None,
        status_code=None,
        error_message=None,
    ):  # noqa: E501
        """WebhookCallDto - a model defined in Swagger"""  # noqa: E501
        self._uid = None
        self._parent_uid = None
        self._event_uid = None
        self._webhook_settings = None
        self._created_at = None
        self._url = None
        self._forced = None
        self._last_forced_at = None
        self._body = None
        self._trigger_event = None
        self._retry_attempt = None
        self._status_code = None
        self._error_message = None
        self.discriminator = None
        if uid is not None:
            self.uid = uid
        if parent_uid is not None:
            self.parent_uid = parent_uid
        if event_uid is not None:
            self.event_uid = event_uid
        if webhook_settings is not None:
            self.webhook_settings = webhook_settings
        if created_at is not None:
            self.created_at = created_at
        if url is not None:
            self.url = url
        if forced is not None:
            self.forced = forced
        if last_forced_at is not None:
            self.last_forced_at = last_forced_at
        if body is not None:
            self.body = body
        if trigger_event is not None:
            self.trigger_event = trigger_event
        if retry_attempt is not None:
            self.retry_attempt = retry_attempt
        if status_code is not None:
            self.status_code = status_code
        if error_message is not None:
            self.error_message = error_message

    @property
    def uid(self) -> str:
        """Gets the uid of this WebhookCallDto.  # noqa: E501


        :return: The uid of this WebhookCallDto.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this WebhookCallDto.


        :param uid: The uid of this WebhookCallDto.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def parent_uid(self) -> str:
        """Gets the parent_uid of this WebhookCallDto.  # noqa: E501


        :return: The parent_uid of this WebhookCallDto.  # noqa: E501
        :rtype: str
        """
        return self._parent_uid

    @parent_uid.setter
    def parent_uid(self, parent_uid):
        """Sets the parent_uid of this WebhookCallDto.


        :param parent_uid: The parent_uid of this WebhookCallDto.  # noqa: E501
        :type: str
        """

        self._parent_uid = parent_uid

    @property
    def event_uid(self) -> str:
        """Gets the event_uid of this WebhookCallDto.  # noqa: E501


        :return: The event_uid of this WebhookCallDto.  # noqa: E501
        :rtype: str
        """
        return self._event_uid

    @event_uid.setter
    def event_uid(self, event_uid):
        """Sets the event_uid of this WebhookCallDto.


        :param event_uid: The event_uid of this WebhookCallDto.  # noqa: E501
        :type: str
        """

        self._event_uid = event_uid

    @property
    def webhook_settings(self) -> UidReference:
        """Gets the webhook_settings of this WebhookCallDto.  # noqa: E501


        :return: The webhook_settings of this WebhookCallDto.  # noqa: E501
        :rtype: UidReference
        """
        return self._webhook_settings

    @webhook_settings.setter
    def webhook_settings(self, webhook_settings):
        """Sets the webhook_settings of this WebhookCallDto.


        :param webhook_settings: The webhook_settings of this WebhookCallDto.  # noqa: E501
        :type: UidReference
        """

        self._webhook_settings = webhook_settings

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this WebhookCallDto.  # noqa: E501


        :return: The created_at of this WebhookCallDto.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this WebhookCallDto.


        :param created_at: The created_at of this WebhookCallDto.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def url(self) -> str:
        """Gets the url of this WebhookCallDto.  # noqa: E501


        :return: The url of this WebhookCallDto.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WebhookCallDto.


        :param url: The url of this WebhookCallDto.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def forced(self) -> bool:
        """Gets the forced of this WebhookCallDto.  # noqa: E501


        :return: The forced of this WebhookCallDto.  # noqa: E501
        :rtype: bool
        """
        return self._forced

    @forced.setter
    def forced(self, forced):
        """Sets the forced of this WebhookCallDto.


        :param forced: The forced of this WebhookCallDto.  # noqa: E501
        :type: bool
        """

        self._forced = forced

    @property
    def last_forced_at(self) -> datetime:
        """Gets the last_forced_at of this WebhookCallDto.  # noqa: E501


        :return: The last_forced_at of this WebhookCallDto.  # noqa: E501
        :rtype: datetime
        """
        return self._last_forced_at

    @last_forced_at.setter
    def last_forced_at(self, last_forced_at):
        """Sets the last_forced_at of this WebhookCallDto.


        :param last_forced_at: The last_forced_at of this WebhookCallDto.  # noqa: E501
        :type: datetime
        """

        self._last_forced_at = last_forced_at

    @property
    def body(self) -> str:
        """Gets the body of this WebhookCallDto.  # noqa: E501


        :return: The body of this WebhookCallDto.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this WebhookCallDto.


        :param body: The body of this WebhookCallDto.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def trigger_event(self) -> str:
        """Gets the trigger_event of this WebhookCallDto.  # noqa: E501


        :return: The trigger_event of this WebhookCallDto.  # noqa: E501
        :rtype: str
        """
        return self._trigger_event

    @trigger_event.setter
    def trigger_event(self, trigger_event):
        """Sets the trigger_event of this WebhookCallDto.


        :param trigger_event: The trigger_event of this WebhookCallDto.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "JOB_STATUS_CHANGED",
            "JOB_CREATED",
            "JOB_DELETED",
            "JOB_ASSIGNED",
            "JOB_DUE_DATE_CHANGED",
            "JOB_UPDATED",
            "JOB_TARGET_UPDATED",
            "JOB_EXPORTED",
            "JOB_UNEXPORTED",
            "PROJECT_CREATED",
            "PROJECT_DELETED",
            "PROJECT_STATUS_CHANGED",
            "PROJECT_DUE_DATE_CHANGED",
            "SHARED_PROJECT_ASSIGNED",
            "PROJECT_METADATA_UPDATED",
            "PRE_TRANSLATION_FINISHED",
            "ANALYSIS_CREATED",
            "CONTINUOUS_JOB_UPDATED",
            "PROJECT_TEMPLATE_CREATED",
            "PROJECT_TEMPLATE_UPDATED",
            "PROJECT_TEMPLATE_DELETED",
        ]  # noqa: E501
        if trigger_event not in allowed_values:
            raise ValueError(
                "Invalid value for `trigger_event` ({0}), must be one of {1}".format(  # noqa: E501
                    trigger_event, allowed_values
                )
            )

        self._trigger_event = trigger_event

    @property
    def retry_attempt(self) -> int:
        """Gets the retry_attempt of this WebhookCallDto.  # noqa: E501


        :return: The retry_attempt of this WebhookCallDto.  # noqa: E501
        :rtype: int
        """
        return self._retry_attempt

    @retry_attempt.setter
    def retry_attempt(self, retry_attempt):
        """Sets the retry_attempt of this WebhookCallDto.


        :param retry_attempt: The retry_attempt of this WebhookCallDto.  # noqa: E501
        :type: int
        """

        self._retry_attempt = retry_attempt

    @property
    def status_code(self) -> int:
        """Gets the status_code of this WebhookCallDto.  # noqa: E501


        :return: The status_code of this WebhookCallDto.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this WebhookCallDto.


        :param status_code: The status_code of this WebhookCallDto.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    @property
    def error_message(self) -> str:
        """Gets the error_message of this WebhookCallDto.  # noqa: E501


        :return: The error_message of this WebhookCallDto.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this WebhookCallDto.


        :param error_message: The error_message of this WebhookCallDto.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(WebhookCallDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhookCallDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
