# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ProjectTemplateEditDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "name": "str",
        "template_name": "str",
        "source_lang": "str",
        "target_langs": "list[str]",
        "use_dynamic_title": "bool",
        "dynamic_title": "str",
        "notify_provider": "ProjectTemplateNotifyProviderDto",
        "work_flow_settings": "list[WorkflowStepSettingsEditDto]",
        "client": "IdReference",
        "cost_center": "IdReference",
        "business_unit": "IdReference",
        "domain": "IdReference",
        "sub_domain": "IdReference",
        "vendor": "IdReference",
        "import_settings": "UidReference",
        "note": "str",
        "file_handover": "bool",
        "assigned_to": "list[ProjectTemplateWorkflowSettingsAssignedToDto]",
    }

    attribute_map = {
        "name": "name",
        "template_name": "templateName",
        "source_lang": "sourceLang",
        "target_langs": "targetLangs",
        "use_dynamic_title": "useDynamicTitle",
        "dynamic_title": "dynamicTitle",
        "notify_provider": "notifyProvider",
        "work_flow_settings": "workFlowSettings",
        "client": "client",
        "cost_center": "costCenter",
        "business_unit": "businessUnit",
        "domain": "domain",
        "sub_domain": "subDomain",
        "vendor": "vendor",
        "import_settings": "importSettings",
        "note": "note",
        "file_handover": "fileHandover",
        "assigned_to": "assignedTo",
    }

    def __init__(
        self,
        name=None,
        template_name=None,
        source_lang=None,
        target_langs=None,
        use_dynamic_title=None,
        dynamic_title=None,
        notify_provider=None,
        work_flow_settings=None,
        client=None,
        cost_center=None,
        business_unit=None,
        domain=None,
        sub_domain=None,
        vendor=None,
        import_settings=None,
        note=None,
        file_handover=None,
        assigned_to=None,
    ):  # noqa: E501
        """ProjectTemplateEditDto - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._template_name = None
        self._source_lang = None
        self._target_langs = None
        self._use_dynamic_title = None
        self._dynamic_title = None
        self._notify_provider = None
        self._work_flow_settings = None
        self._client = None
        self._cost_center = None
        self._business_unit = None
        self._domain = None
        self._sub_domain = None
        self._vendor = None
        self._import_settings = None
        self._note = None
        self._file_handover = None
        self._assigned_to = None
        self.discriminator = None
        if name is not None:
            self.name = name
        self.template_name = template_name
        if source_lang is not None:
            self.source_lang = source_lang
        if target_langs is not None:
            self.target_langs = target_langs
        if use_dynamic_title is not None:
            self.use_dynamic_title = use_dynamic_title
        if dynamic_title is not None:
            self.dynamic_title = dynamic_title
        if notify_provider is not None:
            self.notify_provider = notify_provider
        if work_flow_settings is not None:
            self.work_flow_settings = work_flow_settings
        if client is not None:
            self.client = client
        if cost_center is not None:
            self.cost_center = cost_center
        if business_unit is not None:
            self.business_unit = business_unit
        if domain is not None:
            self.domain = domain
        if sub_domain is not None:
            self.sub_domain = sub_domain
        if vendor is not None:
            self.vendor = vendor
        if import_settings is not None:
            self.import_settings = import_settings
        if note is not None:
            self.note = note
        if file_handover is not None:
            self.file_handover = file_handover
        if assigned_to is not None:
            self.assigned_to = assigned_to

    @property
    def name(self) -> str:
        """Gets the name of this ProjectTemplateEditDto.  # noqa: E501


        :return: The name of this ProjectTemplateEditDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectTemplateEditDto.


        :param name: The name of this ProjectTemplateEditDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def template_name(self) -> str:
        """Gets the template_name of this ProjectTemplateEditDto.  # noqa: E501


        :return: The template_name of this ProjectTemplateEditDto.  # noqa: E501
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this ProjectTemplateEditDto.


        :param template_name: The template_name of this ProjectTemplateEditDto.  # noqa: E501
        :type: str
        """
        if template_name is None:
            raise ValueError(
                "Invalid value for `template_name`, must not be `None`"
            )  # noqa: E501

        self._template_name = template_name

    @property
    def source_lang(self) -> str:
        """Gets the source_lang of this ProjectTemplateEditDto.  # noqa: E501


        :return: The source_lang of this ProjectTemplateEditDto.  # noqa: E501
        :rtype: str
        """
        return self._source_lang

    @source_lang.setter
    def source_lang(self, source_lang):
        """Sets the source_lang of this ProjectTemplateEditDto.


        :param source_lang: The source_lang of this ProjectTemplateEditDto.  # noqa: E501
        :type: str
        """

        self._source_lang = source_lang

    @property
    def target_langs(self) -> list[str]:
        """Gets the target_langs of this ProjectTemplateEditDto.  # noqa: E501


        :return: The target_langs of this ProjectTemplateEditDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._target_langs

    @target_langs.setter
    def target_langs(self, target_langs):
        """Sets the target_langs of this ProjectTemplateEditDto.


        :param target_langs: The target_langs of this ProjectTemplateEditDto.  # noqa: E501
        :type: list[str]
        """

        self._target_langs = target_langs

    @property
    def use_dynamic_title(self) -> bool:
        """Gets the use_dynamic_title of this ProjectTemplateEditDto.  # noqa: E501


        :return: The use_dynamic_title of this ProjectTemplateEditDto.  # noqa: E501
        :rtype: bool
        """
        return self._use_dynamic_title

    @use_dynamic_title.setter
    def use_dynamic_title(self, use_dynamic_title):
        """Sets the use_dynamic_title of this ProjectTemplateEditDto.


        :param use_dynamic_title: The use_dynamic_title of this ProjectTemplateEditDto.  # noqa: E501
        :type: bool
        """

        self._use_dynamic_title = use_dynamic_title

    @property
    def dynamic_title(self) -> str:
        """Gets the dynamic_title of this ProjectTemplateEditDto.  # noqa: E501


        :return: The dynamic_title of this ProjectTemplateEditDto.  # noqa: E501
        :rtype: str
        """
        return self._dynamic_title

    @dynamic_title.setter
    def dynamic_title(self, dynamic_title):
        """Sets the dynamic_title of this ProjectTemplateEditDto.


        :param dynamic_title: The dynamic_title of this ProjectTemplateEditDto.  # noqa: E501
        :type: str
        """

        self._dynamic_title = dynamic_title

    @property
    def notify_provider(self) -> ProjectTemplateNotifyProviderDto:
        """Gets the notify_provider of this ProjectTemplateEditDto.  # noqa: E501


        :return: The notify_provider of this ProjectTemplateEditDto.  # noqa: E501
        :rtype: ProjectTemplateNotifyProviderDto
        """
        return self._notify_provider

    @notify_provider.setter
    def notify_provider(self, notify_provider):
        """Sets the notify_provider of this ProjectTemplateEditDto.


        :param notify_provider: The notify_provider of this ProjectTemplateEditDto.  # noqa: E501
        :type: ProjectTemplateNotifyProviderDto
        """

        self._notify_provider = notify_provider

    @property
    def work_flow_settings(self) -> list[WorkflowStepSettingsEditDto]:
        """Gets the work_flow_settings of this ProjectTemplateEditDto.  # noqa: E501


        :return: The work_flow_settings of this ProjectTemplateEditDto.  # noqa: E501
        :rtype: list[WorkflowStepSettingsEditDto]
        """
        return self._work_flow_settings

    @work_flow_settings.setter
    def work_flow_settings(self, work_flow_settings):
        """Sets the work_flow_settings of this ProjectTemplateEditDto.


        :param work_flow_settings: The work_flow_settings of this ProjectTemplateEditDto.  # noqa: E501
        :type: list[WorkflowStepSettingsEditDto]
        """

        self._work_flow_settings = work_flow_settings

    @property
    def client(self) -> IdReference:
        """Gets the client of this ProjectTemplateEditDto.  # noqa: E501


        :return: The client of this ProjectTemplateEditDto.  # noqa: E501
        :rtype: IdReference
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this ProjectTemplateEditDto.


        :param client: The client of this ProjectTemplateEditDto.  # noqa: E501
        :type: IdReference
        """

        self._client = client

    @property
    def cost_center(self) -> IdReference:
        """Gets the cost_center of this ProjectTemplateEditDto.  # noqa: E501


        :return: The cost_center of this ProjectTemplateEditDto.  # noqa: E501
        :rtype: IdReference
        """
        return self._cost_center

    @cost_center.setter
    def cost_center(self, cost_center):
        """Sets the cost_center of this ProjectTemplateEditDto.


        :param cost_center: The cost_center of this ProjectTemplateEditDto.  # noqa: E501
        :type: IdReference
        """

        self._cost_center = cost_center

    @property
    def business_unit(self) -> IdReference:
        """Gets the business_unit of this ProjectTemplateEditDto.  # noqa: E501


        :return: The business_unit of this ProjectTemplateEditDto.  # noqa: E501
        :rtype: IdReference
        """
        return self._business_unit

    @business_unit.setter
    def business_unit(self, business_unit):
        """Sets the business_unit of this ProjectTemplateEditDto.


        :param business_unit: The business_unit of this ProjectTemplateEditDto.  # noqa: E501
        :type: IdReference
        """

        self._business_unit = business_unit

    @property
    def domain(self) -> IdReference:
        """Gets the domain of this ProjectTemplateEditDto.  # noqa: E501


        :return: The domain of this ProjectTemplateEditDto.  # noqa: E501
        :rtype: IdReference
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ProjectTemplateEditDto.


        :param domain: The domain of this ProjectTemplateEditDto.  # noqa: E501
        :type: IdReference
        """

        self._domain = domain

    @property
    def sub_domain(self) -> IdReference:
        """Gets the sub_domain of this ProjectTemplateEditDto.  # noqa: E501


        :return: The sub_domain of this ProjectTemplateEditDto.  # noqa: E501
        :rtype: IdReference
        """
        return self._sub_domain

    @sub_domain.setter
    def sub_domain(self, sub_domain):
        """Sets the sub_domain of this ProjectTemplateEditDto.


        :param sub_domain: The sub_domain of this ProjectTemplateEditDto.  # noqa: E501
        :type: IdReference
        """

        self._sub_domain = sub_domain

    @property
    def vendor(self) -> IdReference:
        """Gets the vendor of this ProjectTemplateEditDto.  # noqa: E501


        :return: The vendor of this ProjectTemplateEditDto.  # noqa: E501
        :rtype: IdReference
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this ProjectTemplateEditDto.


        :param vendor: The vendor of this ProjectTemplateEditDto.  # noqa: E501
        :type: IdReference
        """

        self._vendor = vendor

    @property
    def import_settings(self) -> UidReference:
        """Gets the import_settings of this ProjectTemplateEditDto.  # noqa: E501


        :return: The import_settings of this ProjectTemplateEditDto.  # noqa: E501
        :rtype: UidReference
        """
        return self._import_settings

    @import_settings.setter
    def import_settings(self, import_settings):
        """Sets the import_settings of this ProjectTemplateEditDto.


        :param import_settings: The import_settings of this ProjectTemplateEditDto.  # noqa: E501
        :type: UidReference
        """

        self._import_settings = import_settings

    @property
    def note(self) -> str:
        """Gets the note of this ProjectTemplateEditDto.  # noqa: E501


        :return: The note of this ProjectTemplateEditDto.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this ProjectTemplateEditDto.


        :param note: The note of this ProjectTemplateEditDto.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def file_handover(self) -> bool:
        """Gets the file_handover of this ProjectTemplateEditDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The file_handover of this ProjectTemplateEditDto.  # noqa: E501
        :rtype: bool
        """
        return self._file_handover

    @file_handover.setter
    def file_handover(self, file_handover):
        """Sets the file_handover of this ProjectTemplateEditDto.

        Default: false  # noqa: E501

        :param file_handover: The file_handover of this ProjectTemplateEditDto.  # noqa: E501
        :type: bool
        """

        self._file_handover = file_handover

    @property
    def assigned_to(self) -> list[ProjectTemplateWorkflowSettingsAssignedToDto]:
        """Gets the assigned_to of this ProjectTemplateEditDto.  # noqa: E501

        only use for projects without workflows; otherwise specify in the workflowSettings object  # noqa: E501

        :return: The assigned_to of this ProjectTemplateEditDto.  # noqa: E501
        :rtype: list[ProjectTemplateWorkflowSettingsAssignedToDto]
        """
        return self._assigned_to

    @assigned_to.setter
    def assigned_to(self, assigned_to):
        """Sets the assigned_to of this ProjectTemplateEditDto.

        only use for projects without workflows; otherwise specify in the workflowSettings object  # noqa: E501

        :param assigned_to: The assigned_to of this ProjectTemplateEditDto.  # noqa: E501
        :type: list[ProjectTemplateWorkflowSettingsAssignedToDto]
        """

        self._assigned_to = assigned_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ProjectTemplateEditDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectTemplateEditDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
