# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WebHookDtoV2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'id': 'str',
        'uid': 'str',
        'url': 'str',
        'events': 'list[str]',
        'secret_token': 'str',
        'hidden': 'bool',
        'status': 'str',
        'failed_attempts': 'int',
        'created': 'datetime',
        'created_by': 'UserReference',
        'last_modified': 'datetime',
        'last_modified_by': 'UserReference'
    }

    attribute_map = {
        'name': 'name',
        'id': 'id',
        'uid': 'uid',
        'url': 'url',
        'events': 'events',
        'secret_token': 'secretToken',
        'hidden': 'hidden',
        'status': 'status',
        'failed_attempts': 'failedAttempts',
        'created': 'created',
        'created_by': 'createdBy',
        'last_modified': 'lastModified',
        'last_modified_by': 'lastModifiedBy'
    }

    def __init__(self, name=None, id=None, uid=None, url=None, events=None, secret_token=None, hidden=None, status=None, failed_attempts=None, created=None, created_by=None, last_modified=None, last_modified_by=None):  # noqa: E501
        """WebHookDtoV2 - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._id = None
        self._uid = None
        self._url = None
        self._events = None
        self._secret_token = None
        self._hidden = None
        self._status = None
        self._failed_attempts = None
        self._created = None
        self._created_by = None
        self._last_modified = None
        self._last_modified_by = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if id is not None:
            self.id = id
        if uid is not None:
            self.uid = uid
        self.url = url
        if events is not None:
            self.events = events
        if secret_token is not None:
            self.secret_token = secret_token
        if hidden is not None:
            self.hidden = hidden
        if status is not None:
            self.status = status
        if failed_attempts is not None:
            self.failed_attempts = failed_attempts
        if created is not None:
            self.created = created
        if created_by is not None:
            self.created_by = created_by
        if last_modified is not None:
            self.last_modified = last_modified
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by

    @property
    def name(self):
        """Gets the name of this WebHookDtoV2.  # noqa: E501


        :return: The name of this WebHookDtoV2.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WebHookDtoV2.


        :param name: The name of this WebHookDtoV2.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def id(self):
        """Gets the id of this WebHookDtoV2.  # noqa: E501


        :return: The id of this WebHookDtoV2.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WebHookDtoV2.


        :param id: The id of this WebHookDtoV2.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def uid(self):
        """Gets the uid of this WebHookDtoV2.  # noqa: E501


        :return: The uid of this WebHookDtoV2.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this WebHookDtoV2.


        :param uid: The uid of this WebHookDtoV2.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def url(self):
        """Gets the url of this WebHookDtoV2.  # noqa: E501


        :return: The url of this WebHookDtoV2.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WebHookDtoV2.


        :param url: The url of this WebHookDtoV2.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def events(self):
        """Gets the events of this WebHookDtoV2.  # noqa: E501


        :return: The events of this WebHookDtoV2.  # noqa: E501
        :rtype: list[str]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this WebHookDtoV2.


        :param events: The events of this WebHookDtoV2.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["JOB_STATUS_CHANGED", "JOB_CREATED", "JOB_DELETED", "JOB_ASSIGNED", "JOB_DUE_DATE_CHANGED", "JOB_UPDATED", "JOB_TARGET_UPDATED", "JOB_EXPORTED", "JOB_UNEXPORTED", "PROJECT_CREATED", "PROJECT_DELETED", "PROJECT_STATUS_CHANGED", "PROJECT_DUE_DATE_CHANGED", "SHARED_PROJECT_ASSIGNED", "PROJECT_METADATA_UPDATED", "PRE_TRANSLATION_FINISHED", "ANALYSIS_CREATED", "CONTINUOUS_JOB_UPDATED", "PROJECT_TEMPLATE_CREATED", "PROJECT_TEMPLATE_UPDATED", "PROJECT_TEMPLATE_DELETED"]  # noqa: E501
        if not set(events).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `events` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(events) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._events = events

    @property
    def secret_token(self):
        """Gets the secret_token of this WebHookDtoV2.  # noqa: E501


        :return: The secret_token of this WebHookDtoV2.  # noqa: E501
        :rtype: str
        """
        return self._secret_token

    @secret_token.setter
    def secret_token(self, secret_token):
        """Sets the secret_token of this WebHookDtoV2.


        :param secret_token: The secret_token of this WebHookDtoV2.  # noqa: E501
        :type: str
        """

        self._secret_token = secret_token

    @property
    def hidden(self):
        """Gets the hidden of this WebHookDtoV2.  # noqa: E501

        Default: false  # noqa: E501

        :return: The hidden of this WebHookDtoV2.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this WebHookDtoV2.

        Default: false  # noqa: E501

        :param hidden: The hidden of this WebHookDtoV2.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def status(self):
        """Gets the status of this WebHookDtoV2.  # noqa: E501


        :return: The status of this WebHookDtoV2.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WebHookDtoV2.


        :param status: The status of this WebHookDtoV2.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLED", "DISABLED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def failed_attempts(self):
        """Gets the failed_attempts of this WebHookDtoV2.  # noqa: E501


        :return: The failed_attempts of this WebHookDtoV2.  # noqa: E501
        :rtype: int
        """
        return self._failed_attempts

    @failed_attempts.setter
    def failed_attempts(self, failed_attempts):
        """Sets the failed_attempts of this WebHookDtoV2.


        :param failed_attempts: The failed_attempts of this WebHookDtoV2.  # noqa: E501
        :type: int
        """

        self._failed_attempts = failed_attempts

    @property
    def created(self):
        """Gets the created of this WebHookDtoV2.  # noqa: E501


        :return: The created of this WebHookDtoV2.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this WebHookDtoV2.


        :param created: The created of this WebHookDtoV2.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def created_by(self):
        """Gets the created_by of this WebHookDtoV2.  # noqa: E501


        :return: The created_by of this WebHookDtoV2.  # noqa: E501
        :rtype: UserReference
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this WebHookDtoV2.


        :param created_by: The created_by of this WebHookDtoV2.  # noqa: E501
        :type: UserReference
        """

        self._created_by = created_by

    @property
    def last_modified(self):
        """Gets the last_modified of this WebHookDtoV2.  # noqa: E501


        :return: The last_modified of this WebHookDtoV2.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this WebHookDtoV2.


        :param last_modified: The last_modified of this WebHookDtoV2.  # noqa: E501
        :type: datetime
        """

        self._last_modified = last_modified

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this WebHookDtoV2.  # noqa: E501


        :return: The last_modified_by of this WebHookDtoV2.  # noqa: E501
        :rtype: UserReference
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this WebHookDtoV2.


        :param last_modified_by: The last_modified_by of this WebHookDtoV2.  # noqa: E501
        :type: UserReference
        """

        self._last_modified_by = last_modified_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebHookDtoV2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebHookDtoV2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
