# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LoginToSessionV3Dto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_uid': 'str',
        'user_name': 'str',
        'password': 'str',
        'remember_me': 'bool',
        'two_factor_code': 'int',
        'captcha_code': 'str'
    }

    attribute_map = {
        'user_uid': 'userUid',
        'user_name': 'userName',
        'password': 'password',
        'remember_me': 'rememberMe',
        'two_factor_code': 'twoFactorCode',
        'captcha_code': 'captchaCode'
    }

    def __init__(self, user_uid=None, user_name=None, password=None, remember_me=None, two_factor_code=None, captcha_code=None):  # noqa: E501
        """LoginToSessionV3Dto - a model defined in Swagger"""  # noqa: E501
        self._user_uid = None
        self._user_name = None
        self._password = None
        self._remember_me = None
        self._two_factor_code = None
        self._captcha_code = None
        self.discriminator = None
        if user_uid is not None:
            self.user_uid = user_uid
        self.user_name = user_name
        self.password = password
        if remember_me is not None:
            self.remember_me = remember_me
        if two_factor_code is not None:
            self.two_factor_code = two_factor_code
        if captcha_code is not None:
            self.captcha_code = captcha_code

    @property
    def user_uid(self):
        """Gets the user_uid of this LoginToSessionV3Dto.  # noqa: E501

        When not filled, default user of identity will be logged in  # noqa: E501

        :return: The user_uid of this LoginToSessionV3Dto.  # noqa: E501
        :rtype: str
        """
        return self._user_uid

    @user_uid.setter
    def user_uid(self, user_uid):
        """Sets the user_uid of this LoginToSessionV3Dto.

        When not filled, default user of identity will be logged in  # noqa: E501

        :param user_uid: The user_uid of this LoginToSessionV3Dto.  # noqa: E501
        :type: str
        """

        self._user_uid = user_uid

    @property
    def user_name(self):
        """Gets the user_name of this LoginToSessionV3Dto.  # noqa: E501


        :return: The user_name of this LoginToSessionV3Dto.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this LoginToSessionV3Dto.


        :param user_name: The user_name of this LoginToSessionV3Dto.  # noqa: E501
        :type: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    @property
    def password(self):
        """Gets the password of this LoginToSessionV3Dto.  # noqa: E501


        :return: The password of this LoginToSessionV3Dto.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this LoginToSessionV3Dto.


        :param password: The password of this LoginToSessionV3Dto.  # noqa: E501
        :type: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def remember_me(self):
        """Gets the remember_me of this LoginToSessionV3Dto.  # noqa: E501


        :return: The remember_me of this LoginToSessionV3Dto.  # noqa: E501
        :rtype: bool
        """
        return self._remember_me

    @remember_me.setter
    def remember_me(self, remember_me):
        """Sets the remember_me of this LoginToSessionV3Dto.


        :param remember_me: The remember_me of this LoginToSessionV3Dto.  # noqa: E501
        :type: bool
        """

        self._remember_me = remember_me

    @property
    def two_factor_code(self):
        """Gets the two_factor_code of this LoginToSessionV3Dto.  # noqa: E501


        :return: The two_factor_code of this LoginToSessionV3Dto.  # noqa: E501
        :rtype: int
        """
        return self._two_factor_code

    @two_factor_code.setter
    def two_factor_code(self, two_factor_code):
        """Sets the two_factor_code of this LoginToSessionV3Dto.


        :param two_factor_code: The two_factor_code of this LoginToSessionV3Dto.  # noqa: E501
        :type: int
        """

        self._two_factor_code = two_factor_code

    @property
    def captcha_code(self):
        """Gets the captcha_code of this LoginToSessionV3Dto.  # noqa: E501


        :return: The captcha_code of this LoginToSessionV3Dto.  # noqa: E501
        :rtype: str
        """
        return self._captcha_code

    @captcha_code.setter
    def captcha_code(self, captcha_code):
        """Sets the captcha_code of this LoginToSessionV3Dto.


        :param captcha_code: The captcha_code of this LoginToSessionV3Dto.  # noqa: E501
        :type: str
        """

        self._captcha_code = captcha_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoginToSessionV3Dto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoginToSessionV3Dto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
