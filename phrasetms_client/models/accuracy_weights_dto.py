# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccuracyWeightsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accuracy': 'ToggleableWeightDto',
        'addition': 'ToggleableWeightDto',
        'omission': 'ToggleableWeightDto',
        'mistranslation': 'ToggleableWeightDto',
        'under_translation': 'ToggleableWeightDto',
        'untranslated': 'ToggleableWeightDto',
        'improper_tm_match': 'ToggleableWeightDto',
        'over_translation': 'ToggleableWeightDto'
    }

    attribute_map = {
        'accuracy': 'accuracy',
        'addition': 'addition',
        'omission': 'omission',
        'mistranslation': 'mistranslation',
        'under_translation': 'underTranslation',
        'untranslated': 'untranslated',
        'improper_tm_match': 'improperTmMatch',
        'over_translation': 'overTranslation'
    }

    def __init__(self, accuracy=None, addition=None, omission=None, mistranslation=None, under_translation=None, untranslated=None, improper_tm_match=None, over_translation=None):  # noqa: E501
        """AccuracyWeightsDto - a model defined in Swagger"""  # noqa: E501
        self._accuracy = None
        self._addition = None
        self._omission = None
        self._mistranslation = None
        self._under_translation = None
        self._untranslated = None
        self._improper_tm_match = None
        self._over_translation = None
        self.discriminator = None
        if accuracy is not None:
            self.accuracy = accuracy
        if addition is not None:
            self.addition = addition
        if omission is not None:
            self.omission = omission
        if mistranslation is not None:
            self.mistranslation = mistranslation
        if under_translation is not None:
            self.under_translation = under_translation
        if untranslated is not None:
            self.untranslated = untranslated
        if improper_tm_match is not None:
            self.improper_tm_match = improper_tm_match
        if over_translation is not None:
            self.over_translation = over_translation

    @property
    def accuracy(self):
        """Gets the accuracy of this AccuracyWeightsDto.  # noqa: E501


        :return: The accuracy of this AccuracyWeightsDto.  # noqa: E501
        :rtype: ToggleableWeightDto
        """
        return self._accuracy

    @accuracy.setter
    def accuracy(self, accuracy):
        """Sets the accuracy of this AccuracyWeightsDto.


        :param accuracy: The accuracy of this AccuracyWeightsDto.  # noqa: E501
        :type: ToggleableWeightDto
        """

        self._accuracy = accuracy

    @property
    def addition(self):
        """Gets the addition of this AccuracyWeightsDto.  # noqa: E501


        :return: The addition of this AccuracyWeightsDto.  # noqa: E501
        :rtype: ToggleableWeightDto
        """
        return self._addition

    @addition.setter
    def addition(self, addition):
        """Sets the addition of this AccuracyWeightsDto.


        :param addition: The addition of this AccuracyWeightsDto.  # noqa: E501
        :type: ToggleableWeightDto
        """

        self._addition = addition

    @property
    def omission(self):
        """Gets the omission of this AccuracyWeightsDto.  # noqa: E501


        :return: The omission of this AccuracyWeightsDto.  # noqa: E501
        :rtype: ToggleableWeightDto
        """
        return self._omission

    @omission.setter
    def omission(self, omission):
        """Sets the omission of this AccuracyWeightsDto.


        :param omission: The omission of this AccuracyWeightsDto.  # noqa: E501
        :type: ToggleableWeightDto
        """

        self._omission = omission

    @property
    def mistranslation(self):
        """Gets the mistranslation of this AccuracyWeightsDto.  # noqa: E501


        :return: The mistranslation of this AccuracyWeightsDto.  # noqa: E501
        :rtype: ToggleableWeightDto
        """
        return self._mistranslation

    @mistranslation.setter
    def mistranslation(self, mistranslation):
        """Sets the mistranslation of this AccuracyWeightsDto.


        :param mistranslation: The mistranslation of this AccuracyWeightsDto.  # noqa: E501
        :type: ToggleableWeightDto
        """

        self._mistranslation = mistranslation

    @property
    def under_translation(self):
        """Gets the under_translation of this AccuracyWeightsDto.  # noqa: E501


        :return: The under_translation of this AccuracyWeightsDto.  # noqa: E501
        :rtype: ToggleableWeightDto
        """
        return self._under_translation

    @under_translation.setter
    def under_translation(self, under_translation):
        """Sets the under_translation of this AccuracyWeightsDto.


        :param under_translation: The under_translation of this AccuracyWeightsDto.  # noqa: E501
        :type: ToggleableWeightDto
        """

        self._under_translation = under_translation

    @property
    def untranslated(self):
        """Gets the untranslated of this AccuracyWeightsDto.  # noqa: E501


        :return: The untranslated of this AccuracyWeightsDto.  # noqa: E501
        :rtype: ToggleableWeightDto
        """
        return self._untranslated

    @untranslated.setter
    def untranslated(self, untranslated):
        """Sets the untranslated of this AccuracyWeightsDto.


        :param untranslated: The untranslated of this AccuracyWeightsDto.  # noqa: E501
        :type: ToggleableWeightDto
        """

        self._untranslated = untranslated

    @property
    def improper_tm_match(self):
        """Gets the improper_tm_match of this AccuracyWeightsDto.  # noqa: E501


        :return: The improper_tm_match of this AccuracyWeightsDto.  # noqa: E501
        :rtype: ToggleableWeightDto
        """
        return self._improper_tm_match

    @improper_tm_match.setter
    def improper_tm_match(self, improper_tm_match):
        """Sets the improper_tm_match of this AccuracyWeightsDto.


        :param improper_tm_match: The improper_tm_match of this AccuracyWeightsDto.  # noqa: E501
        :type: ToggleableWeightDto
        """

        self._improper_tm_match = improper_tm_match

    @property
    def over_translation(self):
        """Gets the over_translation of this AccuracyWeightsDto.  # noqa: E501


        :return: The over_translation of this AccuracyWeightsDto.  # noqa: E501
        :rtype: ToggleableWeightDto
        """
        return self._over_translation

    @over_translation.setter
    def over_translation(self, over_translation):
        """Sets the over_translation of this AccuracyWeightsDto.


        :param over_translation: The over_translation of this AccuracyWeightsDto.  # noqa: E501
        :type: ToggleableWeightDto
        """

        self._over_translation = over_translation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccuracyWeightsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccuracyWeightsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
