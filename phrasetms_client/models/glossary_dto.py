# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GlossaryDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'uid': 'str',
        'internal_id': 'int',
        'name': 'str',
        'langs': 'list[str]',
        'created_by': 'UserReference',
        'owner': 'UserReference',
        'date_created': 'datetime',
        'profile_count': 'int',
        'active': 'bool',
        'profiles': 'list[MemsourceTranslateProfileSimpleDto]'
    }

    attribute_map = {
        'id': 'id',
        'uid': 'uid',
        'internal_id': 'internalId',
        'name': 'name',
        'langs': 'langs',
        'created_by': 'createdBy',
        'owner': 'owner',
        'date_created': 'dateCreated',
        'profile_count': 'profileCount',
        'active': 'active',
        'profiles': 'profiles'
    }

    def __init__(self, id=None, uid=None, internal_id=None, name=None, langs=None, created_by=None, owner=None, date_created=None, profile_count=None, active=None, profiles=None):  # noqa: E501
        """GlossaryDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._uid = None
        self._internal_id = None
        self._name = None
        self._langs = None
        self._created_by = None
        self._owner = None
        self._date_created = None
        self._profile_count = None
        self._active = None
        self._profiles = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if uid is not None:
            self.uid = uid
        if internal_id is not None:
            self.internal_id = internal_id
        self.name = name
        if langs is not None:
            self.langs = langs
        if created_by is not None:
            self.created_by = created_by
        if owner is not None:
            self.owner = owner
        if date_created is not None:
            self.date_created = date_created
        if profile_count is not None:
            self.profile_count = profile_count
        if active is not None:
            self.active = active
        if profiles is not None:
            self.profiles = profiles

    @property
    def id(self):
        """Gets the id of this GlossaryDto.  # noqa: E501


        :return: The id of this GlossaryDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GlossaryDto.


        :param id: The id of this GlossaryDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def uid(self):
        """Gets the uid of this GlossaryDto.  # noqa: E501


        :return: The uid of this GlossaryDto.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this GlossaryDto.


        :param uid: The uid of this GlossaryDto.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def internal_id(self):
        """Gets the internal_id of this GlossaryDto.  # noqa: E501


        :return: The internal_id of this GlossaryDto.  # noqa: E501
        :rtype: int
        """
        return self._internal_id

    @internal_id.setter
    def internal_id(self, internal_id):
        """Sets the internal_id of this GlossaryDto.


        :param internal_id: The internal_id of this GlossaryDto.  # noqa: E501
        :type: int
        """

        self._internal_id = internal_id

    @property
    def name(self):
        """Gets the name of this GlossaryDto.  # noqa: E501


        :return: The name of this GlossaryDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GlossaryDto.


        :param name: The name of this GlossaryDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def langs(self):
        """Gets the langs of this GlossaryDto.  # noqa: E501


        :return: The langs of this GlossaryDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._langs

    @langs.setter
    def langs(self, langs):
        """Sets the langs of this GlossaryDto.


        :param langs: The langs of this GlossaryDto.  # noqa: E501
        :type: list[str]
        """

        self._langs = langs

    @property
    def created_by(self):
        """Gets the created_by of this GlossaryDto.  # noqa: E501


        :return: The created_by of this GlossaryDto.  # noqa: E501
        :rtype: UserReference
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this GlossaryDto.


        :param created_by: The created_by of this GlossaryDto.  # noqa: E501
        :type: UserReference
        """

        self._created_by = created_by

    @property
    def owner(self):
        """Gets the owner of this GlossaryDto.  # noqa: E501


        :return: The owner of this GlossaryDto.  # noqa: E501
        :rtype: UserReference
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this GlossaryDto.


        :param owner: The owner of this GlossaryDto.  # noqa: E501
        :type: UserReference
        """

        self._owner = owner

    @property
    def date_created(self):
        """Gets the date_created of this GlossaryDto.  # noqa: E501


        :return: The date_created of this GlossaryDto.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this GlossaryDto.


        :param date_created: The date_created of this GlossaryDto.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def profile_count(self):
        """Gets the profile_count of this GlossaryDto.  # noqa: E501


        :return: The profile_count of this GlossaryDto.  # noqa: E501
        :rtype: int
        """
        return self._profile_count

    @profile_count.setter
    def profile_count(self, profile_count):
        """Sets the profile_count of this GlossaryDto.


        :param profile_count: The profile_count of this GlossaryDto.  # noqa: E501
        :type: int
        """

        self._profile_count = profile_count

    @property
    def active(self):
        """Gets the active of this GlossaryDto.  # noqa: E501


        :return: The active of this GlossaryDto.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this GlossaryDto.


        :param active: The active of this GlossaryDto.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def profiles(self):
        """Gets the profiles of this GlossaryDto.  # noqa: E501


        :return: The profiles of this GlossaryDto.  # noqa: E501
        :rtype: list[MemsourceTranslateProfileSimpleDto]
        """
        return self._profiles

    @profiles.setter
    def profiles(self, profiles):
        """Sets the profiles of this GlossaryDto.


        :param profiles: The profiles of this GlossaryDto.  # noqa: E501
        :type: list[MemsourceTranslateProfileSimpleDto]
        """

        self._profiles = profiles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GlossaryDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GlossaryDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
