# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AsciidocSettingsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "tag_regexp": "str",
        "html_in_passthrough": "bool",
        "nontranslatable_monospace_custom_styles_regexp": "str",
        "extract_custom_document_attribute_name_regexp": "str",
        "extract_btn_menu_labels": "bool",
    }

    attribute_map = {
        "tag_regexp": "tagRegexp",
        "html_in_passthrough": "htmlInPassthrough",
        "nontranslatable_monospace_custom_styles_regexp": "nontranslatableMonospaceCustomStylesRegexp",
        "extract_custom_document_attribute_name_regexp": "extractCustomDocumentAttributeNameRegexp",
        "extract_btn_menu_labels": "extractBtnMenuLabels",
    }

    def __init__(
        self,
        tag_regexp=None,
        html_in_passthrough=None,
        nontranslatable_monospace_custom_styles_regexp=None,
        extract_custom_document_attribute_name_regexp=None,
        extract_btn_menu_labels=None,
    ):  # noqa: E501
        """AsciidocSettingsDto - a model defined in Swagger"""  # noqa: E501
        self._tag_regexp = None
        self._html_in_passthrough = None
        self._nontranslatable_monospace_custom_styles_regexp = None
        self._extract_custom_document_attribute_name_regexp = None
        self._extract_btn_menu_labels = None
        self.discriminator = None
        if tag_regexp is not None:
            self.tag_regexp = tag_regexp
        if html_in_passthrough is not None:
            self.html_in_passthrough = html_in_passthrough
        if nontranslatable_monospace_custom_styles_regexp is not None:
            self.nontranslatable_monospace_custom_styles_regexp = (
                nontranslatable_monospace_custom_styles_regexp
            )
        if extract_custom_document_attribute_name_regexp is not None:
            self.extract_custom_document_attribute_name_regexp = (
                extract_custom_document_attribute_name_regexp
            )
        if extract_btn_menu_labels is not None:
            self.extract_btn_menu_labels = extract_btn_menu_labels

    @property
    def tag_regexp(self) -> str:
        """Gets the tag_regexp of this AsciidocSettingsDto.  # noqa: E501


        :return: The tag_regexp of this AsciidocSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._tag_regexp

    @tag_regexp.setter
    def tag_regexp(self, tag_regexp):
        """Sets the tag_regexp of this AsciidocSettingsDto.


        :param tag_regexp: The tag_regexp of this AsciidocSettingsDto.  # noqa: E501
        :type: str
        """

        self._tag_regexp = tag_regexp

    @property
    def html_in_passthrough(self) -> bool:
        """Gets the html_in_passthrough of this AsciidocSettingsDto.  # noqa: E501

        Default: `false`  # noqa: E501

        :return: The html_in_passthrough of this AsciidocSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._html_in_passthrough

    @html_in_passthrough.setter
    def html_in_passthrough(self, html_in_passthrough):
        """Sets the html_in_passthrough of this AsciidocSettingsDto.

        Default: `false`  # noqa: E501

        :param html_in_passthrough: The html_in_passthrough of this AsciidocSettingsDto.  # noqa: E501
        :type: bool
        """

        self._html_in_passthrough = html_in_passthrough

    @property
    def nontranslatable_monospace_custom_styles_regexp(self) -> str:
        """Gets the nontranslatable_monospace_custom_styles_regexp of this AsciidocSettingsDto.  # noqa: E501


        :return: The nontranslatable_monospace_custom_styles_regexp of this AsciidocSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._nontranslatable_monospace_custom_styles_regexp

    @nontranslatable_monospace_custom_styles_regexp.setter
    def nontranslatable_monospace_custom_styles_regexp(
        self, nontranslatable_monospace_custom_styles_regexp
    ):
        """Sets the nontranslatable_monospace_custom_styles_regexp of this AsciidocSettingsDto.


        :param nontranslatable_monospace_custom_styles_regexp: The nontranslatable_monospace_custom_styles_regexp of this AsciidocSettingsDto.  # noqa: E501
        :type: str
        """

        self._nontranslatable_monospace_custom_styles_regexp = (
            nontranslatable_monospace_custom_styles_regexp
        )

    @property
    def extract_custom_document_attribute_name_regexp(self) -> str:
        """Gets the extract_custom_document_attribute_name_regexp of this AsciidocSettingsDto.  # noqa: E501

        Default: `.*`  # noqa: E501

        :return: The extract_custom_document_attribute_name_regexp of this AsciidocSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._extract_custom_document_attribute_name_regexp

    @extract_custom_document_attribute_name_regexp.setter
    def extract_custom_document_attribute_name_regexp(
        self, extract_custom_document_attribute_name_regexp
    ):
        """Sets the extract_custom_document_attribute_name_regexp of this AsciidocSettingsDto.

        Default: `.*`  # noqa: E501

        :param extract_custom_document_attribute_name_regexp: The extract_custom_document_attribute_name_regexp of this AsciidocSettingsDto.  # noqa: E501
        :type: str
        """

        self._extract_custom_document_attribute_name_regexp = (
            extract_custom_document_attribute_name_regexp
        )

    @property
    def extract_btn_menu_labels(self) -> bool:
        """Gets the extract_btn_menu_labels of this AsciidocSettingsDto.  # noqa: E501

        Default: `false`  # noqa: E501

        :return: The extract_btn_menu_labels of this AsciidocSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._extract_btn_menu_labels

    @extract_btn_menu_labels.setter
    def extract_btn_menu_labels(self, extract_btn_menu_labels):
        """Sets the extract_btn_menu_labels of this AsciidocSettingsDto.

        Default: `false`  # noqa: E501

        :param extract_btn_menu_labels: The extract_btn_menu_labels of this AsciidocSettingsDto.  # noqa: E501
        :type: bool
        """

        self._extract_btn_menu_labels = extract_btn_menu_labels

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(AsciidocSettingsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AsciidocSettingsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
