# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictStr, confloat, conint

class SearchTMByJobRequestDtoV3(BaseModel):
    """
    SearchTMByJobRequestDtoV3
    """
    query: StrictStr = Field(...)
    reverse: Optional[StrictBool] = Field(None, description="Default: false")
    score_threshold: Optional[Union[confloat(le=1.01, ge=0, strict=True), conint(le=1, ge=0, strict=True)]] = Field(None, alias="scoreThreshold", description="Default: 0.0")
    max_results: Optional[conint(strict=True, le=100, ge=1)] = Field(None, alias="maxResults", description="Default: 15")
    __properties = ["query", "reverse", "scoreThreshold", "maxResults"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SearchTMByJobRequestDtoV3:
        """Create an instance of SearchTMByJobRequestDtoV3 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SearchTMByJobRequestDtoV3:
        """Create an instance of SearchTMByJobRequestDtoV3 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SearchTMByJobRequestDtoV3.parse_obj(obj)

        _obj = SearchTMByJobRequestDtoV3.parse_obj({
            "query": obj.get("query"),
            "reverse": obj.get("reverse"),
            "score_threshold": obj.get("scoreThreshold"),
            "max_results": obj.get("maxResults")
        })
        return _obj

