# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SearchTMByJobRequestDtoV3(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "query": "str",
        "reverse": "bool",
        "score_threshold": "float",
        "max_results": "int",
    }

    attribute_map = {
        "query": "query",
        "reverse": "reverse",
        "score_threshold": "scoreThreshold",
        "max_results": "maxResults",
    }

    def __init__(
        self, query=None, reverse=None, score_threshold=None, max_results=None
    ):  # noqa: E501
        """SearchTMByJobRequestDtoV3 - a model defined in Swagger"""  # noqa: E501
        self._query = None
        self._reverse = None
        self._score_threshold = None
        self._max_results = None
        self.discriminator = None
        self.query = query
        if reverse is not None:
            self.reverse = reverse
        if score_threshold is not None:
            self.score_threshold = score_threshold
        if max_results is not None:
            self.max_results = max_results

    @property
    def query(self) -> str:
        """Gets the query of this SearchTMByJobRequestDtoV3.  # noqa: E501


        :return: The query of this SearchTMByJobRequestDtoV3.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this SearchTMByJobRequestDtoV3.


        :param query: The query of this SearchTMByJobRequestDtoV3.  # noqa: E501
        :type: str
        """
        if query is None:
            raise ValueError(
                "Invalid value for `query`, must not be `None`"
            )  # noqa: E501

        self._query = query

    @property
    def reverse(self) -> bool:
        """Gets the reverse of this SearchTMByJobRequestDtoV3.  # noqa: E501

        Default: false  # noqa: E501

        :return: The reverse of this SearchTMByJobRequestDtoV3.  # noqa: E501
        :rtype: bool
        """
        return self._reverse

    @reverse.setter
    def reverse(self, reverse):
        """Sets the reverse of this SearchTMByJobRequestDtoV3.

        Default: false  # noqa: E501

        :param reverse: The reverse of this SearchTMByJobRequestDtoV3.  # noqa: E501
        :type: bool
        """

        self._reverse = reverse

    @property
    def score_threshold(self) -> float:
        """Gets the score_threshold of this SearchTMByJobRequestDtoV3.  # noqa: E501

        Default: 0.0  # noqa: E501

        :return: The score_threshold of this SearchTMByJobRequestDtoV3.  # noqa: E501
        :rtype: float
        """
        return self._score_threshold

    @score_threshold.setter
    def score_threshold(self, score_threshold):
        """Sets the score_threshold of this SearchTMByJobRequestDtoV3.

        Default: 0.0  # noqa: E501

        :param score_threshold: The score_threshold of this SearchTMByJobRequestDtoV3.  # noqa: E501
        :type: float
        """

        self._score_threshold = score_threshold

    @property
    def max_results(self) -> int:
        """Gets the max_results of this SearchTMByJobRequestDtoV3.  # noqa: E501

        Default: 15  # noqa: E501

        :return: The max_results of this SearchTMByJobRequestDtoV3.  # noqa: E501
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this SearchTMByJobRequestDtoV3.

        Default: 15  # noqa: E501

        :param max_results: The max_results of this SearchTMByJobRequestDtoV3.  # noqa: E501
        :type: int
        """

        self._max_results = max_results

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(SearchTMByJobRequestDtoV3, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchTMByJobRequestDtoV3):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
