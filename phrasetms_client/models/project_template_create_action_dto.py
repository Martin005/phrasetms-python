# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from phrasetms_client.models import UidReference


class ProjectTemplateCreateActionDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "project": "UidReference",
        "name": "str",
        "import_settings": "UidReference",
        "use_dynamic_title": "bool",
        "dynamic_title": "str",
    }

    attribute_map = {
        "project": "project",
        "name": "name",
        "import_settings": "importSettings",
        "use_dynamic_title": "useDynamicTitle",
        "dynamic_title": "dynamicTitle",
    }

    def __init__(
        self,
        project=None,
        name=None,
        import_settings=None,
        use_dynamic_title=None,
        dynamic_title=None,
    ):  # noqa: E501
        """ProjectTemplateCreateActionDto - a model defined in Swagger"""  # noqa: E501
        self._project = None
        self._name = None
        self._import_settings = None
        self._use_dynamic_title = None
        self._dynamic_title = None
        self.discriminator = None
        self.project = project
        self.name = name
        if import_settings is not None:
            self.import_settings = import_settings
        if use_dynamic_title is not None:
            self.use_dynamic_title = use_dynamic_title
        if dynamic_title is not None:
            self.dynamic_title = dynamic_title

    @property
    def project(self) -> UidReference:
        """Gets the project of this ProjectTemplateCreateActionDto.  # noqa: E501


        :return: The project of this ProjectTemplateCreateActionDto.  # noqa: E501
        :rtype: UidReference
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ProjectTemplateCreateActionDto.


        :param project: The project of this ProjectTemplateCreateActionDto.  # noqa: E501
        :type: UidReference
        """
        if project is None:
            raise ValueError(
                "Invalid value for `project`, must not be `None`"
            )  # noqa: E501

        self._project = project

    @property
    def name(self) -> str:
        """Gets the name of this ProjectTemplateCreateActionDto.  # noqa: E501


        :return: The name of this ProjectTemplateCreateActionDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectTemplateCreateActionDto.


        :param name: The name of this ProjectTemplateCreateActionDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError(
                "Invalid value for `name`, must not be `None`"
            )  # noqa: E501

        self._name = name

    @property
    def import_settings(self) -> UidReference:
        """Gets the import_settings of this ProjectTemplateCreateActionDto.  # noqa: E501


        :return: The import_settings of this ProjectTemplateCreateActionDto.  # noqa: E501
        :rtype: UidReference
        """
        return self._import_settings

    @import_settings.setter
    def import_settings(self, import_settings):
        """Sets the import_settings of this ProjectTemplateCreateActionDto.


        :param import_settings: The import_settings of this ProjectTemplateCreateActionDto.  # noqa: E501
        :type: UidReference
        """

        self._import_settings = import_settings

    @property
    def use_dynamic_title(self) -> bool:
        """Gets the use_dynamic_title of this ProjectTemplateCreateActionDto.  # noqa: E501


        :return: The use_dynamic_title of this ProjectTemplateCreateActionDto.  # noqa: E501
        :rtype: bool
        """
        return self._use_dynamic_title

    @use_dynamic_title.setter
    def use_dynamic_title(self, use_dynamic_title):
        """Sets the use_dynamic_title of this ProjectTemplateCreateActionDto.


        :param use_dynamic_title: The use_dynamic_title of this ProjectTemplateCreateActionDto.  # noqa: E501
        :type: bool
        """

        self._use_dynamic_title = use_dynamic_title

    @property
    def dynamic_title(self) -> str:
        """Gets the dynamic_title of this ProjectTemplateCreateActionDto.  # noqa: E501


        :return: The dynamic_title of this ProjectTemplateCreateActionDto.  # noqa: E501
        :rtype: str
        """
        return self._dynamic_title

    @dynamic_title.setter
    def dynamic_title(self, dynamic_title):
        """Sets the dynamic_title of this ProjectTemplateCreateActionDto.


        :param dynamic_title: The dynamic_title of this ProjectTemplateCreateActionDto.  # noqa: E501
        :type: str
        """

        self._dynamic_title = dynamic_title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ProjectTemplateCreateActionDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectTemplateCreateActionDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
