# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SearchTbInTextByJobRequestDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'text': 'str',
        'reverse': 'bool',
        'zero_length_separator': 'str'
    }

    attribute_map = {
        'text': 'text',
        'reverse': 'reverse',
        'zero_length_separator': 'zeroLengthSeparator'
    }

    def __init__(self, text=None, reverse=None, zero_length_separator=None):  # noqa: E501
        """SearchTbInTextByJobRequestDto - a model defined in Swagger"""  # noqa: E501
        self._text = None
        self._reverse = None
        self._zero_length_separator = None
        self.discriminator = None
        self.text = text
        if reverse is not None:
            self.reverse = reverse
        if zero_length_separator is not None:
            self.zero_length_separator = zero_length_separator

    @property
    def text(self):
        """Gets the text of this SearchTbInTextByJobRequestDto.  # noqa: E501


        :return: The text of this SearchTbInTextByJobRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this SearchTbInTextByJobRequestDto.


        :param text: The text of this SearchTbInTextByJobRequestDto.  # noqa: E501
        :type: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def reverse(self):
        """Gets the reverse of this SearchTbInTextByJobRequestDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The reverse of this SearchTbInTextByJobRequestDto.  # noqa: E501
        :rtype: bool
        """
        return self._reverse

    @reverse.setter
    def reverse(self, reverse):
        """Sets the reverse of this SearchTbInTextByJobRequestDto.

        Default: false  # noqa: E501

        :param reverse: The reverse of this SearchTbInTextByJobRequestDto.  # noqa: E501
        :type: bool
        """

        self._reverse = reverse

    @property
    def zero_length_separator(self):
        """Gets the zero_length_separator of this SearchTbInTextByJobRequestDto.  # noqa: E501


        :return: The zero_length_separator of this SearchTbInTextByJobRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._zero_length_separator

    @zero_length_separator.setter
    def zero_length_separator(self, zero_length_separator):
        """Sets the zero_length_separator of this SearchTbInTextByJobRequestDto.


        :param zero_length_separator: The zero_length_separator of this SearchTbInTextByJobRequestDto.  # noqa: E501
        :type: str
        """

        self._zero_length_separator = zero_length_separator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchTbInTextByJobRequestDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchTbInTextByJobRequestDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
