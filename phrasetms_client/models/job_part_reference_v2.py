# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobPartReferenceV2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uid': 'str',
        'inner_id': 'str',
        'status': 'str',
        'providers': 'list[ProviderReference]',
        'target_lang': 'str',
        'workflow_step': 'ProjectWorkflowStepReference',
        'filename': 'str',
        'original_file_directory': 'str',
        'date_due': 'datetime',
        'date_created': 'datetime',
        'import_status': 'ImportStatusDtoV2',
        'continuous': 'bool',
        'source_file_uid': 'str',
        'split': 'bool',
        'server_task_id': 'str',
        'owner': 'UserReference',
        'imported': 'bool'
    }

    attribute_map = {
        'uid': 'uid',
        'inner_id': 'innerId',
        'status': 'status',
        'providers': 'providers',
        'target_lang': 'targetLang',
        'workflow_step': 'workflowStep',
        'filename': 'filename',
        'original_file_directory': 'originalFileDirectory',
        'date_due': 'dateDue',
        'date_created': 'dateCreated',
        'import_status': 'importStatus',
        'continuous': 'continuous',
        'source_file_uid': 'sourceFileUid',
        'split': 'split',
        'server_task_id': 'serverTaskId',
        'owner': 'owner',
        'imported': 'imported'
    }

    def __init__(self, uid=None, inner_id=None, status=None, providers=None, target_lang=None, workflow_step=None, filename=None, original_file_directory=None, date_due=None, date_created=None, import_status=None, continuous=None, source_file_uid=None, split=None, server_task_id=None, owner=None, imported=None):  # noqa: E501
        """JobPartReferenceV2 - a model defined in Swagger"""  # noqa: E501
        self._uid = None
        self._inner_id = None
        self._status = None
        self._providers = None
        self._target_lang = None
        self._workflow_step = None
        self._filename = None
        self._original_file_directory = None
        self._date_due = None
        self._date_created = None
        self._import_status = None
        self._continuous = None
        self._source_file_uid = None
        self._split = None
        self._server_task_id = None
        self._owner = None
        self._imported = None
        self.discriminator = None
        if uid is not None:
            self.uid = uid
        if inner_id is not None:
            self.inner_id = inner_id
        if status is not None:
            self.status = status
        if providers is not None:
            self.providers = providers
        if target_lang is not None:
            self.target_lang = target_lang
        if workflow_step is not None:
            self.workflow_step = workflow_step
        if filename is not None:
            self.filename = filename
        if original_file_directory is not None:
            self.original_file_directory = original_file_directory
        if date_due is not None:
            self.date_due = date_due
        if date_created is not None:
            self.date_created = date_created
        if import_status is not None:
            self.import_status = import_status
        if continuous is not None:
            self.continuous = continuous
        if source_file_uid is not None:
            self.source_file_uid = source_file_uid
        if split is not None:
            self.split = split
        if server_task_id is not None:
            self.server_task_id = server_task_id
        if owner is not None:
            self.owner = owner
        if imported is not None:
            self.imported = imported

    @property
    def uid(self):
        """Gets the uid of this JobPartReferenceV2.  # noqa: E501


        :return: The uid of this JobPartReferenceV2.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this JobPartReferenceV2.


        :param uid: The uid of this JobPartReferenceV2.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def inner_id(self):
        """Gets the inner_id of this JobPartReferenceV2.  # noqa: E501

        InnerId is a sequential number of a job in a project.             Jobs created from the same file share the same innerId across workflow steps  # noqa: E501

        :return: The inner_id of this JobPartReferenceV2.  # noqa: E501
        :rtype: str
        """
        return self._inner_id

    @inner_id.setter
    def inner_id(self, inner_id):
        """Sets the inner_id of this JobPartReferenceV2.

        InnerId is a sequential number of a job in a project.             Jobs created from the same file share the same innerId across workflow steps  # noqa: E501

        :param inner_id: The inner_id of this JobPartReferenceV2.  # noqa: E501
        :type: str
        """

        self._inner_id = inner_id

    @property
    def status(self):
        """Gets the status of this JobPartReferenceV2.  # noqa: E501


        :return: The status of this JobPartReferenceV2.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobPartReferenceV2.


        :param status: The status of this JobPartReferenceV2.  # noqa: E501
        :type: str
        """
        allowed_values = ["NEW", "ACCEPTED", "DECLINED", "REJECTED", "DELIVERED", "EMAILED", "COMPLETED", "CANCELLED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def providers(self):
        """Gets the providers of this JobPartReferenceV2.  # noqa: E501


        :return: The providers of this JobPartReferenceV2.  # noqa: E501
        :rtype: list[ProviderReference]
        """
        return self._providers

    @providers.setter
    def providers(self, providers):
        """Sets the providers of this JobPartReferenceV2.


        :param providers: The providers of this JobPartReferenceV2.  # noqa: E501
        :type: list[ProviderReference]
        """

        self._providers = providers

    @property
    def target_lang(self):
        """Gets the target_lang of this JobPartReferenceV2.  # noqa: E501


        :return: The target_lang of this JobPartReferenceV2.  # noqa: E501
        :rtype: str
        """
        return self._target_lang

    @target_lang.setter
    def target_lang(self, target_lang):
        """Sets the target_lang of this JobPartReferenceV2.


        :param target_lang: The target_lang of this JobPartReferenceV2.  # noqa: E501
        :type: str
        """

        self._target_lang = target_lang

    @property
    def workflow_step(self):
        """Gets the workflow_step of this JobPartReferenceV2.  # noqa: E501


        :return: The workflow_step of this JobPartReferenceV2.  # noqa: E501
        :rtype: ProjectWorkflowStepReference
        """
        return self._workflow_step

    @workflow_step.setter
    def workflow_step(self, workflow_step):
        """Sets the workflow_step of this JobPartReferenceV2.


        :param workflow_step: The workflow_step of this JobPartReferenceV2.  # noqa: E501
        :type: ProjectWorkflowStepReference
        """

        self._workflow_step = workflow_step

    @property
    def filename(self):
        """Gets the filename of this JobPartReferenceV2.  # noqa: E501


        :return: The filename of this JobPartReferenceV2.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this JobPartReferenceV2.


        :param filename: The filename of this JobPartReferenceV2.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def original_file_directory(self):
        """Gets the original_file_directory of this JobPartReferenceV2.  # noqa: E501


        :return: The original_file_directory of this JobPartReferenceV2.  # noqa: E501
        :rtype: str
        """
        return self._original_file_directory

    @original_file_directory.setter
    def original_file_directory(self, original_file_directory):
        """Sets the original_file_directory of this JobPartReferenceV2.


        :param original_file_directory: The original_file_directory of this JobPartReferenceV2.  # noqa: E501
        :type: str
        """

        self._original_file_directory = original_file_directory

    @property
    def date_due(self):
        """Gets the date_due of this JobPartReferenceV2.  # noqa: E501


        :return: The date_due of this JobPartReferenceV2.  # noqa: E501
        :rtype: datetime
        """
        return self._date_due

    @date_due.setter
    def date_due(self, date_due):
        """Sets the date_due of this JobPartReferenceV2.


        :param date_due: The date_due of this JobPartReferenceV2.  # noqa: E501
        :type: datetime
        """

        self._date_due = date_due

    @property
    def date_created(self):
        """Gets the date_created of this JobPartReferenceV2.  # noqa: E501


        :return: The date_created of this JobPartReferenceV2.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this JobPartReferenceV2.


        :param date_created: The date_created of this JobPartReferenceV2.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def import_status(self):
        """Gets the import_status of this JobPartReferenceV2.  # noqa: E501


        :return: The import_status of this JobPartReferenceV2.  # noqa: E501
        :rtype: ImportStatusDtoV2
        """
        return self._import_status

    @import_status.setter
    def import_status(self, import_status):
        """Sets the import_status of this JobPartReferenceV2.


        :param import_status: The import_status of this JobPartReferenceV2.  # noqa: E501
        :type: ImportStatusDtoV2
        """

        self._import_status = import_status

    @property
    def continuous(self):
        """Gets the continuous of this JobPartReferenceV2.  # noqa: E501


        :return: The continuous of this JobPartReferenceV2.  # noqa: E501
        :rtype: bool
        """
        return self._continuous

    @continuous.setter
    def continuous(self, continuous):
        """Sets the continuous of this JobPartReferenceV2.


        :param continuous: The continuous of this JobPartReferenceV2.  # noqa: E501
        :type: bool
        """

        self._continuous = continuous

    @property
    def source_file_uid(self):
        """Gets the source_file_uid of this JobPartReferenceV2.  # noqa: E501


        :return: The source_file_uid of this JobPartReferenceV2.  # noqa: E501
        :rtype: str
        """
        return self._source_file_uid

    @source_file_uid.setter
    def source_file_uid(self, source_file_uid):
        """Sets the source_file_uid of this JobPartReferenceV2.


        :param source_file_uid: The source_file_uid of this JobPartReferenceV2.  # noqa: E501
        :type: str
        """

        self._source_file_uid = source_file_uid

    @property
    def split(self):
        """Gets the split of this JobPartReferenceV2.  # noqa: E501


        :return: The split of this JobPartReferenceV2.  # noqa: E501
        :rtype: bool
        """
        return self._split

    @split.setter
    def split(self, split):
        """Sets the split of this JobPartReferenceV2.


        :param split: The split of this JobPartReferenceV2.  # noqa: E501
        :type: bool
        """

        self._split = split

    @property
    def server_task_id(self):
        """Gets the server_task_id of this JobPartReferenceV2.  # noqa: E501


        :return: The server_task_id of this JobPartReferenceV2.  # noqa: E501
        :rtype: str
        """
        return self._server_task_id

    @server_task_id.setter
    def server_task_id(self, server_task_id):
        """Sets the server_task_id of this JobPartReferenceV2.


        :param server_task_id: The server_task_id of this JobPartReferenceV2.  # noqa: E501
        :type: str
        """

        self._server_task_id = server_task_id

    @property
    def owner(self):
        """Gets the owner of this JobPartReferenceV2.  # noqa: E501


        :return: The owner of this JobPartReferenceV2.  # noqa: E501
        :rtype: UserReference
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this JobPartReferenceV2.


        :param owner: The owner of this JobPartReferenceV2.  # noqa: E501
        :type: UserReference
        """

        self._owner = owner

    @property
    def imported(self):
        """Gets the imported of this JobPartReferenceV2.  # noqa: E501

        Default: false  # noqa: E501

        :return: The imported of this JobPartReferenceV2.  # noqa: E501
        :rtype: bool
        """
        return self._imported

    @imported.setter
    def imported(self, imported):
        """Sets the imported of this JobPartReferenceV2.

        Default: false  # noqa: E501

        :param imported: The imported of this JobPartReferenceV2.  # noqa: E501
        :type: bool
        """

        self._imported = imported

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobPartReferenceV2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobPartReferenceV2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
