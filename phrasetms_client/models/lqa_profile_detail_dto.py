# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LqaProfileDetailDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uid': 'str',
        'name': 'str',
        'error_categories': 'ErrorCategoriesDto',
        'penalty_points': 'PenaltyPointsDto',
        'pass_fail_threshold': 'PassFailThresholdDto',
        'is_default': 'bool',
        'created_by': 'UserReference',
        'date_created': 'datetime',
        'organization': 'UidReference'
    }

    attribute_map = {
        'uid': 'uid',
        'name': 'name',
        'error_categories': 'errorCategories',
        'penalty_points': 'penaltyPoints',
        'pass_fail_threshold': 'passFailThreshold',
        'is_default': 'isDefault',
        'created_by': 'createdBy',
        'date_created': 'dateCreated',
        'organization': 'organization'
    }

    def __init__(self, uid=None, name=None, error_categories=None, penalty_points=None, pass_fail_threshold=None, is_default=None, created_by=None, date_created=None, organization=None):  # noqa: E501
        """LqaProfileDetailDto - a model defined in Swagger"""  # noqa: E501
        self._uid = None
        self._name = None
        self._error_categories = None
        self._penalty_points = None
        self._pass_fail_threshold = None
        self._is_default = None
        self._created_by = None
        self._date_created = None
        self._organization = None
        self.discriminator = None
        self.uid = uid
        self.name = name
        self.error_categories = error_categories
        self.penalty_points = penalty_points
        self.pass_fail_threshold = pass_fail_threshold
        self.is_default = is_default
        self.created_by = created_by
        self.date_created = date_created
        self.organization = organization

    @property
    def uid(self):
        """Gets the uid of this LqaProfileDetailDto.  # noqa: E501

        UID of the profile  # noqa: E501

        :return: The uid of this LqaProfileDetailDto.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this LqaProfileDetailDto.

        UID of the profile  # noqa: E501

        :param uid: The uid of this LqaProfileDetailDto.  # noqa: E501
        :type: str
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")  # noqa: E501

        self._uid = uid

    @property
    def name(self):
        """Gets the name of this LqaProfileDetailDto.  # noqa: E501

        Name of the profile  # noqa: E501

        :return: The name of this LqaProfileDetailDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LqaProfileDetailDto.

        Name of the profile  # noqa: E501

        :param name: The name of this LqaProfileDetailDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def error_categories(self):
        """Gets the error_categories of this LqaProfileDetailDto.  # noqa: E501


        :return: The error_categories of this LqaProfileDetailDto.  # noqa: E501
        :rtype: ErrorCategoriesDto
        """
        return self._error_categories

    @error_categories.setter
    def error_categories(self, error_categories):
        """Sets the error_categories of this LqaProfileDetailDto.


        :param error_categories: The error_categories of this LqaProfileDetailDto.  # noqa: E501
        :type: ErrorCategoriesDto
        """
        if error_categories is None:
            raise ValueError("Invalid value for `error_categories`, must not be `None`")  # noqa: E501

        self._error_categories = error_categories

    @property
    def penalty_points(self):
        """Gets the penalty_points of this LqaProfileDetailDto.  # noqa: E501


        :return: The penalty_points of this LqaProfileDetailDto.  # noqa: E501
        :rtype: PenaltyPointsDto
        """
        return self._penalty_points

    @penalty_points.setter
    def penalty_points(self, penalty_points):
        """Sets the penalty_points of this LqaProfileDetailDto.


        :param penalty_points: The penalty_points of this LqaProfileDetailDto.  # noqa: E501
        :type: PenaltyPointsDto
        """
        if penalty_points is None:
            raise ValueError("Invalid value for `penalty_points`, must not be `None`")  # noqa: E501

        self._penalty_points = penalty_points

    @property
    def pass_fail_threshold(self):
        """Gets the pass_fail_threshold of this LqaProfileDetailDto.  # noqa: E501


        :return: The pass_fail_threshold of this LqaProfileDetailDto.  # noqa: E501
        :rtype: PassFailThresholdDto
        """
        return self._pass_fail_threshold

    @pass_fail_threshold.setter
    def pass_fail_threshold(self, pass_fail_threshold):
        """Sets the pass_fail_threshold of this LqaProfileDetailDto.


        :param pass_fail_threshold: The pass_fail_threshold of this LqaProfileDetailDto.  # noqa: E501
        :type: PassFailThresholdDto
        """
        if pass_fail_threshold is None:
            raise ValueError("Invalid value for `pass_fail_threshold`, must not be `None`")  # noqa: E501

        self._pass_fail_threshold = pass_fail_threshold

    @property
    def is_default(self):
        """Gets the is_default of this LqaProfileDetailDto.  # noqa: E501

        If profile is set as default for organization  # noqa: E501

        :return: The is_default of this LqaProfileDetailDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this LqaProfileDetailDto.

        If profile is set as default for organization  # noqa: E501

        :param is_default: The is_default of this LqaProfileDetailDto.  # noqa: E501
        :type: bool
        """
        if is_default is None:
            raise ValueError("Invalid value for `is_default`, must not be `None`")  # noqa: E501

        self._is_default = is_default

    @property
    def created_by(self):
        """Gets the created_by of this LqaProfileDetailDto.  # noqa: E501


        :return: The created_by of this LqaProfileDetailDto.  # noqa: E501
        :rtype: UserReference
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this LqaProfileDetailDto.


        :param created_by: The created_by of this LqaProfileDetailDto.  # noqa: E501
        :type: UserReference
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def date_created(self):
        """Gets the date_created of this LqaProfileDetailDto.  # noqa: E501


        :return: The date_created of this LqaProfileDetailDto.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this LqaProfileDetailDto.


        :param date_created: The date_created of this LqaProfileDetailDto.  # noqa: E501
        :type: datetime
        """
        if date_created is None:
            raise ValueError("Invalid value for `date_created`, must not be `None`")  # noqa: E501

        self._date_created = date_created

    @property
    def organization(self):
        """Gets the organization of this LqaProfileDetailDto.  # noqa: E501


        :return: The organization of this LqaProfileDetailDto.  # noqa: E501
        :rtype: UidReference
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this LqaProfileDetailDto.


        :param organization: The organization of this LqaProfileDetailDto.  # noqa: E501
        :type: UidReference
        """
        if organization is None:
            raise ValueError("Invalid value for `organization`, must not be `None`")  # noqa: E501

        self._organization = organization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LqaProfileDetailDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LqaProfileDetailDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
