# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from phrasetms_client.models.abstract_connector_dto import (
    AbstractConnectorDto,
)  # noqa: F401,E501


class Contentstack(AbstractConnectorDto):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "auth_type": "str",
        "region": "str",
        "non_localizable_blocks_uids": "str",
        "target_langs_field_id": "str",
        "api_key": "str",
        "source_lang": "str",
        "translate_urls": "bool",
        "translate_tags": "bool",
        "management_token": "str",
        "password": "str",
        "user_name": "str",
        "stack_wf_observed": "str",
        "stack_wf_upon_import": "str",
        "stack_wf_export_source": "str",
        "stack_wf_export_translate": "str",
    }
    if hasattr(AbstractConnectorDto, "swagger_types"):
        swagger_types.update(AbstractConnectorDto.swagger_types)

    attribute_map = {
        "auth_type": "authType",
        "region": "region",
        "non_localizable_blocks_uids": "nonLocalizableBlocksUids",
        "target_langs_field_id": "targetLangsFieldId",
        "api_key": "apiKey",
        "source_lang": "sourceLang",
        "translate_urls": "translateUrls",
        "translate_tags": "translateTags",
        "management_token": "managementToken",
        "password": "password",
        "user_name": "userName",
        "stack_wf_observed": "stackWFObserved",
        "stack_wf_upon_import": "stackWFUponImport",
        "stack_wf_export_source": "stackWFExportSource",
        "stack_wf_export_translate": "stackWFExportTranslate",
    }
    if hasattr(AbstractConnectorDto, "attribute_map"):
        attribute_map.update(AbstractConnectorDto.attribute_map)

    def __init__(
        self,
        auth_type=None,
        region=None,
        non_localizable_blocks_uids=None,
        target_langs_field_id=None,
        api_key=None,
        source_lang=None,
        translate_urls=None,
        translate_tags=None,
        management_token=None,
        password=None,
        user_name=None,
        stack_wf_observed=None,
        stack_wf_upon_import=None,
        stack_wf_export_source=None,
        stack_wf_export_translate=None,
        *args,
        **kwargs
    ):  # noqa: E501
        """Contentstack - a model defined in Swagger"""  # noqa: E501
        self._auth_type = None
        self._region = None
        self._non_localizable_blocks_uids = None
        self._target_langs_field_id = None
        self._api_key = None
        self._source_lang = None
        self._translate_urls = None
        self._translate_tags = None
        self._management_token = None
        self._password = None
        self._user_name = None
        self._stack_wf_observed = None
        self._stack_wf_upon_import = None
        self._stack_wf_export_source = None
        self._stack_wf_export_translate = None
        self.discriminator = None
        self.auth_type = auth_type
        if region is not None:
            self.region = region
        if non_localizable_blocks_uids is not None:
            self.non_localizable_blocks_uids = non_localizable_blocks_uids
        if target_langs_field_id is not None:
            self.target_langs_field_id = target_langs_field_id
        self.api_key = api_key
        if source_lang is not None:
            self.source_lang = source_lang
        if translate_urls is not None:
            self.translate_urls = translate_urls
        if translate_tags is not None:
            self.translate_tags = translate_tags
        if management_token is not None:
            self.management_token = management_token
        if password is not None:
            self.password = password
        if user_name is not None:
            self.user_name = user_name
        if stack_wf_observed is not None:
            self.stack_wf_observed = stack_wf_observed
        if stack_wf_upon_import is not None:
            self.stack_wf_upon_import = stack_wf_upon_import
        if stack_wf_export_source is not None:
            self.stack_wf_export_source = stack_wf_export_source
        if stack_wf_export_translate is not None:
            self.stack_wf_export_translate = stack_wf_export_translate
        AbstractConnectorDto.__init__(self, *args, **kwargs)

    @property
    def auth_type(self) -> str:
        """Gets the auth_type of this Contentstack.  # noqa: E501


        :return: The auth_type of this Contentstack.  # noqa: E501
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this Contentstack.


        :param auth_type: The auth_type of this Contentstack.  # noqa: E501
        :type: str
        """
        if auth_type is None:
            raise ValueError(
                "Invalid value for `auth_type`, must not be `None`"
            )  # noqa: E501

        self._auth_type = auth_type

    @property
    def region(self) -> str:
        """Gets the region of this Contentstack.  # noqa: E501


        :return: The region of this Contentstack.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Contentstack.


        :param region: The region of this Contentstack.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def non_localizable_blocks_uids(self) -> str:
        """Gets the non_localizable_blocks_uids of this Contentstack.  # noqa: E501


        :return: The non_localizable_blocks_uids of this Contentstack.  # noqa: E501
        :rtype: str
        """
        return self._non_localizable_blocks_uids

    @non_localizable_blocks_uids.setter
    def non_localizable_blocks_uids(self, non_localizable_blocks_uids):
        """Sets the non_localizable_blocks_uids of this Contentstack.


        :param non_localizable_blocks_uids: The non_localizable_blocks_uids of this Contentstack.  # noqa: E501
        :type: str
        """

        self._non_localizable_blocks_uids = non_localizable_blocks_uids

    @property
    def target_langs_field_id(self) -> str:
        """Gets the target_langs_field_id of this Contentstack.  # noqa: E501


        :return: The target_langs_field_id of this Contentstack.  # noqa: E501
        :rtype: str
        """
        return self._target_langs_field_id

    @target_langs_field_id.setter
    def target_langs_field_id(self, target_langs_field_id):
        """Sets the target_langs_field_id of this Contentstack.


        :param target_langs_field_id: The target_langs_field_id of this Contentstack.  # noqa: E501
        :type: str
        """

        self._target_langs_field_id = target_langs_field_id

    @property
    def api_key(self) -> str:
        """Gets the api_key of this Contentstack.  # noqa: E501


        :return: The api_key of this Contentstack.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this Contentstack.


        :param api_key: The api_key of this Contentstack.  # noqa: E501
        :type: str
        """
        if api_key is None:
            raise ValueError(
                "Invalid value for `api_key`, must not be `None`"
            )  # noqa: E501

        self._api_key = api_key

    @property
    def source_lang(self) -> str:
        """Gets the source_lang of this Contentstack.  # noqa: E501


        :return: The source_lang of this Contentstack.  # noqa: E501
        :rtype: str
        """
        return self._source_lang

    @source_lang.setter
    def source_lang(self, source_lang):
        """Sets the source_lang of this Contentstack.


        :param source_lang: The source_lang of this Contentstack.  # noqa: E501
        :type: str
        """

        self._source_lang = source_lang

    @property
    def translate_urls(self) -> bool:
        """Gets the translate_urls of this Contentstack.  # noqa: E501

        Default false  # noqa: E501

        :return: The translate_urls of this Contentstack.  # noqa: E501
        :rtype: bool
        """
        return self._translate_urls

    @translate_urls.setter
    def translate_urls(self, translate_urls):
        """Sets the translate_urls of this Contentstack.

        Default false  # noqa: E501

        :param translate_urls: The translate_urls of this Contentstack.  # noqa: E501
        :type: bool
        """

        self._translate_urls = translate_urls

    @property
    def translate_tags(self) -> bool:
        """Gets the translate_tags of this Contentstack.  # noqa: E501

        Default false  # noqa: E501

        :return: The translate_tags of this Contentstack.  # noqa: E501
        :rtype: bool
        """
        return self._translate_tags

    @translate_tags.setter
    def translate_tags(self, translate_tags):
        """Sets the translate_tags of this Contentstack.

        Default false  # noqa: E501

        :param translate_tags: The translate_tags of this Contentstack.  # noqa: E501
        :type: bool
        """

        self._translate_tags = translate_tags

    @property
    def management_token(self) -> str:
        """Gets the management_token of this Contentstack.  # noqa: E501


        :return: The management_token of this Contentstack.  # noqa: E501
        :rtype: str
        """
        return self._management_token

    @management_token.setter
    def management_token(self, management_token):
        """Sets the management_token of this Contentstack.


        :param management_token: The management_token of this Contentstack.  # noqa: E501
        :type: str
        """

        self._management_token = management_token

    @property
    def password(self) -> str:
        """Gets the password of this Contentstack.  # noqa: E501


        :return: The password of this Contentstack.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Contentstack.


        :param password: The password of this Contentstack.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def user_name(self) -> str:
        """Gets the user_name of this Contentstack.  # noqa: E501


        :return: The user_name of this Contentstack.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this Contentstack.


        :param user_name: The user_name of this Contentstack.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def stack_wf_observed(self) -> str:
        """Gets the stack_wf_observed of this Contentstack.  # noqa: E501


        :return: The stack_wf_observed of this Contentstack.  # noqa: E501
        :rtype: str
        """
        return self._stack_wf_observed

    @stack_wf_observed.setter
    def stack_wf_observed(self, stack_wf_observed):
        """Sets the stack_wf_observed of this Contentstack.


        :param stack_wf_observed: The stack_wf_observed of this Contentstack.  # noqa: E501
        :type: str
        """

        self._stack_wf_observed = stack_wf_observed

    @property
    def stack_wf_upon_import(self) -> str:
        """Gets the stack_wf_upon_import of this Contentstack.  # noqa: E501


        :return: The stack_wf_upon_import of this Contentstack.  # noqa: E501
        :rtype: str
        """
        return self._stack_wf_upon_import

    @stack_wf_upon_import.setter
    def stack_wf_upon_import(self, stack_wf_upon_import):
        """Sets the stack_wf_upon_import of this Contentstack.


        :param stack_wf_upon_import: The stack_wf_upon_import of this Contentstack.  # noqa: E501
        :type: str
        """

        self._stack_wf_upon_import = stack_wf_upon_import

    @property
    def stack_wf_export_source(self) -> str:
        """Gets the stack_wf_export_source of this Contentstack.  # noqa: E501


        :return: The stack_wf_export_source of this Contentstack.  # noqa: E501
        :rtype: str
        """
        return self._stack_wf_export_source

    @stack_wf_export_source.setter
    def stack_wf_export_source(self, stack_wf_export_source):
        """Sets the stack_wf_export_source of this Contentstack.


        :param stack_wf_export_source: The stack_wf_export_source of this Contentstack.  # noqa: E501
        :type: str
        """

        self._stack_wf_export_source = stack_wf_export_source

    @property
    def stack_wf_export_translate(self) -> str:
        """Gets the stack_wf_export_translate of this Contentstack.  # noqa: E501


        :return: The stack_wf_export_translate of this Contentstack.  # noqa: E501
        :rtype: str
        """
        return self._stack_wf_export_translate

    @stack_wf_export_translate.setter
    def stack_wf_export_translate(self, stack_wf_export_translate):
        """Sets the stack_wf_export_translate of this Contentstack.


        :param stack_wf_export_translate: The stack_wf_export_translate of this Contentstack.  # noqa: E501
        :type: str
        """

        self._stack_wf_export_translate = stack_wf_export_translate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(Contentstack, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Contentstack):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
