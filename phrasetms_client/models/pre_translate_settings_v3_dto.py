# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PreTranslateSettingsV3Dto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pre_translate_on_job_creation': 'bool',
        'set_job_status_completed': 'bool',
        'set_job_status_completed_when_confirmed': 'bool',
        'set_project_status_completed': 'bool',
        'overwrite_existing_translations': 'bool',
        'translation_memory_settings': 'TranslationMemorySettingsDto',
        'machine_translation_settings': 'MachineTranslationSettingsDto',
        'non_translatable_settings': 'NonTranslatableSettingsDto',
        'repetitions_settings': 'RepetitionsSettingsDto'
    }

    attribute_map = {
        'pre_translate_on_job_creation': 'preTranslateOnJobCreation',
        'set_job_status_completed': 'setJobStatusCompleted',
        'set_job_status_completed_when_confirmed': 'setJobStatusCompletedWhenConfirmed',
        'set_project_status_completed': 'setProjectStatusCompleted',
        'overwrite_existing_translations': 'overwriteExistingTranslations',
        'translation_memory_settings': 'translationMemorySettings',
        'machine_translation_settings': 'machineTranslationSettings',
        'non_translatable_settings': 'nonTranslatableSettings',
        'repetitions_settings': 'repetitionsSettings'
    }

    def __init__(self, pre_translate_on_job_creation=None, set_job_status_completed=None, set_job_status_completed_when_confirmed=None, set_project_status_completed=None, overwrite_existing_translations=None, translation_memory_settings=None, machine_translation_settings=None, non_translatable_settings=None, repetitions_settings=None):  # noqa: E501
        """PreTranslateSettingsV3Dto - a model defined in Swagger"""  # noqa: E501
        self._pre_translate_on_job_creation = None
        self._set_job_status_completed = None
        self._set_job_status_completed_when_confirmed = None
        self._set_project_status_completed = None
        self._overwrite_existing_translations = None
        self._translation_memory_settings = None
        self._machine_translation_settings = None
        self._non_translatable_settings = None
        self._repetitions_settings = None
        self.discriminator = None
        if pre_translate_on_job_creation is not None:
            self.pre_translate_on_job_creation = pre_translate_on_job_creation
        if set_job_status_completed is not None:
            self.set_job_status_completed = set_job_status_completed
        if set_job_status_completed_when_confirmed is not None:
            self.set_job_status_completed_when_confirmed = set_job_status_completed_when_confirmed
        if set_project_status_completed is not None:
            self.set_project_status_completed = set_project_status_completed
        if overwrite_existing_translations is not None:
            self.overwrite_existing_translations = overwrite_existing_translations
        if translation_memory_settings is not None:
            self.translation_memory_settings = translation_memory_settings
        if machine_translation_settings is not None:
            self.machine_translation_settings = machine_translation_settings
        if non_translatable_settings is not None:
            self.non_translatable_settings = non_translatable_settings
        if repetitions_settings is not None:
            self.repetitions_settings = repetitions_settings

    @property
    def pre_translate_on_job_creation(self):
        """Gets the pre_translate_on_job_creation of this PreTranslateSettingsV3Dto.  # noqa: E501

        Pre-translate & set job to completed: Pre-translate on job creation. Default: false  # noqa: E501

        :return: The pre_translate_on_job_creation of this PreTranslateSettingsV3Dto.  # noqa: E501
        :rtype: bool
        """
        return self._pre_translate_on_job_creation

    @pre_translate_on_job_creation.setter
    def pre_translate_on_job_creation(self, pre_translate_on_job_creation):
        """Sets the pre_translate_on_job_creation of this PreTranslateSettingsV3Dto.

        Pre-translate & set job to completed: Pre-translate on job creation. Default: false  # noqa: E501

        :param pre_translate_on_job_creation: The pre_translate_on_job_creation of this PreTranslateSettingsV3Dto.  # noqa: E501
        :type: bool
        """

        self._pre_translate_on_job_creation = pre_translate_on_job_creation

    @property
    def set_job_status_completed(self):
        """Gets the set_job_status_completed of this PreTranslateSettingsV3Dto.  # noqa: E501

        Pre-translate & set job to completed: Set job to completed once pre-translated. Default: false  # noqa: E501

        :return: The set_job_status_completed of this PreTranslateSettingsV3Dto.  # noqa: E501
        :rtype: bool
        """
        return self._set_job_status_completed

    @set_job_status_completed.setter
    def set_job_status_completed(self, set_job_status_completed):
        """Sets the set_job_status_completed of this PreTranslateSettingsV3Dto.

        Pre-translate & set job to completed: Set job to completed once pre-translated. Default: false  # noqa: E501

        :param set_job_status_completed: The set_job_status_completed of this PreTranslateSettingsV3Dto.  # noqa: E501
        :type: bool
        """

        self._set_job_status_completed = set_job_status_completed

    @property
    def set_job_status_completed_when_confirmed(self):
        """Gets the set_job_status_completed_when_confirmed of this PreTranslateSettingsV3Dto.  # noqa: E501

        Pre-translate & set job to completed when all segments confirmed: Set job to completed once pre-translated and all segments are confirmed. Default: false  # noqa: E501

        :return: The set_job_status_completed_when_confirmed of this PreTranslateSettingsV3Dto.  # noqa: E501
        :rtype: bool
        """
        return self._set_job_status_completed_when_confirmed

    @set_job_status_completed_when_confirmed.setter
    def set_job_status_completed_when_confirmed(self, set_job_status_completed_when_confirmed):
        """Sets the set_job_status_completed_when_confirmed of this PreTranslateSettingsV3Dto.

        Pre-translate & set job to completed when all segments confirmed: Set job to completed once pre-translated and all segments are confirmed. Default: false  # noqa: E501

        :param set_job_status_completed_when_confirmed: The set_job_status_completed_when_confirmed of this PreTranslateSettingsV3Dto.  # noqa: E501
        :type: bool
        """

        self._set_job_status_completed_when_confirmed = set_job_status_completed_when_confirmed

    @property
    def set_project_status_completed(self):
        """Gets the set_project_status_completed of this PreTranslateSettingsV3Dto.  # noqa: E501

        Pre-translate & set job to completed: Set project to completed once all jobs pre-translated.         Default: false  # noqa: E501

        :return: The set_project_status_completed of this PreTranslateSettingsV3Dto.  # noqa: E501
        :rtype: bool
        """
        return self._set_project_status_completed

    @set_project_status_completed.setter
    def set_project_status_completed(self, set_project_status_completed):
        """Sets the set_project_status_completed of this PreTranslateSettingsV3Dto.

        Pre-translate & set job to completed: Set project to completed once all jobs pre-translated.         Default: false  # noqa: E501

        :param set_project_status_completed: The set_project_status_completed of this PreTranslateSettingsV3Dto.  # noqa: E501
        :type: bool
        """

        self._set_project_status_completed = set_project_status_completed

    @property
    def overwrite_existing_translations(self):
        """Gets the overwrite_existing_translations of this PreTranslateSettingsV3Dto.  # noqa: E501

        Overwrite existing translations in target segments. Default: false  # noqa: E501

        :return: The overwrite_existing_translations of this PreTranslateSettingsV3Dto.  # noqa: E501
        :rtype: bool
        """
        return self._overwrite_existing_translations

    @overwrite_existing_translations.setter
    def overwrite_existing_translations(self, overwrite_existing_translations):
        """Sets the overwrite_existing_translations of this PreTranslateSettingsV3Dto.

        Overwrite existing translations in target segments. Default: false  # noqa: E501

        :param overwrite_existing_translations: The overwrite_existing_translations of this PreTranslateSettingsV3Dto.  # noqa: E501
        :type: bool
        """

        self._overwrite_existing_translations = overwrite_existing_translations

    @property
    def translation_memory_settings(self):
        """Gets the translation_memory_settings of this PreTranslateSettingsV3Dto.  # noqa: E501


        :return: The translation_memory_settings of this PreTranslateSettingsV3Dto.  # noqa: E501
        :rtype: TranslationMemorySettingsDto
        """
        return self._translation_memory_settings

    @translation_memory_settings.setter
    def translation_memory_settings(self, translation_memory_settings):
        """Sets the translation_memory_settings of this PreTranslateSettingsV3Dto.


        :param translation_memory_settings: The translation_memory_settings of this PreTranslateSettingsV3Dto.  # noqa: E501
        :type: TranslationMemorySettingsDto
        """

        self._translation_memory_settings = translation_memory_settings

    @property
    def machine_translation_settings(self):
        """Gets the machine_translation_settings of this PreTranslateSettingsV3Dto.  # noqa: E501


        :return: The machine_translation_settings of this PreTranslateSettingsV3Dto.  # noqa: E501
        :rtype: MachineTranslationSettingsDto
        """
        return self._machine_translation_settings

    @machine_translation_settings.setter
    def machine_translation_settings(self, machine_translation_settings):
        """Sets the machine_translation_settings of this PreTranslateSettingsV3Dto.


        :param machine_translation_settings: The machine_translation_settings of this PreTranslateSettingsV3Dto.  # noqa: E501
        :type: MachineTranslationSettingsDto
        """

        self._machine_translation_settings = machine_translation_settings

    @property
    def non_translatable_settings(self):
        """Gets the non_translatable_settings of this PreTranslateSettingsV3Dto.  # noqa: E501


        :return: The non_translatable_settings of this PreTranslateSettingsV3Dto.  # noqa: E501
        :rtype: NonTranslatableSettingsDto
        """
        return self._non_translatable_settings

    @non_translatable_settings.setter
    def non_translatable_settings(self, non_translatable_settings):
        """Sets the non_translatable_settings of this PreTranslateSettingsV3Dto.


        :param non_translatable_settings: The non_translatable_settings of this PreTranslateSettingsV3Dto.  # noqa: E501
        :type: NonTranslatableSettingsDto
        """

        self._non_translatable_settings = non_translatable_settings

    @property
    def repetitions_settings(self):
        """Gets the repetitions_settings of this PreTranslateSettingsV3Dto.  # noqa: E501


        :return: The repetitions_settings of this PreTranslateSettingsV3Dto.  # noqa: E501
        :rtype: RepetitionsSettingsDto
        """
        return self._repetitions_settings

    @repetitions_settings.setter
    def repetitions_settings(self, repetitions_settings):
        """Sets the repetitions_settings of this PreTranslateSettingsV3Dto.


        :param repetitions_settings: The repetitions_settings of this PreTranslateSettingsV3Dto.  # noqa: E501
        :type: RepetitionsSettingsDto
        """

        self._repetitions_settings = repetitions_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PreTranslateSettingsV3Dto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PreTranslateSettingsV3Dto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
