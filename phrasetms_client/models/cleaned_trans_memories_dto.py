# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CleanedTransMemoriesDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "uids": "list[str]",
        "output_format": "str",
        "preserve_ratio": "float",
        "target_langs": "list[str]",
    }

    attribute_map = {
        "uids": "uids",
        "output_format": "outputFormat",
        "preserve_ratio": "preserveRatio",
        "target_langs": "targetLangs",
    }

    def __init__(
        self, uids=None, output_format=None, preserve_ratio=None, target_langs=None
    ):  # noqa: E501
        """CleanedTransMemoriesDto - a model defined in Swagger"""  # noqa: E501
        self._uids = None
        self._output_format = None
        self._preserve_ratio = None
        self._target_langs = None
        self.discriminator = None
        self.uids = uids
        if output_format is not None:
            self.output_format = output_format
        if preserve_ratio is not None:
            self.preserve_ratio = preserve_ratio
        if target_langs is not None:
            self.target_langs = target_langs

    @property
    def uids(self) -> list[str]:
        """Gets the uids of this CleanedTransMemoriesDto.  # noqa: E501


        :return: The uids of this CleanedTransMemoriesDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._uids

    @uids.setter
    def uids(self, uids):
        """Sets the uids of this CleanedTransMemoriesDto.


        :param uids: The uids of this CleanedTransMemoriesDto.  # noqa: E501
        :type: list[str]
        """
        if uids is None:
            raise ValueError(
                "Invalid value for `uids`, must not be `None`"
            )  # noqa: E501

        self._uids = uids

    @property
    def output_format(self) -> str:
        """Gets the output_format of this CleanedTransMemoriesDto.  # noqa: E501


        :return: The output_format of this CleanedTransMemoriesDto.  # noqa: E501
        :rtype: str
        """
        return self._output_format

    @output_format.setter
    def output_format(self, output_format):
        """Sets the output_format of this CleanedTransMemoriesDto.


        :param output_format: The output_format of this CleanedTransMemoriesDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["TXT", "TSV"]  # noqa: E501
        if output_format not in allowed_values:
            raise ValueError(
                "Invalid value for `output_format` ({0}), must be one of {1}".format(  # noqa: E501
                    output_format, allowed_values
                )
            )

        self._output_format = output_format

    @property
    def preserve_ratio(self) -> float:
        """Gets the preserve_ratio of this CleanedTransMemoriesDto.  # noqa: E501


        :return: The preserve_ratio of this CleanedTransMemoriesDto.  # noqa: E501
        :rtype: float
        """
        return self._preserve_ratio

    @preserve_ratio.setter
    def preserve_ratio(self, preserve_ratio):
        """Sets the preserve_ratio of this CleanedTransMemoriesDto.


        :param preserve_ratio: The preserve_ratio of this CleanedTransMemoriesDto.  # noqa: E501
        :type: float
        """

        self._preserve_ratio = preserve_ratio

    @property
    def target_langs(self) -> list[str]:
        """Gets the target_langs of this CleanedTransMemoriesDto.  # noqa: E501


        :return: The target_langs of this CleanedTransMemoriesDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._target_langs

    @target_langs.setter
    def target_langs(self, target_langs):
        """Sets the target_langs of this CleanedTransMemoriesDto.


        :param target_langs: The target_langs of this CleanedTransMemoriesDto.  # noqa: E501
        :type: list[str]
        """

        self._target_langs = target_langs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(CleanedTransMemoriesDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CleanedTransMemoriesDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
