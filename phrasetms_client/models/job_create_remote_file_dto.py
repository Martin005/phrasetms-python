# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobCreateRemoteFileDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connector_token': 'str',
        'remote_folder': 'str',
        'remote_file_name': 'str',
        'remote_file_name_regex': 'bool',
        'continuous': 'bool'
    }

    attribute_map = {
        'connector_token': 'connectorToken',
        'remote_folder': 'remoteFolder',
        'remote_file_name': 'remoteFileName',
        'remote_file_name_regex': 'remoteFileNameRegex',
        'continuous': 'continuous'
    }

    def __init__(self, connector_token=None, remote_folder=None, remote_file_name=None, remote_file_name_regex=None, continuous=None):  # noqa: E501
        """JobCreateRemoteFileDto - a model defined in Swagger"""  # noqa: E501
        self._connector_token = None
        self._remote_folder = None
        self._remote_file_name = None
        self._remote_file_name_regex = None
        self._continuous = None
        self.discriminator = None
        self.connector_token = connector_token
        if remote_folder is not None:
            self.remote_folder = remote_folder
        self.remote_file_name = remote_file_name
        if remote_file_name_regex is not None:
            self.remote_file_name_regex = remote_file_name_regex
        if continuous is not None:
            self.continuous = continuous

    @property
    def connector_token(self):
        """Gets the connector_token of this JobCreateRemoteFileDto.  # noqa: E501


        :return: The connector_token of this JobCreateRemoteFileDto.  # noqa: E501
        :rtype: str
        """
        return self._connector_token

    @connector_token.setter
    def connector_token(self, connector_token):
        """Sets the connector_token of this JobCreateRemoteFileDto.


        :param connector_token: The connector_token of this JobCreateRemoteFileDto.  # noqa: E501
        :type: str
        """
        if connector_token is None:
            raise ValueError("Invalid value for `connector_token`, must not be `None`")  # noqa: E501

        self._connector_token = connector_token

    @property
    def remote_folder(self):
        """Gets the remote_folder of this JobCreateRemoteFileDto.  # noqa: E501


        :return: The remote_folder of this JobCreateRemoteFileDto.  # noqa: E501
        :rtype: str
        """
        return self._remote_folder

    @remote_folder.setter
    def remote_folder(self, remote_folder):
        """Sets the remote_folder of this JobCreateRemoteFileDto.


        :param remote_folder: The remote_folder of this JobCreateRemoteFileDto.  # noqa: E501
        :type: str
        """

        self._remote_folder = remote_folder

    @property
    def remote_file_name(self):
        """Gets the remote_file_name of this JobCreateRemoteFileDto.  # noqa: E501


        :return: The remote_file_name of this JobCreateRemoteFileDto.  # noqa: E501
        :rtype: str
        """
        return self._remote_file_name

    @remote_file_name.setter
    def remote_file_name(self, remote_file_name):
        """Sets the remote_file_name of this JobCreateRemoteFileDto.


        :param remote_file_name: The remote_file_name of this JobCreateRemoteFileDto.  # noqa: E501
        :type: str
        """
        if remote_file_name is None:
            raise ValueError("Invalid value for `remote_file_name`, must not be `None`")  # noqa: E501

        self._remote_file_name = remote_file_name

    @property
    def remote_file_name_regex(self):
        """Gets the remote_file_name_regex of this JobCreateRemoteFileDto.  # noqa: E501


        :return: The remote_file_name_regex of this JobCreateRemoteFileDto.  # noqa: E501
        :rtype: bool
        """
        return self._remote_file_name_regex

    @remote_file_name_regex.setter
    def remote_file_name_regex(self, remote_file_name_regex):
        """Sets the remote_file_name_regex of this JobCreateRemoteFileDto.


        :param remote_file_name_regex: The remote_file_name_regex of this JobCreateRemoteFileDto.  # noqa: E501
        :type: bool
        """

        self._remote_file_name_regex = remote_file_name_regex

    @property
    def continuous(self):
        """Gets the continuous of this JobCreateRemoteFileDto.  # noqa: E501


        :return: The continuous of this JobCreateRemoteFileDto.  # noqa: E501
        :rtype: bool
        """
        return self._continuous

    @continuous.setter
    def continuous(self, continuous):
        """Sets the continuous of this JobCreateRemoteFileDto.


        :param continuous: The continuous of this JobCreateRemoteFileDto.  # noqa: E501
        :type: bool
        """

        self._continuous = continuous

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobCreateRemoteFileDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobCreateRemoteFileDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
