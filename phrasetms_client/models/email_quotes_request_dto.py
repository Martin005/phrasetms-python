# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class EmailQuotesRequestDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "quotes": "list[UidReference]",
        "subject": "str",
        "body": "str",
        "cc": "str",
        "bcc": "str",
    }

    attribute_map = {
        "quotes": "quotes",
        "subject": "subject",
        "body": "body",
        "cc": "cc",
        "bcc": "bcc",
    }

    def __init__(
        self, quotes=None, subject=None, body=None, cc=None, bcc=None
    ):  # noqa: E501
        """EmailQuotesRequestDto - a model defined in Swagger"""  # noqa: E501
        self._quotes = None
        self._subject = None
        self._body = None
        self._cc = None
        self._bcc = None
        self.discriminator = None
        self.quotes = quotes
        self.subject = subject
        self.body = body
        if cc is not None:
            self.cc = cc
        if bcc is not None:
            self.bcc = bcc

    @property
    def quotes(self) -> list[UidReference]:
        """Gets the quotes of this EmailQuotesRequestDto.  # noqa: E501


        :return: The quotes of this EmailQuotesRequestDto.  # noqa: E501
        :rtype: list[UidReference]
        """
        return self._quotes

    @quotes.setter
    def quotes(self, quotes):
        """Sets the quotes of this EmailQuotesRequestDto.


        :param quotes: The quotes of this EmailQuotesRequestDto.  # noqa: E501
        :type: list[UidReference]
        """
        if quotes is None:
            raise ValueError(
                "Invalid value for `quotes`, must not be `None`"
            )  # noqa: E501

        self._quotes = quotes

    @property
    def subject(self) -> str:
        """Gets the subject of this EmailQuotesRequestDto.  # noqa: E501


        :return: The subject of this EmailQuotesRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this EmailQuotesRequestDto.


        :param subject: The subject of this EmailQuotesRequestDto.  # noqa: E501
        :type: str
        """
        if subject is None:
            raise ValueError(
                "Invalid value for `subject`, must not be `None`"
            )  # noqa: E501

        self._subject = subject

    @property
    def body(self) -> str:
        """Gets the body of this EmailQuotesRequestDto.  # noqa: E501


        :return: The body of this EmailQuotesRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this EmailQuotesRequestDto.


        :param body: The body of this EmailQuotesRequestDto.  # noqa: E501
        :type: str
        """
        if body is None:
            raise ValueError(
                "Invalid value for `body`, must not be `None`"
            )  # noqa: E501

        self._body = body

    @property
    def cc(self) -> str:
        """Gets the cc of this EmailQuotesRequestDto.  # noqa: E501


        :return: The cc of this EmailQuotesRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._cc

    @cc.setter
    def cc(self, cc):
        """Sets the cc of this EmailQuotesRequestDto.


        :param cc: The cc of this EmailQuotesRequestDto.  # noqa: E501
        :type: str
        """

        self._cc = cc

    @property
    def bcc(self) -> str:
        """Gets the bcc of this EmailQuotesRequestDto.  # noqa: E501


        :return: The bcc of this EmailQuotesRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._bcc

    @bcc.setter
    def bcc(self, bcc):
        """Sets the bcc of this EmailQuotesRequestDto.


        :param bcc: The bcc of this EmailQuotesRequestDto.  # noqa: E501
        :type: str
        """

        self._bcc = bcc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(EmailQuotesRequestDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailQuotesRequestDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
