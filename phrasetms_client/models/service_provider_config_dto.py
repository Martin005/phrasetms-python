# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from phrasetms_client.models import Supported, AuthSchema


class ServiceProviderConfigDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "authentication_schemes": "list[AuthSchema]",
        "schemas": "list[str]",
        "patch": "Supported",
        "bulk": "Supported",
        "filter": "Supported",
        "change_password": "Supported",
        "sort": "Supported",
        "etag": "Supported",
        "xml_data_format": "Supported",
    }

    attribute_map = {
        "authentication_schemes": "authenticationSchemes",
        "schemas": "schemas",
        "patch": "patch",
        "bulk": "bulk",
        "filter": "filter",
        "change_password": "changePassword",
        "sort": "sort",
        "etag": "etag",
        "xml_data_format": "xmlDataFormat",
    }

    def __init__(
        self,
        authentication_schemes=None,
        schemas=None,
        patch=None,
        bulk=None,
        filter=None,
        change_password=None,
        sort=None,
        etag=None,
        xml_data_format=None,
    ):  # noqa: E501
        """ServiceProviderConfigDto - a model defined in Swagger"""  # noqa: E501
        self._authentication_schemes = None
        self._schemas = None
        self._patch = None
        self._bulk = None
        self._filter = None
        self._change_password = None
        self._sort = None
        self._etag = None
        self._xml_data_format = None
        self.discriminator = None
        if authentication_schemes is not None:
            self.authentication_schemes = authentication_schemes
        if schemas is not None:
            self.schemas = schemas
        if patch is not None:
            self.patch = patch
        if bulk is not None:
            self.bulk = bulk
        if filter is not None:
            self.filter = filter
        if change_password is not None:
            self.change_password = change_password
        if sort is not None:
            self.sort = sort
        if etag is not None:
            self.etag = etag
        if xml_data_format is not None:
            self.xml_data_format = xml_data_format

    @property
    def authentication_schemes(self) -> list[AuthSchema]:
        """Gets the authentication_schemes of this ServiceProviderConfigDto.  # noqa: E501


        :return: The authentication_schemes of this ServiceProviderConfigDto.  # noqa: E501
        :rtype: list[AuthSchema]
        """
        return self._authentication_schemes

    @authentication_schemes.setter
    def authentication_schemes(self, authentication_schemes):
        """Sets the authentication_schemes of this ServiceProviderConfigDto.


        :param authentication_schemes: The authentication_schemes of this ServiceProviderConfigDto.  # noqa: E501
        :type: list[AuthSchema]
        """

        self._authentication_schemes = authentication_schemes

    @property
    def schemas(self) -> list[str]:
        """Gets the schemas of this ServiceProviderConfigDto.  # noqa: E501


        :return: The schemas of this ServiceProviderConfigDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._schemas

    @schemas.setter
    def schemas(self, schemas):
        """Sets the schemas of this ServiceProviderConfigDto.


        :param schemas: The schemas of this ServiceProviderConfigDto.  # noqa: E501
        :type: list[str]
        """

        self._schemas = schemas

    @property
    def patch(self) -> Supported:
        """Gets the patch of this ServiceProviderConfigDto.  # noqa: E501


        :return: The patch of this ServiceProviderConfigDto.  # noqa: E501
        :rtype: Supported
        """
        return self._patch

    @patch.setter
    def patch(self, patch):
        """Sets the patch of this ServiceProviderConfigDto.


        :param patch: The patch of this ServiceProviderConfigDto.  # noqa: E501
        :type: Supported
        """

        self._patch = patch

    @property
    def bulk(self) -> Supported:
        """Gets the bulk of this ServiceProviderConfigDto.  # noqa: E501


        :return: The bulk of this ServiceProviderConfigDto.  # noqa: E501
        :rtype: Supported
        """
        return self._bulk

    @bulk.setter
    def bulk(self, bulk):
        """Sets the bulk of this ServiceProviderConfigDto.


        :param bulk: The bulk of this ServiceProviderConfigDto.  # noqa: E501
        :type: Supported
        """

        self._bulk = bulk

    @property
    def filter(self) -> Supported:
        """Gets the filter of this ServiceProviderConfigDto.  # noqa: E501


        :return: The filter of this ServiceProviderConfigDto.  # noqa: E501
        :rtype: Supported
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this ServiceProviderConfigDto.


        :param filter: The filter of this ServiceProviderConfigDto.  # noqa: E501
        :type: Supported
        """

        self._filter = filter

    @property
    def change_password(self) -> Supported:
        """Gets the change_password of this ServiceProviderConfigDto.  # noqa: E501


        :return: The change_password of this ServiceProviderConfigDto.  # noqa: E501
        :rtype: Supported
        """
        return self._change_password

    @change_password.setter
    def change_password(self, change_password):
        """Sets the change_password of this ServiceProviderConfigDto.


        :param change_password: The change_password of this ServiceProviderConfigDto.  # noqa: E501
        :type: Supported
        """

        self._change_password = change_password

    @property
    def sort(self) -> Supported:
        """Gets the sort of this ServiceProviderConfigDto.  # noqa: E501


        :return: The sort of this ServiceProviderConfigDto.  # noqa: E501
        :rtype: Supported
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this ServiceProviderConfigDto.


        :param sort: The sort of this ServiceProviderConfigDto.  # noqa: E501
        :type: Supported
        """

        self._sort = sort

    @property
    def etag(self) -> Supported:
        """Gets the etag of this ServiceProviderConfigDto.  # noqa: E501


        :return: The etag of this ServiceProviderConfigDto.  # noqa: E501
        :rtype: Supported
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this ServiceProviderConfigDto.


        :param etag: The etag of this ServiceProviderConfigDto.  # noqa: E501
        :type: Supported
        """

        self._etag = etag

    @property
    def xml_data_format(self) -> Supported:
        """Gets the xml_data_format of this ServiceProviderConfigDto.  # noqa: E501


        :return: The xml_data_format of this ServiceProviderConfigDto.  # noqa: E501
        :rtype: Supported
        """
        return self._xml_data_format

    @xml_data_format.setter
    def xml_data_format(self, xml_data_format):
        """Sets the xml_data_format of this ServiceProviderConfigDto.


        :param xml_data_format: The xml_data_format of this ServiceProviderConfigDto.  # noqa: E501
        :type: Supported
        """

        self._xml_data_format = xml_data_format

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ServiceProviderConfigDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceProviderConfigDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
