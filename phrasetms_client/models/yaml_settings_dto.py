# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class YamlSettingsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'html_sub_filter': 'bool',
        'tag_regexp': 'str',
        'include_key_regexp': 'str',
        'exclude_value_regexp': 'str',
        'context_path': 'str',
        'context_key_path': 'str',
        'markdown_subfilter': 'bool',
        'update_root_element_lang': 'bool',
        'locale_format': 'str',
        'indent_empty_lines_in_string': 'bool',
        'icu_sub_filter': 'bool'
    }

    attribute_map = {
        'html_sub_filter': 'htmlSubFilter',
        'tag_regexp': 'tagRegexp',
        'include_key_regexp': 'includeKeyRegexp',
        'exclude_value_regexp': 'excludeValueRegexp',
        'context_path': 'contextPath',
        'context_key_path': 'contextKeyPath',
        'markdown_subfilter': 'markdownSubfilter',
        'update_root_element_lang': 'updateRootElementLang',
        'locale_format': 'localeFormat',
        'indent_empty_lines_in_string': 'indentEmptyLinesInString',
        'icu_sub_filter': 'icuSubFilter'
    }

    def __init__(self, html_sub_filter=None, tag_regexp=None, include_key_regexp=None, exclude_value_regexp=None, context_path=None, context_key_path=None, markdown_subfilter=None, update_root_element_lang=None, locale_format=None, indent_empty_lines_in_string=None, icu_sub_filter=None):  # noqa: E501
        """YamlSettingsDto - a model defined in Swagger"""  # noqa: E501
        self._html_sub_filter = None
        self._tag_regexp = None
        self._include_key_regexp = None
        self._exclude_value_regexp = None
        self._context_path = None
        self._context_key_path = None
        self._markdown_subfilter = None
        self._update_root_element_lang = None
        self._locale_format = None
        self._indent_empty_lines_in_string = None
        self._icu_sub_filter = None
        self.discriminator = None
        if html_sub_filter is not None:
            self.html_sub_filter = html_sub_filter
        if tag_regexp is not None:
            self.tag_regexp = tag_regexp
        if include_key_regexp is not None:
            self.include_key_regexp = include_key_regexp
        if exclude_value_regexp is not None:
            self.exclude_value_regexp = exclude_value_regexp
        if context_path is not None:
            self.context_path = context_path
        if context_key_path is not None:
            self.context_key_path = context_key_path
        if markdown_subfilter is not None:
            self.markdown_subfilter = markdown_subfilter
        if update_root_element_lang is not None:
            self.update_root_element_lang = update_root_element_lang
        if locale_format is not None:
            self.locale_format = locale_format
        if indent_empty_lines_in_string is not None:
            self.indent_empty_lines_in_string = indent_empty_lines_in_string
        if icu_sub_filter is not None:
            self.icu_sub_filter = icu_sub_filter

    @property
    def html_sub_filter(self):
        """Gets the html_sub_filter of this YamlSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The html_sub_filter of this YamlSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._html_sub_filter

    @html_sub_filter.setter
    def html_sub_filter(self, html_sub_filter):
        """Sets the html_sub_filter of this YamlSettingsDto.

        Default: false  # noqa: E501

        :param html_sub_filter: The html_sub_filter of this YamlSettingsDto.  # noqa: E501
        :type: bool
        """

        self._html_sub_filter = html_sub_filter

    @property
    def tag_regexp(self):
        """Gets the tag_regexp of this YamlSettingsDto.  # noqa: E501


        :return: The tag_regexp of this YamlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._tag_regexp

    @tag_regexp.setter
    def tag_regexp(self, tag_regexp):
        """Sets the tag_regexp of this YamlSettingsDto.


        :param tag_regexp: The tag_regexp of this YamlSettingsDto.  # noqa: E501
        :type: str
        """

        self._tag_regexp = tag_regexp

    @property
    def include_key_regexp(self):
        """Gets the include_key_regexp of this YamlSettingsDto.  # noqa: E501


        :return: The include_key_regexp of this YamlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._include_key_regexp

    @include_key_regexp.setter
    def include_key_regexp(self, include_key_regexp):
        """Sets the include_key_regexp of this YamlSettingsDto.


        :param include_key_regexp: The include_key_regexp of this YamlSettingsDto.  # noqa: E501
        :type: str
        """

        self._include_key_regexp = include_key_regexp

    @property
    def exclude_value_regexp(self):
        """Gets the exclude_value_regexp of this YamlSettingsDto.  # noqa: E501


        :return: The exclude_value_regexp of this YamlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._exclude_value_regexp

    @exclude_value_regexp.setter
    def exclude_value_regexp(self, exclude_value_regexp):
        """Sets the exclude_value_regexp of this YamlSettingsDto.


        :param exclude_value_regexp: The exclude_value_regexp of this YamlSettingsDto.  # noqa: E501
        :type: str
        """

        self._exclude_value_regexp = exclude_value_regexp

    @property
    def context_path(self):
        """Gets the context_path of this YamlSettingsDto.  # noqa: E501


        :return: The context_path of this YamlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._context_path

    @context_path.setter
    def context_path(self, context_path):
        """Sets the context_path of this YamlSettingsDto.


        :param context_path: The context_path of this YamlSettingsDto.  # noqa: E501
        :type: str
        """

        self._context_path = context_path

    @property
    def context_key_path(self):
        """Gets the context_key_path of this YamlSettingsDto.  # noqa: E501


        :return: The context_key_path of this YamlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._context_key_path

    @context_key_path.setter
    def context_key_path(self, context_key_path):
        """Sets the context_key_path of this YamlSettingsDto.


        :param context_key_path: The context_key_path of this YamlSettingsDto.  # noqa: E501
        :type: str
        """

        self._context_key_path = context_key_path

    @property
    def markdown_subfilter(self):
        """Gets the markdown_subfilter of this YamlSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The markdown_subfilter of this YamlSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._markdown_subfilter

    @markdown_subfilter.setter
    def markdown_subfilter(self, markdown_subfilter):
        """Sets the markdown_subfilter of this YamlSettingsDto.

        Default: false  # noqa: E501

        :param markdown_subfilter: The markdown_subfilter of this YamlSettingsDto.  # noqa: E501
        :type: bool
        """

        self._markdown_subfilter = markdown_subfilter

    @property
    def update_root_element_lang(self):
        """Gets the update_root_element_lang of this YamlSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The update_root_element_lang of this YamlSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._update_root_element_lang

    @update_root_element_lang.setter
    def update_root_element_lang(self, update_root_element_lang):
        """Sets the update_root_element_lang of this YamlSettingsDto.

        Default: false  # noqa: E501

        :param update_root_element_lang: The update_root_element_lang of this YamlSettingsDto.  # noqa: E501
        :type: bool
        """

        self._update_root_element_lang = update_root_element_lang

    @property
    def locale_format(self):
        """Gets the locale_format of this YamlSettingsDto.  # noqa: E501


        :return: The locale_format of this YamlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._locale_format

    @locale_format.setter
    def locale_format(self, locale_format):
        """Sets the locale_format of this YamlSettingsDto.


        :param locale_format: The locale_format of this YamlSettingsDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["MEMSOURCE", "RFC_5646", "ANDROID_QUALIFIER", "ANDROID_QUALIFIER_BCP"]  # noqa: E501
        if locale_format not in allowed_values:
            raise ValueError(
                "Invalid value for `locale_format` ({0}), must be one of {1}"  # noqa: E501
                .format(locale_format, allowed_values)
            )

        self._locale_format = locale_format

    @property
    def indent_empty_lines_in_string(self):
        """Gets the indent_empty_lines_in_string of this YamlSettingsDto.  # noqa: E501

        Default: true  # noqa: E501

        :return: The indent_empty_lines_in_string of this YamlSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._indent_empty_lines_in_string

    @indent_empty_lines_in_string.setter
    def indent_empty_lines_in_string(self, indent_empty_lines_in_string):
        """Sets the indent_empty_lines_in_string of this YamlSettingsDto.

        Default: true  # noqa: E501

        :param indent_empty_lines_in_string: The indent_empty_lines_in_string of this YamlSettingsDto.  # noqa: E501
        :type: bool
        """

        self._indent_empty_lines_in_string = indent_empty_lines_in_string

    @property
    def icu_sub_filter(self):
        """Gets the icu_sub_filter of this YamlSettingsDto.  # noqa: E501

        Default: `false`  # noqa: E501

        :return: The icu_sub_filter of this YamlSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._icu_sub_filter

    @icu_sub_filter.setter
    def icu_sub_filter(self, icu_sub_filter):
        """Sets the icu_sub_filter of this YamlSettingsDto.

        Default: `false`  # noqa: E501

        :param icu_sub_filter: The icu_sub_filter of this YamlSettingsDto.  # noqa: E501
        :type: bool
        """

        self._icu_sub_filter = icu_sub_filter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(YamlSettingsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, YamlSettingsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
