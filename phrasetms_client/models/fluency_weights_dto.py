# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FluencyWeightsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fluency': 'ToggleableWeightDto',
        'punctuation': 'ToggleableWeightDto',
        'spelling': 'ToggleableWeightDto',
        'grammar': 'ToggleableWeightDto',
        'grammatical_register': 'ToggleableWeightDto',
        'inconsistency': 'ToggleableWeightDto',
        'cross_reference': 'ToggleableWeightDto',
        'character_encoding': 'ToggleableWeightDto'
    }

    attribute_map = {
        'fluency': 'fluency',
        'punctuation': 'punctuation',
        'spelling': 'spelling',
        'grammar': 'grammar',
        'grammatical_register': 'grammaticalRegister',
        'inconsistency': 'inconsistency',
        'cross_reference': 'crossReference',
        'character_encoding': 'characterEncoding'
    }

    def __init__(self, fluency=None, punctuation=None, spelling=None, grammar=None, grammatical_register=None, inconsistency=None, cross_reference=None, character_encoding=None):  # noqa: E501
        """FluencyWeightsDto - a model defined in Swagger"""  # noqa: E501
        self._fluency = None
        self._punctuation = None
        self._spelling = None
        self._grammar = None
        self._grammatical_register = None
        self._inconsistency = None
        self._cross_reference = None
        self._character_encoding = None
        self.discriminator = None
        if fluency is not None:
            self.fluency = fluency
        if punctuation is not None:
            self.punctuation = punctuation
        if spelling is not None:
            self.spelling = spelling
        if grammar is not None:
            self.grammar = grammar
        if grammatical_register is not None:
            self.grammatical_register = grammatical_register
        if inconsistency is not None:
            self.inconsistency = inconsistency
        if cross_reference is not None:
            self.cross_reference = cross_reference
        if character_encoding is not None:
            self.character_encoding = character_encoding

    @property
    def fluency(self):
        """Gets the fluency of this FluencyWeightsDto.  # noqa: E501


        :return: The fluency of this FluencyWeightsDto.  # noqa: E501
        :rtype: ToggleableWeightDto
        """
        return self._fluency

    @fluency.setter
    def fluency(self, fluency):
        """Sets the fluency of this FluencyWeightsDto.


        :param fluency: The fluency of this FluencyWeightsDto.  # noqa: E501
        :type: ToggleableWeightDto
        """

        self._fluency = fluency

    @property
    def punctuation(self):
        """Gets the punctuation of this FluencyWeightsDto.  # noqa: E501


        :return: The punctuation of this FluencyWeightsDto.  # noqa: E501
        :rtype: ToggleableWeightDto
        """
        return self._punctuation

    @punctuation.setter
    def punctuation(self, punctuation):
        """Sets the punctuation of this FluencyWeightsDto.


        :param punctuation: The punctuation of this FluencyWeightsDto.  # noqa: E501
        :type: ToggleableWeightDto
        """

        self._punctuation = punctuation

    @property
    def spelling(self):
        """Gets the spelling of this FluencyWeightsDto.  # noqa: E501


        :return: The spelling of this FluencyWeightsDto.  # noqa: E501
        :rtype: ToggleableWeightDto
        """
        return self._spelling

    @spelling.setter
    def spelling(self, spelling):
        """Sets the spelling of this FluencyWeightsDto.


        :param spelling: The spelling of this FluencyWeightsDto.  # noqa: E501
        :type: ToggleableWeightDto
        """

        self._spelling = spelling

    @property
    def grammar(self):
        """Gets the grammar of this FluencyWeightsDto.  # noqa: E501


        :return: The grammar of this FluencyWeightsDto.  # noqa: E501
        :rtype: ToggleableWeightDto
        """
        return self._grammar

    @grammar.setter
    def grammar(self, grammar):
        """Sets the grammar of this FluencyWeightsDto.


        :param grammar: The grammar of this FluencyWeightsDto.  # noqa: E501
        :type: ToggleableWeightDto
        """

        self._grammar = grammar

    @property
    def grammatical_register(self):
        """Gets the grammatical_register of this FluencyWeightsDto.  # noqa: E501


        :return: The grammatical_register of this FluencyWeightsDto.  # noqa: E501
        :rtype: ToggleableWeightDto
        """
        return self._grammatical_register

    @grammatical_register.setter
    def grammatical_register(self, grammatical_register):
        """Sets the grammatical_register of this FluencyWeightsDto.


        :param grammatical_register: The grammatical_register of this FluencyWeightsDto.  # noqa: E501
        :type: ToggleableWeightDto
        """

        self._grammatical_register = grammatical_register

    @property
    def inconsistency(self):
        """Gets the inconsistency of this FluencyWeightsDto.  # noqa: E501


        :return: The inconsistency of this FluencyWeightsDto.  # noqa: E501
        :rtype: ToggleableWeightDto
        """
        return self._inconsistency

    @inconsistency.setter
    def inconsistency(self, inconsistency):
        """Sets the inconsistency of this FluencyWeightsDto.


        :param inconsistency: The inconsistency of this FluencyWeightsDto.  # noqa: E501
        :type: ToggleableWeightDto
        """

        self._inconsistency = inconsistency

    @property
    def cross_reference(self):
        """Gets the cross_reference of this FluencyWeightsDto.  # noqa: E501


        :return: The cross_reference of this FluencyWeightsDto.  # noqa: E501
        :rtype: ToggleableWeightDto
        """
        return self._cross_reference

    @cross_reference.setter
    def cross_reference(self, cross_reference):
        """Sets the cross_reference of this FluencyWeightsDto.


        :param cross_reference: The cross_reference of this FluencyWeightsDto.  # noqa: E501
        :type: ToggleableWeightDto
        """

        self._cross_reference = cross_reference

    @property
    def character_encoding(self):
        """Gets the character_encoding of this FluencyWeightsDto.  # noqa: E501


        :return: The character_encoding of this FluencyWeightsDto.  # noqa: E501
        :rtype: ToggleableWeightDto
        """
        return self._character_encoding

    @character_encoding.setter
    def character_encoding(self, character_encoding):
        """Sets the character_encoding of this FluencyWeightsDto.


        :param character_encoding: The character_encoding of this FluencyWeightsDto.  # noqa: E501
        :type: ToggleableWeightDto
        """

        self._character_encoding = character_encoding

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FluencyWeightsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FluencyWeightsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
