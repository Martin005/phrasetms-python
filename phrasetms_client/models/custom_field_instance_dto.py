# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomFieldInstanceDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uid': 'str',
        'custom_field': 'CustomFieldDto',
        'selected_options': 'list[CustomFieldOptionDto]',
        'value': 'str',
        'created_at': 'datetime',
        'created_by': 'UidReference',
        'updated_at': 'datetime',
        'updated_by': 'UidReference'
    }

    attribute_map = {
        'uid': 'uid',
        'custom_field': 'customField',
        'selected_options': 'selectedOptions',
        'value': 'value',
        'created_at': 'createdAt',
        'created_by': 'createdBy',
        'updated_at': 'updatedAt',
        'updated_by': 'updatedBy'
    }

    def __init__(self, uid=None, custom_field=None, selected_options=None, value=None, created_at=None, created_by=None, updated_at=None, updated_by=None):  # noqa: E501
        """CustomFieldInstanceDto - a model defined in Swagger"""  # noqa: E501
        self._uid = None
        self._custom_field = None
        self._selected_options = None
        self._value = None
        self._created_at = None
        self._created_by = None
        self._updated_at = None
        self._updated_by = None
        self.discriminator = None
        if uid is not None:
            self.uid = uid
        if custom_field is not None:
            self.custom_field = custom_field
        if selected_options is not None:
            self.selected_options = selected_options
        if value is not None:
            self.value = value
        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        if updated_at is not None:
            self.updated_at = updated_at
        if updated_by is not None:
            self.updated_by = updated_by

    @property
    def uid(self):
        """Gets the uid of this CustomFieldInstanceDto.  # noqa: E501


        :return: The uid of this CustomFieldInstanceDto.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this CustomFieldInstanceDto.


        :param uid: The uid of this CustomFieldInstanceDto.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def custom_field(self):
        """Gets the custom_field of this CustomFieldInstanceDto.  # noqa: E501


        :return: The custom_field of this CustomFieldInstanceDto.  # noqa: E501
        :rtype: CustomFieldDto
        """
        return self._custom_field

    @custom_field.setter
    def custom_field(self, custom_field):
        """Sets the custom_field of this CustomFieldInstanceDto.


        :param custom_field: The custom_field of this CustomFieldInstanceDto.  # noqa: E501
        :type: CustomFieldDto
        """

        self._custom_field = custom_field

    @property
    def selected_options(self):
        """Gets the selected_options of this CustomFieldInstanceDto.  # noqa: E501


        :return: The selected_options of this CustomFieldInstanceDto.  # noqa: E501
        :rtype: list[CustomFieldOptionDto]
        """
        return self._selected_options

    @selected_options.setter
    def selected_options(self, selected_options):
        """Sets the selected_options of this CustomFieldInstanceDto.


        :param selected_options: The selected_options of this CustomFieldInstanceDto.  # noqa: E501
        :type: list[CustomFieldOptionDto]
        """

        self._selected_options = selected_options

    @property
    def value(self):
        """Gets the value of this CustomFieldInstanceDto.  # noqa: E501


        :return: The value of this CustomFieldInstanceDto.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CustomFieldInstanceDto.


        :param value: The value of this CustomFieldInstanceDto.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def created_at(self):
        """Gets the created_at of this CustomFieldInstanceDto.  # noqa: E501


        :return: The created_at of this CustomFieldInstanceDto.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CustomFieldInstanceDto.


        :param created_at: The created_at of this CustomFieldInstanceDto.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this CustomFieldInstanceDto.  # noqa: E501


        :return: The created_by of this CustomFieldInstanceDto.  # noqa: E501
        :rtype: UidReference
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this CustomFieldInstanceDto.


        :param created_by: The created_by of this CustomFieldInstanceDto.  # noqa: E501
        :type: UidReference
        """

        self._created_by = created_by

    @property
    def updated_at(self):
        """Gets the updated_at of this CustomFieldInstanceDto.  # noqa: E501


        :return: The updated_at of this CustomFieldInstanceDto.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CustomFieldInstanceDto.


        :param updated_at: The updated_at of this CustomFieldInstanceDto.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this CustomFieldInstanceDto.  # noqa: E501


        :return: The updated_by of this CustomFieldInstanceDto.  # noqa: E501
        :rtype: UidReference
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this CustomFieldInstanceDto.


        :param updated_by: The updated_by of this CustomFieldInstanceDto.  # noqa: E501
        :type: UidReference
        """

        self._updated_by = updated_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomFieldInstanceDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomFieldInstanceDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
