# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt

class DiscountSettingsDto(BaseModel):
    """
    DiscountSettingsDto
    """
    repetition: Optional[Union[StrictFloat, StrictInt]] = None
    tm101: Optional[Union[StrictFloat, StrictInt]] = None
    tm100: Optional[Union[StrictFloat, StrictInt]] = None
    tm95: Optional[Union[StrictFloat, StrictInt]] = None
    tm85: Optional[Union[StrictFloat, StrictInt]] = None
    tm75: Optional[Union[StrictFloat, StrictInt]] = None
    tm50: Optional[Union[StrictFloat, StrictInt]] = None
    tm0: Optional[Union[StrictFloat, StrictInt]] = None
    mt100: Optional[Union[StrictFloat, StrictInt]] = None
    mt95: Optional[Union[StrictFloat, StrictInt]] = None
    mt85: Optional[Union[StrictFloat, StrictInt]] = None
    mt75: Optional[Union[StrictFloat, StrictInt]] = None
    mt50: Optional[Union[StrictFloat, StrictInt]] = None
    mt0: Optional[Union[StrictFloat, StrictInt]] = None
    nt100: Optional[Union[StrictFloat, StrictInt]] = None
    nt99: Optional[Union[StrictFloat, StrictInt]] = None
    nt85: Optional[Union[StrictFloat, StrictInt]] = None
    nt75: Optional[Union[StrictFloat, StrictInt]] = None
    nt50: Optional[Union[StrictFloat, StrictInt]] = None
    nt0: Optional[Union[StrictFloat, StrictInt]] = None
    if100: Optional[Union[StrictFloat, StrictInt]] = None
    if95: Optional[Union[StrictFloat, StrictInt]] = None
    if85: Optional[Union[StrictFloat, StrictInt]] = None
    if75: Optional[Union[StrictFloat, StrictInt]] = None
    if50: Optional[Union[StrictFloat, StrictInt]] = None
    if0: Optional[Union[StrictFloat, StrictInt]] = None
    __properties = ["repetition", "tm101", "tm100", "tm95", "tm85", "tm75", "tm50", "tm0", "mt100", "mt95", "mt85", "mt75", "mt50", "mt0", "nt100", "nt99", "nt85", "nt75", "nt50", "nt0", "if100", "if95", "if85", "if75", "if50", "if0"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DiscountSettingsDto:
        """Create an instance of DiscountSettingsDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DiscountSettingsDto:
        """Create an instance of DiscountSettingsDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DiscountSettingsDto.parse_obj(obj)

        _obj = DiscountSettingsDto.parse_obj({
            "repetition": obj.get("repetition"),
            "tm101": obj.get("tm101"),
            "tm100": obj.get("tm100"),
            "tm95": obj.get("tm95"),
            "tm85": obj.get("tm85"),
            "tm75": obj.get("tm75"),
            "tm50": obj.get("tm50"),
            "tm0": obj.get("tm0"),
            "mt100": obj.get("mt100"),
            "mt95": obj.get("mt95"),
            "mt85": obj.get("mt85"),
            "mt75": obj.get("mt75"),
            "mt50": obj.get("mt50"),
            "mt0": obj.get("mt0"),
            "nt100": obj.get("nt100"),
            "nt99": obj.get("nt99"),
            "nt85": obj.get("nt85"),
            "nt75": obj.get("nt75"),
            "nt50": obj.get("nt50"),
            "nt0": obj.get("nt0"),
            "if100": obj.get("if100"),
            "if95": obj.get("if95"),
            "if85": obj.get("if85"),
            "if75": obj.get("if75"),
            "if50": obj.get("if50"),
            "if0": obj.get("if0")
        })
        return _obj

