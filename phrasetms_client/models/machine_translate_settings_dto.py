# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from phrasetms_client.models import MachineTranslateSettingsLangsDto


class MachineTranslateSettingsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "uid": "str",
        "base_name": "str",
        "name": "str",
        "type": "str",
        "category": "str",
        "default_": "bool",
        "include_tags": "bool",
        "mt_quality_estimation": "bool",
        "enabled": "bool",
        "args": "dict(str, str)",
        "langs": "MachineTranslateSettingsLangsDto",
    }

    attribute_map = {
        "id": "id",
        "uid": "uid",
        "base_name": "baseName",
        "name": "name",
        "type": "type",
        "category": "category",
        "default_": "default_",
        "include_tags": "includeTags",
        "mt_quality_estimation": "mtQualityEstimation",
        "enabled": "enabled",
        "args": "args",
        "langs": "langs",
    }

    def __init__(
        self,
        id=None,
        uid=None,
        base_name=None,
        name=None,
        type=None,
        category=None,
        default_=None,
        include_tags=None,
        mt_quality_estimation=None,
        enabled=None,
        args=None,
        langs=None,
    ):  # noqa: E501
        """MachineTranslateSettingsDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._uid = None
        self._base_name = None
        self._name = None
        self._type = None
        self._category = None
        self._default_ = None
        self._include_tags = None
        self._mt_quality_estimation = None
        self._enabled = None
        self._args = None
        self._langs = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if uid is not None:
            self.uid = uid
        if base_name is not None:
            self.base_name = base_name
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if category is not None:
            self.category = category
        if default_ is not None:
            self.default_ = default_
        if include_tags is not None:
            self.include_tags = include_tags
        if mt_quality_estimation is not None:
            self.mt_quality_estimation = mt_quality_estimation
        if enabled is not None:
            self.enabled = enabled
        if args is not None:
            self.args = args
        if langs is not None:
            self.langs = langs

    @property
    def id(self) -> str:
        """Gets the id of this MachineTranslateSettingsDto.  # noqa: E501


        :return: The id of this MachineTranslateSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MachineTranslateSettingsDto.


        :param id: The id of this MachineTranslateSettingsDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def uid(self) -> str:
        """Gets the uid of this MachineTranslateSettingsDto.  # noqa: E501


        :return: The uid of this MachineTranslateSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this MachineTranslateSettingsDto.


        :param uid: The uid of this MachineTranslateSettingsDto.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def base_name(self) -> str:
        """Gets the base_name of this MachineTranslateSettingsDto.  # noqa: E501


        :return: The base_name of this MachineTranslateSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._base_name

    @base_name.setter
    def base_name(self, base_name):
        """Sets the base_name of this MachineTranslateSettingsDto.


        :param base_name: The base_name of this MachineTranslateSettingsDto.  # noqa: E501
        :type: str
        """

        self._base_name = base_name

    @property
    def name(self) -> str:
        """Gets the name of this MachineTranslateSettingsDto.  # noqa: E501


        :return: The name of this MachineTranslateSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MachineTranslateSettingsDto.


        :param name: The name of this MachineTranslateSettingsDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self) -> str:
        """Gets the type of this MachineTranslateSettingsDto.  # noqa: E501


        :return: The type of this MachineTranslateSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MachineTranslateSettingsDto.


        :param type: The type of this MachineTranslateSettingsDto.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def category(self) -> str:
        """Gets the category of this MachineTranslateSettingsDto.  # noqa: E501


        :return: The category of this MachineTranslateSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this MachineTranslateSettingsDto.


        :param category: The category of this MachineTranslateSettingsDto.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def default_(self) -> bool:
        """Gets the default_ of this MachineTranslateSettingsDto.  # noqa: E501


        :return: The default_ of this MachineTranslateSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._default_

    @default_.setter
    def default_(self, default_):
        """Sets the default_ of this MachineTranslateSettingsDto.


        :param default_: The default_ of this MachineTranslateSettingsDto.  # noqa: E501
        :type: bool
        """

        self._default_ = default_

    @property
    def include_tags(self) -> bool:
        """Gets the include_tags of this MachineTranslateSettingsDto.  # noqa: E501


        :return: The include_tags of this MachineTranslateSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._include_tags

    @include_tags.setter
    def include_tags(self, include_tags):
        """Sets the include_tags of this MachineTranslateSettingsDto.


        :param include_tags: The include_tags of this MachineTranslateSettingsDto.  # noqa: E501
        :type: bool
        """

        self._include_tags = include_tags

    @property
    def mt_quality_estimation(self) -> bool:
        """Gets the mt_quality_estimation of this MachineTranslateSettingsDto.  # noqa: E501


        :return: The mt_quality_estimation of this MachineTranslateSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._mt_quality_estimation

    @mt_quality_estimation.setter
    def mt_quality_estimation(self, mt_quality_estimation):
        """Sets the mt_quality_estimation of this MachineTranslateSettingsDto.


        :param mt_quality_estimation: The mt_quality_estimation of this MachineTranslateSettingsDto.  # noqa: E501
        :type: bool
        """

        self._mt_quality_estimation = mt_quality_estimation

    @property
    def enabled(self) -> bool:
        """Gets the enabled of this MachineTranslateSettingsDto.  # noqa: E501


        :return: The enabled of this MachineTranslateSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this MachineTranslateSettingsDto.


        :param enabled: The enabled of this MachineTranslateSettingsDto.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def args(self) -> dict(str, str):
        """Gets the args of this MachineTranslateSettingsDto.  # noqa: E501


        :return: The args of this MachineTranslateSettingsDto.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this MachineTranslateSettingsDto.


        :param args: The args of this MachineTranslateSettingsDto.  # noqa: E501
        :type: dict(str, str)
        """

        self._args = args

    @property
    def langs(self) -> MachineTranslateSettingsLangsDto:
        """Gets the langs of this MachineTranslateSettingsDto.  # noqa: E501


        :return: The langs of this MachineTranslateSettingsDto.  # noqa: E501
        :rtype: MachineTranslateSettingsLangsDto
        """
        return self._langs

    @langs.setter
    def langs(self, langs):
        """Sets the langs of this MachineTranslateSettingsDto.


        :param langs: The langs of this MachineTranslateSettingsDto.  # noqa: E501
        :type: MachineTranslateSettingsLangsDto
        """

        self._langs = langs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(MachineTranslateSettingsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MachineTranslateSettingsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
