# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FoldersFolderBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file': 'str',
        'source_file_name': 'str',
        'subfolder_name': 'str',
        'mime_type': 'str',
        'commit_message': 'str'
    }

    attribute_map = {
        'file': 'file',
        'source_file_name': 'sourceFileName',
        'subfolder_name': 'subfolderName',
        'mime_type': 'mimeType',
        'commit_message': 'commitMessage'
    }

    def __init__(self, file=None, source_file_name=None, subfolder_name=None, mime_type=None, commit_message=None):  # noqa: E501
        """FoldersFolderBody - a model defined in Swagger"""  # noqa: E501
        self._file = None
        self._source_file_name = None
        self._subfolder_name = None
        self._mime_type = None
        self._commit_message = None
        self.discriminator = None
        self.file = file
        if source_file_name is not None:
            self.source_file_name = source_file_name
        if subfolder_name is not None:
            self.subfolder_name = subfolder_name
        if mime_type is not None:
            self.mime_type = mime_type
        if commit_message is not None:
            self.commit_message = commit_message

    @property
    def file(self):
        """Gets the file of this FoldersFolderBody.  # noqa: E501

        Translated file to upload  # noqa: E501

        :return: The file of this FoldersFolderBody.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this FoldersFolderBody.

        Translated file to upload  # noqa: E501

        :param file: The file of this FoldersFolderBody.  # noqa: E501
        :type: str
        """
        if file is None:
            raise ValueError("Invalid value for `file`, must not be `None`")  # noqa: E501

        self._file = file

    @property
    def source_file_name(self):
        """Gets the source_file_name of this FoldersFolderBody.  # noqa: E501

        Name or ID of the original file  # noqa: E501

        :return: The source_file_name of this FoldersFolderBody.  # noqa: E501
        :rtype: str
        """
        return self._source_file_name

    @source_file_name.setter
    def source_file_name(self, source_file_name):
        """Sets the source_file_name of this FoldersFolderBody.

        Name or ID of the original file  # noqa: E501

        :param source_file_name: The source_file_name of this FoldersFolderBody.  # noqa: E501
        :type: str
        """

        self._source_file_name = source_file_name

    @property
    def subfolder_name(self):
        """Gets the subfolder_name of this FoldersFolderBody.  # noqa: E501

        Optional subfolder to upload the file to  # noqa: E501

        :return: The subfolder_name of this FoldersFolderBody.  # noqa: E501
        :rtype: str
        """
        return self._subfolder_name

    @subfolder_name.setter
    def subfolder_name(self, subfolder_name):
        """Sets the subfolder_name of this FoldersFolderBody.

        Optional subfolder to upload the file to  # noqa: E501

        :param subfolder_name: The subfolder_name of this FoldersFolderBody.  # noqa: E501
        :type: str
        """

        self._subfolder_name = subfolder_name

    @property
    def mime_type(self):
        """Gets the mime_type of this FoldersFolderBody.  # noqa: E501

        Mime type of the file to upload  # noqa: E501

        :return: The mime_type of this FoldersFolderBody.  # noqa: E501
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this FoldersFolderBody.

        Mime type of the file to upload  # noqa: E501

        :param mime_type: The mime_type of this FoldersFolderBody.  # noqa: E501
        :type: str
        """

        self._mime_type = mime_type

    @property
    def commit_message(self):
        """Gets the commit_message of this FoldersFolderBody.  # noqa: E501

        Commit message for upload to Git, etc.  # noqa: E501

        :return: The commit_message of this FoldersFolderBody.  # noqa: E501
        :rtype: str
        """
        return self._commit_message

    @commit_message.setter
    def commit_message(self, commit_message):
        """Sets the commit_message of this FoldersFolderBody.

        Commit message for upload to Git, etc.  # noqa: E501

        :param commit_message: The commit_message of this FoldersFolderBody.  # noqa: E501
        :type: str
        """

        self._commit_message = commit_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FoldersFolderBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FoldersFolderBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
