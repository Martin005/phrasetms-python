# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AutomatedProjectSettingsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "name": "str",
        "organization": "NameDto",
        "active": "bool",
        "source_lang": "str",
        "target_langs": "list[str]",
        "connector": "NameDto",
        "remote_folder": "str",
    }

    attribute_map = {
        "id": "id",
        "name": "name",
        "organization": "organization",
        "active": "active",
        "source_lang": "sourceLang",
        "target_langs": "targetLangs",
        "connector": "connector",
        "remote_folder": "remoteFolder",
    }

    def __init__(
        self,
        id=None,
        name=None,
        organization=None,
        active=None,
        source_lang=None,
        target_langs=None,
        connector=None,
        remote_folder=None,
    ):  # noqa: E501
        """AutomatedProjectSettingsDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._organization = None
        self._active = None
        self._source_lang = None
        self._target_langs = None
        self._connector = None
        self._remote_folder = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if organization is not None:
            self.organization = organization
        if active is not None:
            self.active = active
        if source_lang is not None:
            self.source_lang = source_lang
        if target_langs is not None:
            self.target_langs = target_langs
        if connector is not None:
            self.connector = connector
        if remote_folder is not None:
            self.remote_folder = remote_folder

    @property
    def id(self) -> str:
        """Gets the id of this AutomatedProjectSettingsDto.  # noqa: E501


        :return: The id of this AutomatedProjectSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AutomatedProjectSettingsDto.


        :param id: The id of this AutomatedProjectSettingsDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this AutomatedProjectSettingsDto.  # noqa: E501


        :return: The name of this AutomatedProjectSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AutomatedProjectSettingsDto.


        :param name: The name of this AutomatedProjectSettingsDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def organization(self) -> NameDto:
        """Gets the organization of this AutomatedProjectSettingsDto.  # noqa: E501


        :return: The organization of this AutomatedProjectSettingsDto.  # noqa: E501
        :rtype: NameDto
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this AutomatedProjectSettingsDto.


        :param organization: The organization of this AutomatedProjectSettingsDto.  # noqa: E501
        :type: NameDto
        """

        self._organization = organization

    @property
    def active(self) -> bool:
        """Gets the active of this AutomatedProjectSettingsDto.  # noqa: E501


        :return: The active of this AutomatedProjectSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this AutomatedProjectSettingsDto.


        :param active: The active of this AutomatedProjectSettingsDto.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def source_lang(self) -> str:
        """Gets the source_lang of this AutomatedProjectSettingsDto.  # noqa: E501


        :return: The source_lang of this AutomatedProjectSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._source_lang

    @source_lang.setter
    def source_lang(self, source_lang):
        """Sets the source_lang of this AutomatedProjectSettingsDto.


        :param source_lang: The source_lang of this AutomatedProjectSettingsDto.  # noqa: E501
        :type: str
        """

        self._source_lang = source_lang

    @property
    def target_langs(self) -> list[str]:
        """Gets the target_langs of this AutomatedProjectSettingsDto.  # noqa: E501


        :return: The target_langs of this AutomatedProjectSettingsDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._target_langs

    @target_langs.setter
    def target_langs(self, target_langs):
        """Sets the target_langs of this AutomatedProjectSettingsDto.


        :param target_langs: The target_langs of this AutomatedProjectSettingsDto.  # noqa: E501
        :type: list[str]
        """

        self._target_langs = target_langs

    @property
    def connector(self) -> NameDto:
        """Gets the connector of this AutomatedProjectSettingsDto.  # noqa: E501


        :return: The connector of this AutomatedProjectSettingsDto.  # noqa: E501
        :rtype: NameDto
        """
        return self._connector

    @connector.setter
    def connector(self, connector):
        """Sets the connector of this AutomatedProjectSettingsDto.


        :param connector: The connector of this AutomatedProjectSettingsDto.  # noqa: E501
        :type: NameDto
        """

        self._connector = connector

    @property
    def remote_folder(self) -> str:
        """Gets the remote_folder of this AutomatedProjectSettingsDto.  # noqa: E501


        :return: The remote_folder of this AutomatedProjectSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._remote_folder

    @remote_folder.setter
    def remote_folder(self, remote_folder):
        """Sets the remote_folder of this AutomatedProjectSettingsDto.


        :param remote_folder: The remote_folder of this AutomatedProjectSettingsDto.  # noqa: E501
        :type: str
        """

        self._remote_folder = remote_folder

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(AutomatedProjectSettingsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutomatedProjectSettingsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
