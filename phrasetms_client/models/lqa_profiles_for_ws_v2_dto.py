# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class LqaProfilesForWsV2Dto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"workflow_step": "IdReference", "lqa_profile": "UidReference"}

    attribute_map = {"workflow_step": "workflowStep", "lqa_profile": "lqaProfile"}

    def __init__(self, workflow_step=None, lqa_profile=None):  # noqa: E501
        """LqaProfilesForWsV2Dto - a model defined in Swagger"""  # noqa: E501
        self._workflow_step = None
        self._lqa_profile = None
        self.discriminator = None
        if workflow_step is not None:
            self.workflow_step = workflow_step
        if lqa_profile is not None:
            self.lqa_profile = lqa_profile

    @property
    def workflow_step(self) -> IdReference:
        """Gets the workflow_step of this LqaProfilesForWsV2Dto.  # noqa: E501


        :return: The workflow_step of this LqaProfilesForWsV2Dto.  # noqa: E501
        :rtype: IdReference
        """
        return self._workflow_step

    @workflow_step.setter
    def workflow_step(self, workflow_step):
        """Sets the workflow_step of this LqaProfilesForWsV2Dto.


        :param workflow_step: The workflow_step of this LqaProfilesForWsV2Dto.  # noqa: E501
        :type: IdReference
        """

        self._workflow_step = workflow_step

    @property
    def lqa_profile(self) -> UidReference:
        """Gets the lqa_profile of this LqaProfilesForWsV2Dto.  # noqa: E501


        :return: The lqa_profile of this LqaProfilesForWsV2Dto.  # noqa: E501
        :rtype: UidReference
        """
        return self._lqa_profile

    @lqa_profile.setter
    def lqa_profile(self, lqa_profile):
        """Sets the lqa_profile of this LqaProfilesForWsV2Dto.


        :param lqa_profile: The lqa_profile of this LqaProfilesForWsV2Dto.  # noqa: E501
        :type: UidReference
        """

        self._lqa_profile = lqa_profile

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(LqaProfilesForWsV2Dto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LqaProfilesForWsV2Dto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
