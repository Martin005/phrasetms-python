# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class FileDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "name": "str",
        "encoded_name": "str",
        "content_type": "str",
        "note": "str",
        "size": "int",
        "directory": "bool",
        "last_modified": "datetime",
        "selected": "bool",
        "error": "ErrorDto",
    }

    attribute_map = {
        "id": "id",
        "name": "name",
        "encoded_name": "encodedName",
        "content_type": "contentType",
        "note": "note",
        "size": "size",
        "directory": "directory",
        "last_modified": "lastModified",
        "selected": "selected",
        "error": "error",
    }

    def __init__(
        self,
        id=None,
        name=None,
        encoded_name=None,
        content_type=None,
        note=None,
        size=None,
        directory=None,
        last_modified=None,
        selected=None,
        error=None,
    ):  # noqa: E501
        """FileDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._encoded_name = None
        self._content_type = None
        self._note = None
        self._size = None
        self._directory = None
        self._last_modified = None
        self._selected = None
        self._error = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if encoded_name is not None:
            self.encoded_name = encoded_name
        if content_type is not None:
            self.content_type = content_type
        if note is not None:
            self.note = note
        if size is not None:
            self.size = size
        if directory is not None:
            self.directory = directory
        if last_modified is not None:
            self.last_modified = last_modified
        if selected is not None:
            self.selected = selected
        if error is not None:
            self.error = error

    @property
    def id(self) -> str:
        """Gets the id of this FileDto.  # noqa: E501


        :return: The id of this FileDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FileDto.


        :param id: The id of this FileDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this FileDto.  # noqa: E501


        :return: The name of this FileDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FileDto.


        :param name: The name of this FileDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def encoded_name(self) -> str:
        """Gets the encoded_name of this FileDto.  # noqa: E501


        :return: The encoded_name of this FileDto.  # noqa: E501
        :rtype: str
        """
        return self._encoded_name

    @encoded_name.setter
    def encoded_name(self, encoded_name):
        """Sets the encoded_name of this FileDto.


        :param encoded_name: The encoded_name of this FileDto.  # noqa: E501
        :type: str
        """

        self._encoded_name = encoded_name

    @property
    def content_type(self) -> str:
        """Gets the content_type of this FileDto.  # noqa: E501


        :return: The content_type of this FileDto.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this FileDto.


        :param content_type: The content_type of this FileDto.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def note(self) -> str:
        """Gets the note of this FileDto.  # noqa: E501


        :return: The note of this FileDto.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this FileDto.


        :param note: The note of this FileDto.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def size(self) -> int:
        """Gets the size of this FileDto.  # noqa: E501


        :return: The size of this FileDto.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this FileDto.


        :param size: The size of this FileDto.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def directory(self) -> bool:
        """Gets the directory of this FileDto.  # noqa: E501


        :return: The directory of this FileDto.  # noqa: E501
        :rtype: bool
        """
        return self._directory

    @directory.setter
    def directory(self, directory):
        """Sets the directory of this FileDto.


        :param directory: The directory of this FileDto.  # noqa: E501
        :type: bool
        """

        self._directory = directory

    @property
    def last_modified(self) -> datetime:
        """Gets the last_modified of this FileDto.  # noqa: E501


        :return: The last_modified of this FileDto.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this FileDto.


        :param last_modified: The last_modified of this FileDto.  # noqa: E501
        :type: datetime
        """

        self._last_modified = last_modified

    @property
    def selected(self) -> bool:
        """Gets the selected of this FileDto.  # noqa: E501


        :return: The selected of this FileDto.  # noqa: E501
        :rtype: bool
        """
        return self._selected

    @selected.setter
    def selected(self, selected):
        """Sets the selected of this FileDto.


        :param selected: The selected of this FileDto.  # noqa: E501
        :type: bool
        """

        self._selected = selected

    @property
    def error(self) -> ErrorDto:
        """Gets the error of this FileDto.  # noqa: E501


        :return: The error of this FileDto.  # noqa: E501
        :rtype: ErrorDto
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this FileDto.


        :param error: The error of this FileDto.  # noqa: E501
        :type: ErrorDto
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(FileDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
