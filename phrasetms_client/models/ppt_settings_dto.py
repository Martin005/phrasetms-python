# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PptSettingsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hidden_slides': 'bool',
        'other': 'bool',
        'notes': 'bool',
        'master_slides': 'bool'
    }

    attribute_map = {
        'hidden_slides': 'hiddenSlides',
        'other': 'other',
        'notes': 'notes',
        'master_slides': 'masterSlides'
    }

    def __init__(self, hidden_slides=None, other=None, notes=None, master_slides=None):  # noqa: E501
        """PptSettingsDto - a model defined in Swagger"""  # noqa: E501
        self._hidden_slides = None
        self._other = None
        self._notes = None
        self._master_slides = None
        self.discriminator = None
        if hidden_slides is not None:
            self.hidden_slides = hidden_slides
        if other is not None:
            self.other = other
        if notes is not None:
            self.notes = notes
        if master_slides is not None:
            self.master_slides = master_slides

    @property
    def hidden_slides(self):
        """Gets the hidden_slides of this PptSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The hidden_slides of this PptSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._hidden_slides

    @hidden_slides.setter
    def hidden_slides(self, hidden_slides):
        """Sets the hidden_slides of this PptSettingsDto.

        Default: false  # noqa: E501

        :param hidden_slides: The hidden_slides of this PptSettingsDto.  # noqa: E501
        :type: bool
        """

        self._hidden_slides = hidden_slides

    @property
    def other(self):
        """Gets the other of this PptSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The other of this PptSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._other

    @other.setter
    def other(self, other):
        """Sets the other of this PptSettingsDto.

        Default: false  # noqa: E501

        :param other: The other of this PptSettingsDto.  # noqa: E501
        :type: bool
        """

        self._other = other

    @property
    def notes(self):
        """Gets the notes of this PptSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The notes of this PptSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this PptSettingsDto.

        Default: false  # noqa: E501

        :param notes: The notes of this PptSettingsDto.  # noqa: E501
        :type: bool
        """

        self._notes = notes

    @property
    def master_slides(self):
        """Gets the master_slides of this PptSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The master_slides of this PptSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._master_slides

    @master_slides.setter
    def master_slides(self, master_slides):
        """Sets the master_slides of this PptSettingsDto.

        Default: false  # noqa: E501

        :param master_slides: The master_slides of this PptSettingsDto.  # noqa: E501
        :type: bool
        """

        self._master_slides = master_slides

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PptSettingsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PptSettingsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
