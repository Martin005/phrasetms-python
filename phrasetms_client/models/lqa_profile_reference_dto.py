# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime

from pydantic import BaseModel, Field, StrictBool, StrictStr
from phrasetms_client.models.uid_reference import UidReference
from phrasetms_client.models.user_reference import UserReference

class LqaProfileReferenceDto(BaseModel):
    """
    LqaProfileReferenceDto
    """
    uid: StrictStr = Field(..., description="UID of the profile")
    name: StrictStr = Field(..., description="Name of the profile")
    is_default: StrictBool = Field(..., alias="isDefault", description="If profile is set as default for organization")
    created_by: UserReference = Field(..., alias="createdBy")
    date_created: datetime = Field(..., alias="dateCreated", description="When profile was created")
    organization: UidReference = Field(...)
    __properties = ["uid", "name", "isDefault", "createdBy", "dateCreated", "organization"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LqaProfileReferenceDto:
        """Create an instance of LqaProfileReferenceDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['createdBy'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict['organization'] = self.organization.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LqaProfileReferenceDto:
        """Create an instance of LqaProfileReferenceDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LqaProfileReferenceDto.parse_obj(obj)

        _obj = LqaProfileReferenceDto.parse_obj({
            "uid": obj.get("uid"),
            "name": obj.get("name"),
            "is_default": obj.get("isDefault"),
            "created_by": UserReference.from_dict(obj.get("createdBy")) if obj.get("createdBy") is not None else None,
            "date_created": obj.get("dateCreated"),
            "organization": UidReference.from_dict(obj.get("organization")) if obj.get("organization") is not None else None
        })
        return _obj

