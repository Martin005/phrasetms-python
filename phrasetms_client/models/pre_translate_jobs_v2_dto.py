# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from phrasetms_client.models import PreTranslateJobSettingsDto, UidReference


class PreTranslateJobsV2Dto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "jobs": "list[UidReference]",
        "segment_filters": "list[str]",
        "use_project_pre_translate_settings": "bool",
        "callback_url": "str",
        "pre_translate_settings": "PreTranslateJobSettingsDto",
    }

    attribute_map = {
        "jobs": "jobs",
        "segment_filters": "segmentFilters",
        "use_project_pre_translate_settings": "useProjectPreTranslateSettings",
        "callback_url": "callbackUrl",
        "pre_translate_settings": "preTranslateSettings",
    }

    def __init__(
        self,
        jobs=None,
        segment_filters=None,
        use_project_pre_translate_settings=None,
        callback_url=None,
        pre_translate_settings=None,
    ):  # noqa: E501
        """PreTranslateJobsV2Dto - a model defined in Swagger"""  # noqa: E501
        self._jobs = None
        self._segment_filters = None
        self._use_project_pre_translate_settings = None
        self._callback_url = None
        self._pre_translate_settings = None
        self.discriminator = None
        self.jobs = jobs
        if segment_filters is not None:
            self.segment_filters = segment_filters
        if use_project_pre_translate_settings is not None:
            self.use_project_pre_translate_settings = use_project_pre_translate_settings
        if callback_url is not None:
            self.callback_url = callback_url
        if pre_translate_settings is not None:
            self.pre_translate_settings = pre_translate_settings

    @property
    def jobs(self) -> list[UidReference]:
        """Gets the jobs of this PreTranslateJobsV2Dto.  # noqa: E501

        Jobs to be pre-translated  # noqa: E501

        :return: The jobs of this PreTranslateJobsV2Dto.  # noqa: E501
        :rtype: list[UidReference]
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs):
        """Sets the jobs of this PreTranslateJobsV2Dto.

        Jobs to be pre-translated  # noqa: E501

        :param jobs: The jobs of this PreTranslateJobsV2Dto.  # noqa: E501
        :type: list[UidReference]
        """
        if jobs is None:
            raise ValueError(
                "Invalid value for `jobs`, must not be `None`"
            )  # noqa: E501

        self._jobs = jobs

    @property
    def segment_filters(self) -> list[str]:
        """Gets the segment_filters of this PreTranslateJobsV2Dto.  # noqa: E501


        :return: The segment_filters of this PreTranslateJobsV2Dto.  # noqa: E501
        :rtype: list[str]
        """
        return self._segment_filters

    @segment_filters.setter
    def segment_filters(self, segment_filters):
        """Sets the segment_filters of this PreTranslateJobsV2Dto.


        :param segment_filters: The segment_filters of this PreTranslateJobsV2Dto.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["LOCKED", "NOT_LOCKED"]  # noqa: E501
        if not set(segment_filters).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `segment_filters` [{0}], must be a subset of [{1}]".format(  # noqa: E501
                    ", ".join(
                        map(str, set(segment_filters) - set(allowed_values))
                    ),  # noqa: E501
                    ", ".join(map(str, allowed_values)),
                )
            )

        self._segment_filters = segment_filters

    @property
    def use_project_pre_translate_settings(self) -> bool:
        """Gets the use_project_pre_translate_settings of this PreTranslateJobsV2Dto.  # noqa: E501

        If pre-translate settings from project should be used. If true, preTranslateSettings values are ignored. Default: false  # noqa: E501

        :return: The use_project_pre_translate_settings of this PreTranslateJobsV2Dto.  # noqa: E501
        :rtype: bool
        """
        return self._use_project_pre_translate_settings

    @use_project_pre_translate_settings.setter
    def use_project_pre_translate_settings(self, use_project_pre_translate_settings):
        """Sets the use_project_pre_translate_settings of this PreTranslateJobsV2Dto.

        If pre-translate settings from project should be used. If true, preTranslateSettings values are ignored. Default: false  # noqa: E501

        :param use_project_pre_translate_settings: The use_project_pre_translate_settings of this PreTranslateJobsV2Dto.  # noqa: E501
        :type: bool
        """

        self._use_project_pre_translate_settings = use_project_pre_translate_settings

    @property
    def callback_url(self) -> str:
        """Gets the callback_url of this PreTranslateJobsV2Dto.  # noqa: E501


        :return: The callback_url of this PreTranslateJobsV2Dto.  # noqa: E501
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this PreTranslateJobsV2Dto.


        :param callback_url: The callback_url of this PreTranslateJobsV2Dto.  # noqa: E501
        :type: str
        """

        self._callback_url = callback_url

    @property
    def pre_translate_settings(self) -> PreTranslateJobSettingsDto:
        """Gets the pre_translate_settings of this PreTranslateJobsV2Dto.  # noqa: E501


        :return: The pre_translate_settings of this PreTranslateJobsV2Dto.  # noqa: E501
        :rtype: PreTranslateJobSettingsDto
        """
        return self._pre_translate_settings

    @pre_translate_settings.setter
    def pre_translate_settings(self, pre_translate_settings):
        """Sets the pre_translate_settings of this PreTranslateJobsV2Dto.


        :param pre_translate_settings: The pre_translate_settings of this PreTranslateJobsV2Dto.  # noqa: E501
        :type: PreTranslateJobSettingsDto
        """

        self._pre_translate_settings = pre_translate_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(PreTranslateJobsV2Dto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PreTranslateJobsV2Dto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
