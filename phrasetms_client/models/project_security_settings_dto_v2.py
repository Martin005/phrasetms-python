# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from phrasetms_client.models import VendorSecuritySettingsDto


class ProjectSecuritySettingsDtoV2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "download_enabled": "bool",
        "web_editor_enabled_for_linguists": "bool",
        "show_user_data_to_linguists": "bool",
        "email_notifications": "bool",
        "strict_workflow_finish": "bool",
        "use_vendors": "bool",
        "linguists_may_edit_locked_segments": "bool",
        "users_may_set_auto_propagation": "bool",
        "allow_loading_external_content_in_editors": "bool",
        "allow_loading_iframes": "bool",
        "linguists_may_edit_source": "bool",
        "linguists_may_edit_tag_content": "bool",
        "linguists_may_download_lqa_report": "bool",
        "usernames_displayed_in_lqa_report": "bool",
        "user_may_set_instant_qa": "bool",
        "trigger_webhooks": "bool",
        "vendors": "VendorSecuritySettingsDto",
        "allowed_domains": "list[str]",
    }

    attribute_map = {
        "download_enabled": "downloadEnabled",
        "web_editor_enabled_for_linguists": "webEditorEnabledForLinguists",
        "show_user_data_to_linguists": "showUserDataToLinguists",
        "email_notifications": "emailNotifications",
        "strict_workflow_finish": "strictWorkflowFinish",
        "use_vendors": "useVendors",
        "linguists_may_edit_locked_segments": "linguistsMayEditLockedSegments",
        "users_may_set_auto_propagation": "usersMaySetAutoPropagation",
        "allow_loading_external_content_in_editors": "allowLoadingExternalContentInEditors",
        "allow_loading_iframes": "allowLoadingIframes",
        "linguists_may_edit_source": "linguistsMayEditSource",
        "linguists_may_edit_tag_content": "linguistsMayEditTagContent",
        "linguists_may_download_lqa_report": "linguistsMayDownloadLqaReport",
        "usernames_displayed_in_lqa_report": "usernamesDisplayedInLqaReport",
        "user_may_set_instant_qa": "userMaySetInstantQA",
        "trigger_webhooks": "triggerWebhooks",
        "vendors": "vendors",
        "allowed_domains": "allowedDomains",
    }

    def __init__(
        self,
        download_enabled=None,
        web_editor_enabled_for_linguists=None,
        show_user_data_to_linguists=None,
        email_notifications=None,
        strict_workflow_finish=None,
        use_vendors=None,
        linguists_may_edit_locked_segments=None,
        users_may_set_auto_propagation=None,
        allow_loading_external_content_in_editors=None,
        allow_loading_iframes=None,
        linguists_may_edit_source=None,
        linguists_may_edit_tag_content=None,
        linguists_may_download_lqa_report=None,
        usernames_displayed_in_lqa_report=None,
        user_may_set_instant_qa=None,
        trigger_webhooks=None,
        vendors=None,
        allowed_domains=None,
    ):  # noqa: E501
        """ProjectSecuritySettingsDtoV2 - a model defined in Swagger"""  # noqa: E501
        self._download_enabled = None
        self._web_editor_enabled_for_linguists = None
        self._show_user_data_to_linguists = None
        self._email_notifications = None
        self._strict_workflow_finish = None
        self._use_vendors = None
        self._linguists_may_edit_locked_segments = None
        self._users_may_set_auto_propagation = None
        self._allow_loading_external_content_in_editors = None
        self._allow_loading_iframes = None
        self._linguists_may_edit_source = None
        self._linguists_may_edit_tag_content = None
        self._linguists_may_download_lqa_report = None
        self._usernames_displayed_in_lqa_report = None
        self._user_may_set_instant_qa = None
        self._trigger_webhooks = None
        self._vendors = None
        self._allowed_domains = None
        self.discriminator = None
        if download_enabled is not None:
            self.download_enabled = download_enabled
        if web_editor_enabled_for_linguists is not None:
            self.web_editor_enabled_for_linguists = web_editor_enabled_for_linguists
        if show_user_data_to_linguists is not None:
            self.show_user_data_to_linguists = show_user_data_to_linguists
        if email_notifications is not None:
            self.email_notifications = email_notifications
        if strict_workflow_finish is not None:
            self.strict_workflow_finish = strict_workflow_finish
        if use_vendors is not None:
            self.use_vendors = use_vendors
        if linguists_may_edit_locked_segments is not None:
            self.linguists_may_edit_locked_segments = linguists_may_edit_locked_segments
        if users_may_set_auto_propagation is not None:
            self.users_may_set_auto_propagation = users_may_set_auto_propagation
        if allow_loading_external_content_in_editors is not None:
            self.allow_loading_external_content_in_editors = (
                allow_loading_external_content_in_editors
            )
        if allow_loading_iframes is not None:
            self.allow_loading_iframes = allow_loading_iframes
        if linguists_may_edit_source is not None:
            self.linguists_may_edit_source = linguists_may_edit_source
        if linguists_may_edit_tag_content is not None:
            self.linguists_may_edit_tag_content = linguists_may_edit_tag_content
        if linguists_may_download_lqa_report is not None:
            self.linguists_may_download_lqa_report = linguists_may_download_lqa_report
        if usernames_displayed_in_lqa_report is not None:
            self.usernames_displayed_in_lqa_report = usernames_displayed_in_lqa_report
        if user_may_set_instant_qa is not None:
            self.user_may_set_instant_qa = user_may_set_instant_qa
        if trigger_webhooks is not None:
            self.trigger_webhooks = trigger_webhooks
        if vendors is not None:
            self.vendors = vendors
        if allowed_domains is not None:
            self.allowed_domains = allowed_domains

    @property
    def download_enabled(self) -> bool:
        """Gets the download_enabled of this ProjectSecuritySettingsDtoV2.  # noqa: E501


        :return: The download_enabled of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :rtype: bool
        """
        return self._download_enabled

    @download_enabled.setter
    def download_enabled(self, download_enabled):
        """Sets the download_enabled of this ProjectSecuritySettingsDtoV2.


        :param download_enabled: The download_enabled of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :type: bool
        """

        self._download_enabled = download_enabled

    @property
    def web_editor_enabled_for_linguists(self) -> bool:
        """Gets the web_editor_enabled_for_linguists of this ProjectSecuritySettingsDtoV2.  # noqa: E501


        :return: The web_editor_enabled_for_linguists of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :rtype: bool
        """
        return self._web_editor_enabled_for_linguists

    @web_editor_enabled_for_linguists.setter
    def web_editor_enabled_for_linguists(self, web_editor_enabled_for_linguists):
        """Sets the web_editor_enabled_for_linguists of this ProjectSecuritySettingsDtoV2.


        :param web_editor_enabled_for_linguists: The web_editor_enabled_for_linguists of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :type: bool
        """

        self._web_editor_enabled_for_linguists = web_editor_enabled_for_linguists

    @property
    def show_user_data_to_linguists(self) -> bool:
        """Gets the show_user_data_to_linguists of this ProjectSecuritySettingsDtoV2.  # noqa: E501


        :return: The show_user_data_to_linguists of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :rtype: bool
        """
        return self._show_user_data_to_linguists

    @show_user_data_to_linguists.setter
    def show_user_data_to_linguists(self, show_user_data_to_linguists):
        """Sets the show_user_data_to_linguists of this ProjectSecuritySettingsDtoV2.


        :param show_user_data_to_linguists: The show_user_data_to_linguists of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :type: bool
        """

        self._show_user_data_to_linguists = show_user_data_to_linguists

    @property
    def email_notifications(self) -> bool:
        """Gets the email_notifications of this ProjectSecuritySettingsDtoV2.  # noqa: E501


        :return: The email_notifications of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :rtype: bool
        """
        return self._email_notifications

    @email_notifications.setter
    def email_notifications(self, email_notifications):
        """Sets the email_notifications of this ProjectSecuritySettingsDtoV2.


        :param email_notifications: The email_notifications of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :type: bool
        """

        self._email_notifications = email_notifications

    @property
    def strict_workflow_finish(self) -> bool:
        """Gets the strict_workflow_finish of this ProjectSecuritySettingsDtoV2.  # noqa: E501


        :return: The strict_workflow_finish of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :rtype: bool
        """
        return self._strict_workflow_finish

    @strict_workflow_finish.setter
    def strict_workflow_finish(self, strict_workflow_finish):
        """Sets the strict_workflow_finish of this ProjectSecuritySettingsDtoV2.


        :param strict_workflow_finish: The strict_workflow_finish of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :type: bool
        """

        self._strict_workflow_finish = strict_workflow_finish

    @property
    def use_vendors(self) -> bool:
        """Gets the use_vendors of this ProjectSecuritySettingsDtoV2.  # noqa: E501


        :return: The use_vendors of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :rtype: bool
        """
        return self._use_vendors

    @use_vendors.setter
    def use_vendors(self, use_vendors):
        """Sets the use_vendors of this ProjectSecuritySettingsDtoV2.


        :param use_vendors: The use_vendors of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :type: bool
        """

        self._use_vendors = use_vendors

    @property
    def linguists_may_edit_locked_segments(self) -> bool:
        """Gets the linguists_may_edit_locked_segments of this ProjectSecuritySettingsDtoV2.  # noqa: E501


        :return: The linguists_may_edit_locked_segments of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :rtype: bool
        """
        return self._linguists_may_edit_locked_segments

    @linguists_may_edit_locked_segments.setter
    def linguists_may_edit_locked_segments(self, linguists_may_edit_locked_segments):
        """Sets the linguists_may_edit_locked_segments of this ProjectSecuritySettingsDtoV2.


        :param linguists_may_edit_locked_segments: The linguists_may_edit_locked_segments of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :type: bool
        """

        self._linguists_may_edit_locked_segments = linguists_may_edit_locked_segments

    @property
    def users_may_set_auto_propagation(self) -> bool:
        """Gets the users_may_set_auto_propagation of this ProjectSecuritySettingsDtoV2.  # noqa: E501


        :return: The users_may_set_auto_propagation of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :rtype: bool
        """
        return self._users_may_set_auto_propagation

    @users_may_set_auto_propagation.setter
    def users_may_set_auto_propagation(self, users_may_set_auto_propagation):
        """Sets the users_may_set_auto_propagation of this ProjectSecuritySettingsDtoV2.


        :param users_may_set_auto_propagation: The users_may_set_auto_propagation of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :type: bool
        """

        self._users_may_set_auto_propagation = users_may_set_auto_propagation

    @property
    def allow_loading_external_content_in_editors(self) -> bool:
        """Gets the allow_loading_external_content_in_editors of this ProjectSecuritySettingsDtoV2.  # noqa: E501


        :return: The allow_loading_external_content_in_editors of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :rtype: bool
        """
        return self._allow_loading_external_content_in_editors

    @allow_loading_external_content_in_editors.setter
    def allow_loading_external_content_in_editors(
        self, allow_loading_external_content_in_editors
    ):
        """Sets the allow_loading_external_content_in_editors of this ProjectSecuritySettingsDtoV2.


        :param allow_loading_external_content_in_editors: The allow_loading_external_content_in_editors of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :type: bool
        """

        self._allow_loading_external_content_in_editors = (
            allow_loading_external_content_in_editors
        )

    @property
    def allow_loading_iframes(self) -> bool:
        """Gets the allow_loading_iframes of this ProjectSecuritySettingsDtoV2.  # noqa: E501


        :return: The allow_loading_iframes of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :rtype: bool
        """
        return self._allow_loading_iframes

    @allow_loading_iframes.setter
    def allow_loading_iframes(self, allow_loading_iframes):
        """Sets the allow_loading_iframes of this ProjectSecuritySettingsDtoV2.


        :param allow_loading_iframes: The allow_loading_iframes of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :type: bool
        """

        self._allow_loading_iframes = allow_loading_iframes

    @property
    def linguists_may_edit_source(self) -> bool:
        """Gets the linguists_may_edit_source of this ProjectSecuritySettingsDtoV2.  # noqa: E501


        :return: The linguists_may_edit_source of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :rtype: bool
        """
        return self._linguists_may_edit_source

    @linguists_may_edit_source.setter
    def linguists_may_edit_source(self, linguists_may_edit_source):
        """Sets the linguists_may_edit_source of this ProjectSecuritySettingsDtoV2.


        :param linguists_may_edit_source: The linguists_may_edit_source of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :type: bool
        """

        self._linguists_may_edit_source = linguists_may_edit_source

    @property
    def linguists_may_edit_tag_content(self) -> bool:
        """Gets the linguists_may_edit_tag_content of this ProjectSecuritySettingsDtoV2.  # noqa: E501


        :return: The linguists_may_edit_tag_content of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :rtype: bool
        """
        return self._linguists_may_edit_tag_content

    @linguists_may_edit_tag_content.setter
    def linguists_may_edit_tag_content(self, linguists_may_edit_tag_content):
        """Sets the linguists_may_edit_tag_content of this ProjectSecuritySettingsDtoV2.


        :param linguists_may_edit_tag_content: The linguists_may_edit_tag_content of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :type: bool
        """

        self._linguists_may_edit_tag_content = linguists_may_edit_tag_content

    @property
    def linguists_may_download_lqa_report(self) -> bool:
        """Gets the linguists_may_download_lqa_report of this ProjectSecuritySettingsDtoV2.  # noqa: E501


        :return: The linguists_may_download_lqa_report of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :rtype: bool
        """
        return self._linguists_may_download_lqa_report

    @linguists_may_download_lqa_report.setter
    def linguists_may_download_lqa_report(self, linguists_may_download_lqa_report):
        """Sets the linguists_may_download_lqa_report of this ProjectSecuritySettingsDtoV2.


        :param linguists_may_download_lqa_report: The linguists_may_download_lqa_report of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :type: bool
        """

        self._linguists_may_download_lqa_report = linguists_may_download_lqa_report

    @property
    def usernames_displayed_in_lqa_report(self) -> bool:
        """Gets the usernames_displayed_in_lqa_report of this ProjectSecuritySettingsDtoV2.  # noqa: E501


        :return: The usernames_displayed_in_lqa_report of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :rtype: bool
        """
        return self._usernames_displayed_in_lqa_report

    @usernames_displayed_in_lqa_report.setter
    def usernames_displayed_in_lqa_report(self, usernames_displayed_in_lqa_report):
        """Sets the usernames_displayed_in_lqa_report of this ProjectSecuritySettingsDtoV2.


        :param usernames_displayed_in_lqa_report: The usernames_displayed_in_lqa_report of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :type: bool
        """

        self._usernames_displayed_in_lqa_report = usernames_displayed_in_lqa_report

    @property
    def user_may_set_instant_qa(self) -> bool:
        """Gets the user_may_set_instant_qa of this ProjectSecuritySettingsDtoV2.  # noqa: E501


        :return: The user_may_set_instant_qa of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :rtype: bool
        """
        return self._user_may_set_instant_qa

    @user_may_set_instant_qa.setter
    def user_may_set_instant_qa(self, user_may_set_instant_qa):
        """Sets the user_may_set_instant_qa of this ProjectSecuritySettingsDtoV2.


        :param user_may_set_instant_qa: The user_may_set_instant_qa of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :type: bool
        """

        self._user_may_set_instant_qa = user_may_set_instant_qa

    @property
    def trigger_webhooks(self) -> bool:
        """Gets the trigger_webhooks of this ProjectSecuritySettingsDtoV2.  # noqa: E501


        :return: The trigger_webhooks of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :rtype: bool
        """
        return self._trigger_webhooks

    @trigger_webhooks.setter
    def trigger_webhooks(self, trigger_webhooks):
        """Sets the trigger_webhooks of this ProjectSecuritySettingsDtoV2.


        :param trigger_webhooks: The trigger_webhooks of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :type: bool
        """

        self._trigger_webhooks = trigger_webhooks

    @property
    def vendors(self) -> VendorSecuritySettingsDto:
        """Gets the vendors of this ProjectSecuritySettingsDtoV2.  # noqa: E501


        :return: The vendors of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :rtype: VendorSecuritySettingsDto
        """
        return self._vendors

    @vendors.setter
    def vendors(self, vendors):
        """Sets the vendors of this ProjectSecuritySettingsDtoV2.


        :param vendors: The vendors of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :type: VendorSecuritySettingsDto
        """

        self._vendors = vendors

    @property
    def allowed_domains(self) -> list[str]:
        """Gets the allowed_domains of this ProjectSecuritySettingsDtoV2.  # noqa: E501


        :return: The allowed_domains of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_domains

    @allowed_domains.setter
    def allowed_domains(self, allowed_domains):
        """Sets the allowed_domains of this ProjectSecuritySettingsDtoV2.


        :param allowed_domains: The allowed_domains of this ProjectSecuritySettingsDtoV2.  # noqa: E501
        :type: list[str]
        """

        self._allowed_domains = allowed_domains

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ProjectSecuritySettingsDtoV2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectSecuritySettingsDtoV2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
