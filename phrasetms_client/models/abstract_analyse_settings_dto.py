# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AbstractAnalyseSettingsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "type": "str",
        "include_confirmed_segments": "bool",
        "include_numbers": "bool",
        "include_locked_segments": "bool",
        "count_source_units": "bool",
        "include_trans_memory": "bool",
        "naming_pattern": "str",
        "analyze_by_language": "bool",
        "analyze_by_provider": "bool",
        "allow_automatic_post_analysis": "bool",
    }

    attribute_map = {
        "type": "type",
        "include_confirmed_segments": "includeConfirmedSegments",
        "include_numbers": "includeNumbers",
        "include_locked_segments": "includeLockedSegments",
        "count_source_units": "countSourceUnits",
        "include_trans_memory": "includeTransMemory",
        "naming_pattern": "namingPattern",
        "analyze_by_language": "analyzeByLanguage",
        "analyze_by_provider": "analyzeByProvider",
        "allow_automatic_post_analysis": "allowAutomaticPostAnalysis",
    }

    discriminator_value_class_map = {
        "PostAnalyse": "PostAnalyse",
        "PreAnalyse": "PreAnalyse",
        "PreAnalyseTarget, Compare": "PreAnalyseTargetCompare",
    }

    def __init__(
        self,
        type=None,
        include_confirmed_segments=None,
        include_numbers=None,
        include_locked_segments=None,
        count_source_units=None,
        include_trans_memory=None,
        naming_pattern=None,
        analyze_by_language=None,
        analyze_by_provider=None,
        allow_automatic_post_analysis=None,
    ):  # noqa: E501
        """AbstractAnalyseSettingsDto - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._include_confirmed_segments = None
        self._include_numbers = None
        self._include_locked_segments = None
        self._count_source_units = None
        self._include_trans_memory = None
        self._naming_pattern = None
        self._analyze_by_language = None
        self._analyze_by_provider = None
        self._allow_automatic_post_analysis = None
        self.discriminator = "type"
        if type is not None:
            self.type = type
        if include_confirmed_segments is not None:
            self.include_confirmed_segments = include_confirmed_segments
        if include_numbers is not None:
            self.include_numbers = include_numbers
        if include_locked_segments is not None:
            self.include_locked_segments = include_locked_segments
        if count_source_units is not None:
            self.count_source_units = count_source_units
        if include_trans_memory is not None:
            self.include_trans_memory = include_trans_memory
        if naming_pattern is not None:
            self.naming_pattern = naming_pattern
        if analyze_by_language is not None:
            self.analyze_by_language = analyze_by_language
        if analyze_by_provider is not None:
            self.analyze_by_provider = analyze_by_provider
        if allow_automatic_post_analysis is not None:
            self.allow_automatic_post_analysis = allow_automatic_post_analysis

    @property
    def type(self) -> str:
        """Gets the type of this AbstractAnalyseSettingsDto.  # noqa: E501

        Response differs based on analyse type  # noqa: E501

        :return: The type of this AbstractAnalyseSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AbstractAnalyseSettingsDto.

        Response differs based on analyse type  # noqa: E501

        :param type: The type of this AbstractAnalyseSettingsDto.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "PreAnalyse",
            "PostAnalyse",
            "PreAnalyseTarget",
            "Compare",
        ]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}".format(  # noqa: E501
                    type, allowed_values
                )
            )

        self._type = type

    @property
    def include_confirmed_segments(self) -> bool:
        """Gets the include_confirmed_segments of this AbstractAnalyseSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The include_confirmed_segments of this AbstractAnalyseSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._include_confirmed_segments

    @include_confirmed_segments.setter
    def include_confirmed_segments(self, include_confirmed_segments):
        """Sets the include_confirmed_segments of this AbstractAnalyseSettingsDto.

        Default: false  # noqa: E501

        :param include_confirmed_segments: The include_confirmed_segments of this AbstractAnalyseSettingsDto.  # noqa: E501
        :type: bool
        """

        self._include_confirmed_segments = include_confirmed_segments

    @property
    def include_numbers(self) -> bool:
        """Gets the include_numbers of this AbstractAnalyseSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The include_numbers of this AbstractAnalyseSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._include_numbers

    @include_numbers.setter
    def include_numbers(self, include_numbers):
        """Sets the include_numbers of this AbstractAnalyseSettingsDto.

        Default: false  # noqa: E501

        :param include_numbers: The include_numbers of this AbstractAnalyseSettingsDto.  # noqa: E501
        :type: bool
        """

        self._include_numbers = include_numbers

    @property
    def include_locked_segments(self) -> bool:
        """Gets the include_locked_segments of this AbstractAnalyseSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The include_locked_segments of this AbstractAnalyseSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._include_locked_segments

    @include_locked_segments.setter
    def include_locked_segments(self, include_locked_segments):
        """Sets the include_locked_segments of this AbstractAnalyseSettingsDto.

        Default: false  # noqa: E501

        :param include_locked_segments: The include_locked_segments of this AbstractAnalyseSettingsDto.  # noqa: E501
        :type: bool
        """

        self._include_locked_segments = include_locked_segments

    @property
    def count_source_units(self) -> bool:
        """Gets the count_source_units of this AbstractAnalyseSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The count_source_units of this AbstractAnalyseSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._count_source_units

    @count_source_units.setter
    def count_source_units(self, count_source_units):
        """Sets the count_source_units of this AbstractAnalyseSettingsDto.

        Default: false  # noqa: E501

        :param count_source_units: The count_source_units of this AbstractAnalyseSettingsDto.  # noqa: E501
        :type: bool
        """

        self._count_source_units = count_source_units

    @property
    def include_trans_memory(self) -> bool:
        """Gets the include_trans_memory of this AbstractAnalyseSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The include_trans_memory of this AbstractAnalyseSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._include_trans_memory

    @include_trans_memory.setter
    def include_trans_memory(self, include_trans_memory):
        """Sets the include_trans_memory of this AbstractAnalyseSettingsDto.

        Default: false  # noqa: E501

        :param include_trans_memory: The include_trans_memory of this AbstractAnalyseSettingsDto.  # noqa: E501
        :type: bool
        """

        self._include_trans_memory = include_trans_memory

    @property
    def naming_pattern(self) -> str:
        """Gets the naming_pattern of this AbstractAnalyseSettingsDto.  # noqa: E501


        :return: The naming_pattern of this AbstractAnalyseSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._naming_pattern

    @naming_pattern.setter
    def naming_pattern(self, naming_pattern):
        """Sets the naming_pattern of this AbstractAnalyseSettingsDto.


        :param naming_pattern: The naming_pattern of this AbstractAnalyseSettingsDto.  # noqa: E501
        :type: str
        """

        self._naming_pattern = naming_pattern

    @property
    def analyze_by_language(self) -> bool:
        """Gets the analyze_by_language of this AbstractAnalyseSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The analyze_by_language of this AbstractAnalyseSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._analyze_by_language

    @analyze_by_language.setter
    def analyze_by_language(self, analyze_by_language):
        """Sets the analyze_by_language of this AbstractAnalyseSettingsDto.

        Default: false  # noqa: E501

        :param analyze_by_language: The analyze_by_language of this AbstractAnalyseSettingsDto.  # noqa: E501
        :type: bool
        """

        self._analyze_by_language = analyze_by_language

    @property
    def analyze_by_provider(self) -> bool:
        """Gets the analyze_by_provider of this AbstractAnalyseSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The analyze_by_provider of this AbstractAnalyseSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._analyze_by_provider

    @analyze_by_provider.setter
    def analyze_by_provider(self, analyze_by_provider):
        """Sets the analyze_by_provider of this AbstractAnalyseSettingsDto.

        Default: false  # noqa: E501

        :param analyze_by_provider: The analyze_by_provider of this AbstractAnalyseSettingsDto.  # noqa: E501
        :type: bool
        """

        self._analyze_by_provider = analyze_by_provider

    @property
    def allow_automatic_post_analysis(self) -> bool:
        """Gets the allow_automatic_post_analysis of this AbstractAnalyseSettingsDto.  # noqa: E501

        If automatic post analysis should be created after update source. Default: false  # noqa: E501

        :return: The allow_automatic_post_analysis of this AbstractAnalyseSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._allow_automatic_post_analysis

    @allow_automatic_post_analysis.setter
    def allow_automatic_post_analysis(self, allow_automatic_post_analysis):
        """Sets the allow_automatic_post_analysis of this AbstractAnalyseSettingsDto.

        If automatic post analysis should be created after update source. Default: false  # noqa: E501

        :param allow_automatic_post_analysis: The allow_automatic_post_analysis of this AbstractAnalyseSettingsDto.  # noqa: E501
        :type: bool
        """

        self._allow_automatic_post_analysis = allow_automatic_post_analysis

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(AbstractAnalyseSettingsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AbstractAnalyseSettingsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
