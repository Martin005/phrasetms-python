# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class QuoteCreateV2Dto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "name": "str",
        "project": "UidReference",
        "analyse": "IdReference",
        "price_list": "IdReference",
        "net_rate_scheme": "IdReference",
        "provider": "ProviderReference",
        "workflow_settings": "list[QuoteWorkflowSettingDto]",
        "units": "list[QuoteUnitsDto]",
        "additional_steps": "list[str]",
    }

    attribute_map = {
        "name": "name",
        "project": "project",
        "analyse": "analyse",
        "price_list": "priceList",
        "net_rate_scheme": "netRateScheme",
        "provider": "provider",
        "workflow_settings": "workflowSettings",
        "units": "units",
        "additional_steps": "additionalSteps",
    }

    def __init__(
        self,
        name=None,
        project=None,
        analyse=None,
        price_list=None,
        net_rate_scheme=None,
        provider=None,
        workflow_settings=None,
        units=None,
        additional_steps=None,
    ):  # noqa: E501
        """QuoteCreateV2Dto - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._project = None
        self._analyse = None
        self._price_list = None
        self._net_rate_scheme = None
        self._provider = None
        self._workflow_settings = None
        self._units = None
        self._additional_steps = None
        self.discriminator = None
        self.name = name
        self.project = project
        self.analyse = analyse
        self.price_list = price_list
        if net_rate_scheme is not None:
            self.net_rate_scheme = net_rate_scheme
        if provider is not None:
            self.provider = provider
        if workflow_settings is not None:
            self.workflow_settings = workflow_settings
        if units is not None:
            self.units = units
        if additional_steps is not None:
            self.additional_steps = additional_steps

    @property
    def name(self) -> str:
        """Gets the name of this QuoteCreateV2Dto.  # noqa: E501


        :return: The name of this QuoteCreateV2Dto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this QuoteCreateV2Dto.


        :param name: The name of this QuoteCreateV2Dto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError(
                "Invalid value for `name`, must not be `None`"
            )  # noqa: E501

        self._name = name

    @property
    def project(self) -> UidReference:
        """Gets the project of this QuoteCreateV2Dto.  # noqa: E501


        :return: The project of this QuoteCreateV2Dto.  # noqa: E501
        :rtype: UidReference
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this QuoteCreateV2Dto.


        :param project: The project of this QuoteCreateV2Dto.  # noqa: E501
        :type: UidReference
        """
        if project is None:
            raise ValueError(
                "Invalid value for `project`, must not be `None`"
            )  # noqa: E501

        self._project = project

    @property
    def analyse(self) -> IdReference:
        """Gets the analyse of this QuoteCreateV2Dto.  # noqa: E501


        :return: The analyse of this QuoteCreateV2Dto.  # noqa: E501
        :rtype: IdReference
        """
        return self._analyse

    @analyse.setter
    def analyse(self, analyse):
        """Sets the analyse of this QuoteCreateV2Dto.


        :param analyse: The analyse of this QuoteCreateV2Dto.  # noqa: E501
        :type: IdReference
        """
        if analyse is None:
            raise ValueError(
                "Invalid value for `analyse`, must not be `None`"
            )  # noqa: E501

        self._analyse = analyse

    @property
    def price_list(self) -> IdReference:
        """Gets the price_list of this QuoteCreateV2Dto.  # noqa: E501


        :return: The price_list of this QuoteCreateV2Dto.  # noqa: E501
        :rtype: IdReference
        """
        return self._price_list

    @price_list.setter
    def price_list(self, price_list):
        """Sets the price_list of this QuoteCreateV2Dto.


        :param price_list: The price_list of this QuoteCreateV2Dto.  # noqa: E501
        :type: IdReference
        """
        if price_list is None:
            raise ValueError(
                "Invalid value for `price_list`, must not be `None`"
            )  # noqa: E501

        self._price_list = price_list

    @property
    def net_rate_scheme(self) -> IdReference:
        """Gets the net_rate_scheme of this QuoteCreateV2Dto.  # noqa: E501


        :return: The net_rate_scheme of this QuoteCreateV2Dto.  # noqa: E501
        :rtype: IdReference
        """
        return self._net_rate_scheme

    @net_rate_scheme.setter
    def net_rate_scheme(self, net_rate_scheme):
        """Sets the net_rate_scheme of this QuoteCreateV2Dto.


        :param net_rate_scheme: The net_rate_scheme of this QuoteCreateV2Dto.  # noqa: E501
        :type: IdReference
        """

        self._net_rate_scheme = net_rate_scheme

    @property
    def provider(self) -> ProviderReference:
        """Gets the provider of this QuoteCreateV2Dto.  # noqa: E501


        :return: The provider of this QuoteCreateV2Dto.  # noqa: E501
        :rtype: ProviderReference
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this QuoteCreateV2Dto.


        :param provider: The provider of this QuoteCreateV2Dto.  # noqa: E501
        :type: ProviderReference
        """

        self._provider = provider

    @property
    def workflow_settings(self) -> list[QuoteWorkflowSettingDto]:
        """Gets the workflow_settings of this QuoteCreateV2Dto.  # noqa: E501


        :return: The workflow_settings of this QuoteCreateV2Dto.  # noqa: E501
        :rtype: list[QuoteWorkflowSettingDto]
        """
        return self._workflow_settings

    @workflow_settings.setter
    def workflow_settings(self, workflow_settings):
        """Sets the workflow_settings of this QuoteCreateV2Dto.


        :param workflow_settings: The workflow_settings of this QuoteCreateV2Dto.  # noqa: E501
        :type: list[QuoteWorkflowSettingDto]
        """

        self._workflow_settings = workflow_settings

    @property
    def units(self) -> list[QuoteUnitsDto]:
        """Gets the units of this QuoteCreateV2Dto.  # noqa: E501


        :return: The units of this QuoteCreateV2Dto.  # noqa: E501
        :rtype: list[QuoteUnitsDto]
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this QuoteCreateV2Dto.


        :param units: The units of this QuoteCreateV2Dto.  # noqa: E501
        :type: list[QuoteUnitsDto]
        """

        self._units = units

    @property
    def additional_steps(self) -> list[str]:
        """Gets the additional_steps of this QuoteCreateV2Dto.  # noqa: E501


        :return: The additional_steps of this QuoteCreateV2Dto.  # noqa: E501
        :rtype: list[str]
        """
        return self._additional_steps

    @additional_steps.setter
    def additional_steps(self, additional_steps):
        """Sets the additional_steps of this QuoteCreateV2Dto.


        :param additional_steps: The additional_steps of this QuoteCreateV2Dto.  # noqa: E501
        :type: list[str]
        """

        self._additional_steps = additional_steps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(QuoteCreateV2Dto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuoteCreateV2Dto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
