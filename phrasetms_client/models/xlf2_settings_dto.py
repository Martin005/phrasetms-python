# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Xlf2SettingsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "icu_sub_filter": "bool",
        "import_notes": "bool",
        "save_confirmed_segments": "bool",
        "segmentation": "bool",
        "line_break_tags": "bool",
        "preserve_whitespace": "bool",
        "copy_source_to_target_if_not_imported": "bool",
        "respect_translate_attr": "bool",
        "skip_import_rules": "str",
        "import_as_confirmed_rules": "str",
        "import_as_locked_rules": "str",
        "export_attrs_when_confirmed_and_locked": "str",
        "export_attrs_when_confirmed_and_not_locked": "str",
        "export_attrs_when_not_confirmed_and_locked": "str",
        "export_attrs_when_not_confirmed_and_not_locked": "str",
        "context_key_x_path": "str",
        "preserve_char_entities": "str",
        "xsl_url": "str",
        "xsl_file": "str",
        "tag_regexp": "str",
    }

    attribute_map = {
        "icu_sub_filter": "icuSubFilter",
        "import_notes": "importNotes",
        "save_confirmed_segments": "saveConfirmedSegments",
        "segmentation": "segmentation",
        "line_break_tags": "lineBreakTags",
        "preserve_whitespace": "preserveWhitespace",
        "copy_source_to_target_if_not_imported": "copySourceToTargetIfNotImported",
        "respect_translate_attr": "respectTranslateAttr",
        "skip_import_rules": "skipImportRules",
        "import_as_confirmed_rules": "importAsConfirmedRules",
        "import_as_locked_rules": "importAsLockedRules",
        "export_attrs_when_confirmed_and_locked": "exportAttrsWhenConfirmedAndLocked",
        "export_attrs_when_confirmed_and_not_locked": "exportAttrsWhenConfirmedAndNotLocked",
        "export_attrs_when_not_confirmed_and_locked": "exportAttrsWhenNotConfirmedAndLocked",
        "export_attrs_when_not_confirmed_and_not_locked": "exportAttrsWhenNotConfirmedAndNotLocked",
        "context_key_x_path": "contextKeyXPath",
        "preserve_char_entities": "preserveCharEntities",
        "xsl_url": "xslUrl",
        "xsl_file": "xslFile",
        "tag_regexp": "tagRegexp",
    }

    def __init__(
        self,
        icu_sub_filter=None,
        import_notes=None,
        save_confirmed_segments=None,
        segmentation=None,
        line_break_tags=None,
        preserve_whitespace=None,
        copy_source_to_target_if_not_imported=None,
        respect_translate_attr=None,
        skip_import_rules=None,
        import_as_confirmed_rules=None,
        import_as_locked_rules=None,
        export_attrs_when_confirmed_and_locked=None,
        export_attrs_when_confirmed_and_not_locked=None,
        export_attrs_when_not_confirmed_and_locked=None,
        export_attrs_when_not_confirmed_and_not_locked=None,
        context_key_x_path=None,
        preserve_char_entities=None,
        xsl_url=None,
        xsl_file=None,
        tag_regexp=None,
    ):  # noqa: E501
        """Xlf2SettingsDto - a model defined in Swagger"""  # noqa: E501
        self._icu_sub_filter = None
        self._import_notes = None
        self._save_confirmed_segments = None
        self._segmentation = None
        self._line_break_tags = None
        self._preserve_whitespace = None
        self._copy_source_to_target_if_not_imported = None
        self._respect_translate_attr = None
        self._skip_import_rules = None
        self._import_as_confirmed_rules = None
        self._import_as_locked_rules = None
        self._export_attrs_when_confirmed_and_locked = None
        self._export_attrs_when_confirmed_and_not_locked = None
        self._export_attrs_when_not_confirmed_and_locked = None
        self._export_attrs_when_not_confirmed_and_not_locked = None
        self._context_key_x_path = None
        self._preserve_char_entities = None
        self._xsl_url = None
        self._xsl_file = None
        self._tag_regexp = None
        self.discriminator = None
        if icu_sub_filter is not None:
            self.icu_sub_filter = icu_sub_filter
        if import_notes is not None:
            self.import_notes = import_notes
        if save_confirmed_segments is not None:
            self.save_confirmed_segments = save_confirmed_segments
        if segmentation is not None:
            self.segmentation = segmentation
        if line_break_tags is not None:
            self.line_break_tags = line_break_tags
        if preserve_whitespace is not None:
            self.preserve_whitespace = preserve_whitespace
        if copy_source_to_target_if_not_imported is not None:
            self.copy_source_to_target_if_not_imported = (
                copy_source_to_target_if_not_imported
            )
        if respect_translate_attr is not None:
            self.respect_translate_attr = respect_translate_attr
        if skip_import_rules is not None:
            self.skip_import_rules = skip_import_rules
        if import_as_confirmed_rules is not None:
            self.import_as_confirmed_rules = import_as_confirmed_rules
        if import_as_locked_rules is not None:
            self.import_as_locked_rules = import_as_locked_rules
        if export_attrs_when_confirmed_and_locked is not None:
            self.export_attrs_when_confirmed_and_locked = (
                export_attrs_when_confirmed_and_locked
            )
        if export_attrs_when_confirmed_and_not_locked is not None:
            self.export_attrs_when_confirmed_and_not_locked = (
                export_attrs_when_confirmed_and_not_locked
            )
        if export_attrs_when_not_confirmed_and_locked is not None:
            self.export_attrs_when_not_confirmed_and_locked = (
                export_attrs_when_not_confirmed_and_locked
            )
        if export_attrs_when_not_confirmed_and_not_locked is not None:
            self.export_attrs_when_not_confirmed_and_not_locked = (
                export_attrs_when_not_confirmed_and_not_locked
            )
        if context_key_x_path is not None:
            self.context_key_x_path = context_key_x_path
        if preserve_char_entities is not None:
            self.preserve_char_entities = preserve_char_entities
        if xsl_url is not None:
            self.xsl_url = xsl_url
        if xsl_file is not None:
            self.xsl_file = xsl_file
        if tag_regexp is not None:
            self.tag_regexp = tag_regexp

    @property
    def icu_sub_filter(self) -> bool:
        """Gets the icu_sub_filter of this Xlf2SettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The icu_sub_filter of this Xlf2SettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._icu_sub_filter

    @icu_sub_filter.setter
    def icu_sub_filter(self, icu_sub_filter):
        """Sets the icu_sub_filter of this Xlf2SettingsDto.

        Default: false  # noqa: E501

        :param icu_sub_filter: The icu_sub_filter of this Xlf2SettingsDto.  # noqa: E501
        :type: bool
        """

        self._icu_sub_filter = icu_sub_filter

    @property
    def import_notes(self) -> bool:
        """Gets the import_notes of this Xlf2SettingsDto.  # noqa: E501

        Default: true  # noqa: E501

        :return: The import_notes of this Xlf2SettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._import_notes

    @import_notes.setter
    def import_notes(self, import_notes):
        """Sets the import_notes of this Xlf2SettingsDto.

        Default: true  # noqa: E501

        :param import_notes: The import_notes of this Xlf2SettingsDto.  # noqa: E501
        :type: bool
        """

        self._import_notes = import_notes

    @property
    def save_confirmed_segments(self) -> bool:
        """Gets the save_confirmed_segments of this Xlf2SettingsDto.  # noqa: E501

        Default: true  # noqa: E501

        :return: The save_confirmed_segments of this Xlf2SettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._save_confirmed_segments

    @save_confirmed_segments.setter
    def save_confirmed_segments(self, save_confirmed_segments):
        """Sets the save_confirmed_segments of this Xlf2SettingsDto.

        Default: true  # noqa: E501

        :param save_confirmed_segments: The save_confirmed_segments of this Xlf2SettingsDto.  # noqa: E501
        :type: bool
        """

        self._save_confirmed_segments = save_confirmed_segments

    @property
    def segmentation(self) -> bool:
        """Gets the segmentation of this Xlf2SettingsDto.  # noqa: E501

        Default: true  # noqa: E501

        :return: The segmentation of this Xlf2SettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._segmentation

    @segmentation.setter
    def segmentation(self, segmentation):
        """Sets the segmentation of this Xlf2SettingsDto.

        Default: true  # noqa: E501

        :param segmentation: The segmentation of this Xlf2SettingsDto.  # noqa: E501
        :type: bool
        """

        self._segmentation = segmentation

    @property
    def line_break_tags(self) -> bool:
        """Gets the line_break_tags of this Xlf2SettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The line_break_tags of this Xlf2SettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._line_break_tags

    @line_break_tags.setter
    def line_break_tags(self, line_break_tags):
        """Sets the line_break_tags of this Xlf2SettingsDto.

        Default: false  # noqa: E501

        :param line_break_tags: The line_break_tags of this Xlf2SettingsDto.  # noqa: E501
        :type: bool
        """

        self._line_break_tags = line_break_tags

    @property
    def preserve_whitespace(self) -> bool:
        """Gets the preserve_whitespace of this Xlf2SettingsDto.  # noqa: E501

        Default: true  # noqa: E501

        :return: The preserve_whitespace of this Xlf2SettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._preserve_whitespace

    @preserve_whitespace.setter
    def preserve_whitespace(self, preserve_whitespace):
        """Sets the preserve_whitespace of this Xlf2SettingsDto.

        Default: true  # noqa: E501

        :param preserve_whitespace: The preserve_whitespace of this Xlf2SettingsDto.  # noqa: E501
        :type: bool
        """

        self._preserve_whitespace = preserve_whitespace

    @property
    def copy_source_to_target_if_not_imported(self) -> bool:
        """Gets the copy_source_to_target_if_not_imported of this Xlf2SettingsDto.  # noqa: E501

        Default: true  # noqa: E501

        :return: The copy_source_to_target_if_not_imported of this Xlf2SettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._copy_source_to_target_if_not_imported

    @copy_source_to_target_if_not_imported.setter
    def copy_source_to_target_if_not_imported(
        self, copy_source_to_target_if_not_imported
    ):
        """Sets the copy_source_to_target_if_not_imported of this Xlf2SettingsDto.

        Default: true  # noqa: E501

        :param copy_source_to_target_if_not_imported: The copy_source_to_target_if_not_imported of this Xlf2SettingsDto.  # noqa: E501
        :type: bool
        """

        self._copy_source_to_target_if_not_imported = (
            copy_source_to_target_if_not_imported
        )

    @property
    def respect_translate_attr(self) -> bool:
        """Gets the respect_translate_attr of this Xlf2SettingsDto.  # noqa: E501

        Default: true  # noqa: E501

        :return: The respect_translate_attr of this Xlf2SettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._respect_translate_attr

    @respect_translate_attr.setter
    def respect_translate_attr(self, respect_translate_attr):
        """Sets the respect_translate_attr of this Xlf2SettingsDto.

        Default: true  # noqa: E501

        :param respect_translate_attr: The respect_translate_attr of this Xlf2SettingsDto.  # noqa: E501
        :type: bool
        """

        self._respect_translate_attr = respect_translate_attr

    @property
    def skip_import_rules(self) -> str:
        """Gets the skip_import_rules of this Xlf2SettingsDto.  # noqa: E501


        :return: The skip_import_rules of this Xlf2SettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._skip_import_rules

    @skip_import_rules.setter
    def skip_import_rules(self, skip_import_rules):
        """Sets the skip_import_rules of this Xlf2SettingsDto.


        :param skip_import_rules: The skip_import_rules of this Xlf2SettingsDto.  # noqa: E501
        :type: str
        """

        self._skip_import_rules = skip_import_rules

    @property
    def import_as_confirmed_rules(self) -> str:
        """Gets the import_as_confirmed_rules of this Xlf2SettingsDto.  # noqa: E501

        Default: state=final  # noqa: E501

        :return: The import_as_confirmed_rules of this Xlf2SettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._import_as_confirmed_rules

    @import_as_confirmed_rules.setter
    def import_as_confirmed_rules(self, import_as_confirmed_rules):
        """Sets the import_as_confirmed_rules of this Xlf2SettingsDto.

        Default: state=final  # noqa: E501

        :param import_as_confirmed_rules: The import_as_confirmed_rules of this Xlf2SettingsDto.  # noqa: E501
        :type: str
        """

        self._import_as_confirmed_rules = import_as_confirmed_rules

    @property
    def import_as_locked_rules(self) -> str:
        """Gets the import_as_locked_rules of this Xlf2SettingsDto.  # noqa: E501


        :return: The import_as_locked_rules of this Xlf2SettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._import_as_locked_rules

    @import_as_locked_rules.setter
    def import_as_locked_rules(self, import_as_locked_rules):
        """Sets the import_as_locked_rules of this Xlf2SettingsDto.


        :param import_as_locked_rules: The import_as_locked_rules of this Xlf2SettingsDto.  # noqa: E501
        :type: str
        """

        self._import_as_locked_rules = import_as_locked_rules

    @property
    def export_attrs_when_confirmed_and_locked(self) -> str:
        """Gets the export_attrs_when_confirmed_and_locked of this Xlf2SettingsDto.  # noqa: E501

        Default: state=final  # noqa: E501

        :return: The export_attrs_when_confirmed_and_locked of this Xlf2SettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._export_attrs_when_confirmed_and_locked

    @export_attrs_when_confirmed_and_locked.setter
    def export_attrs_when_confirmed_and_locked(
        self, export_attrs_when_confirmed_and_locked
    ):
        """Sets the export_attrs_when_confirmed_and_locked of this Xlf2SettingsDto.

        Default: state=final  # noqa: E501

        :param export_attrs_when_confirmed_and_locked: The export_attrs_when_confirmed_and_locked of this Xlf2SettingsDto.  # noqa: E501
        :type: str
        """

        self._export_attrs_when_confirmed_and_locked = (
            export_attrs_when_confirmed_and_locked
        )

    @property
    def export_attrs_when_confirmed_and_not_locked(self) -> str:
        """Gets the export_attrs_when_confirmed_and_not_locked of this Xlf2SettingsDto.  # noqa: E501

        Default: state=final  # noqa: E501

        :return: The export_attrs_when_confirmed_and_not_locked of this Xlf2SettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._export_attrs_when_confirmed_and_not_locked

    @export_attrs_when_confirmed_and_not_locked.setter
    def export_attrs_when_confirmed_and_not_locked(
        self, export_attrs_when_confirmed_and_not_locked
    ):
        """Sets the export_attrs_when_confirmed_and_not_locked of this Xlf2SettingsDto.

        Default: state=final  # noqa: E501

        :param export_attrs_when_confirmed_and_not_locked: The export_attrs_when_confirmed_and_not_locked of this Xlf2SettingsDto.  # noqa: E501
        :type: str
        """

        self._export_attrs_when_confirmed_and_not_locked = (
            export_attrs_when_confirmed_and_not_locked
        )

    @property
    def export_attrs_when_not_confirmed_and_locked(self) -> str:
        """Gets the export_attrs_when_not_confirmed_and_locked of this Xlf2SettingsDto.  # noqa: E501


        :return: The export_attrs_when_not_confirmed_and_locked of this Xlf2SettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._export_attrs_when_not_confirmed_and_locked

    @export_attrs_when_not_confirmed_and_locked.setter
    def export_attrs_when_not_confirmed_and_locked(
        self, export_attrs_when_not_confirmed_and_locked
    ):
        """Sets the export_attrs_when_not_confirmed_and_locked of this Xlf2SettingsDto.


        :param export_attrs_when_not_confirmed_and_locked: The export_attrs_when_not_confirmed_and_locked of this Xlf2SettingsDto.  # noqa: E501
        :type: str
        """

        self._export_attrs_when_not_confirmed_and_locked = (
            export_attrs_when_not_confirmed_and_locked
        )

    @property
    def export_attrs_when_not_confirmed_and_not_locked(self) -> str:
        """Gets the export_attrs_when_not_confirmed_and_not_locked of this Xlf2SettingsDto.  # noqa: E501


        :return: The export_attrs_when_not_confirmed_and_not_locked of this Xlf2SettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._export_attrs_when_not_confirmed_and_not_locked

    @export_attrs_when_not_confirmed_and_not_locked.setter
    def export_attrs_when_not_confirmed_and_not_locked(
        self, export_attrs_when_not_confirmed_and_not_locked
    ):
        """Sets the export_attrs_when_not_confirmed_and_not_locked of this Xlf2SettingsDto.


        :param export_attrs_when_not_confirmed_and_not_locked: The export_attrs_when_not_confirmed_and_not_locked of this Xlf2SettingsDto.  # noqa: E501
        :type: str
        """

        self._export_attrs_when_not_confirmed_and_not_locked = (
            export_attrs_when_not_confirmed_and_not_locked
        )

    @property
    def context_key_x_path(self) -> str:
        """Gets the context_key_x_path of this Xlf2SettingsDto.  # noqa: E501


        :return: The context_key_x_path of this Xlf2SettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._context_key_x_path

    @context_key_x_path.setter
    def context_key_x_path(self, context_key_x_path):
        """Sets the context_key_x_path of this Xlf2SettingsDto.


        :param context_key_x_path: The context_key_x_path of this Xlf2SettingsDto.  # noqa: E501
        :type: str
        """

        self._context_key_x_path = context_key_x_path

    @property
    def preserve_char_entities(self) -> str:
        """Gets the preserve_char_entities of this Xlf2SettingsDto.  # noqa: E501


        :return: The preserve_char_entities of this Xlf2SettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._preserve_char_entities

    @preserve_char_entities.setter
    def preserve_char_entities(self, preserve_char_entities):
        """Sets the preserve_char_entities of this Xlf2SettingsDto.


        :param preserve_char_entities: The preserve_char_entities of this Xlf2SettingsDto.  # noqa: E501
        :type: str
        """

        self._preserve_char_entities = preserve_char_entities

    @property
    def xsl_url(self) -> str:
        """Gets the xsl_url of this Xlf2SettingsDto.  # noqa: E501


        :return: The xsl_url of this Xlf2SettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._xsl_url

    @xsl_url.setter
    def xsl_url(self, xsl_url):
        """Sets the xsl_url of this Xlf2SettingsDto.


        :param xsl_url: The xsl_url of this Xlf2SettingsDto.  # noqa: E501
        :type: str
        """

        self._xsl_url = xsl_url

    @property
    def xsl_file(self) -> str:
        """Gets the xsl_file of this Xlf2SettingsDto.  # noqa: E501

        UID of uploaded XSL file, overrides xslUrl  # noqa: E501

        :return: The xsl_file of this Xlf2SettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._xsl_file

    @xsl_file.setter
    def xsl_file(self, xsl_file):
        """Sets the xsl_file of this Xlf2SettingsDto.

        UID of uploaded XSL file, overrides xslUrl  # noqa: E501

        :param xsl_file: The xsl_file of this Xlf2SettingsDto.  # noqa: E501
        :type: str
        """

        self._xsl_file = xsl_file

    @property
    def tag_regexp(self) -> str:
        """Gets the tag_regexp of this Xlf2SettingsDto.  # noqa: E501


        :return: The tag_regexp of this Xlf2SettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._tag_regexp

    @tag_regexp.setter
    def tag_regexp(self, tag_regexp):
        """Sets the tag_regexp of this Xlf2SettingsDto.


        :param tag_regexp: The tag_regexp of this Xlf2SettingsDto.  # noqa: E501
        :type: str
        """

        self._tag_regexp = tag_regexp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(Xlf2SettingsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Xlf2SettingsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
