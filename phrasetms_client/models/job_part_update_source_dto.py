# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from phrasetms_client.models import WorkflowStepReference


class JobPartUpdateSourceDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "uid": "str",
        "status": "str",
        "target_lang": "str",
        "filename": "str",
        "workflow_level": "int",
        "workflow_step": "WorkflowStepReference",
    }

    attribute_map = {
        "uid": "uid",
        "status": "status",
        "target_lang": "targetLang",
        "filename": "filename",
        "workflow_level": "workflowLevel",
        "workflow_step": "workflowStep",
    }

    def __init__(
        self,
        uid=None,
        status=None,
        target_lang=None,
        filename=None,
        workflow_level=None,
        workflow_step=None,
    ):  # noqa: E501
        """JobPartUpdateSourceDto - a model defined in Swagger"""  # noqa: E501
        self._uid = None
        self._status = None
        self._target_lang = None
        self._filename = None
        self._workflow_level = None
        self._workflow_step = None
        self.discriminator = None
        if uid is not None:
            self.uid = uid
        if status is not None:
            self.status = status
        if target_lang is not None:
            self.target_lang = target_lang
        if filename is not None:
            self.filename = filename
        if workflow_level is not None:
            self.workflow_level = workflow_level
        if workflow_step is not None:
            self.workflow_step = workflow_step

    @property
    def uid(self) -> str:
        """Gets the uid of this JobPartUpdateSourceDto.  # noqa: E501


        :return: The uid of this JobPartUpdateSourceDto.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this JobPartUpdateSourceDto.


        :param uid: The uid of this JobPartUpdateSourceDto.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def status(self) -> str:
        """Gets the status of this JobPartUpdateSourceDto.  # noqa: E501


        :return: The status of this JobPartUpdateSourceDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobPartUpdateSourceDto.


        :param status: The status of this JobPartUpdateSourceDto.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "NEW",
            "ACCEPTED",
            "DECLINED",
            "REJECTED",
            "DELIVERED",
            "EMAILED",
            "COMPLETED",
            "CANCELLED",
        ]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}".format(  # noqa: E501
                    status, allowed_values
                )
            )

        self._status = status

    @property
    def target_lang(self) -> str:
        """Gets the target_lang of this JobPartUpdateSourceDto.  # noqa: E501


        :return: The target_lang of this JobPartUpdateSourceDto.  # noqa: E501
        :rtype: str
        """
        return self._target_lang

    @target_lang.setter
    def target_lang(self, target_lang):
        """Sets the target_lang of this JobPartUpdateSourceDto.


        :param target_lang: The target_lang of this JobPartUpdateSourceDto.  # noqa: E501
        :type: str
        """

        self._target_lang = target_lang

    @property
    def filename(self) -> str:
        """Gets the filename of this JobPartUpdateSourceDto.  # noqa: E501


        :return: The filename of this JobPartUpdateSourceDto.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this JobPartUpdateSourceDto.


        :param filename: The filename of this JobPartUpdateSourceDto.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def workflow_level(self) -> int:
        """Gets the workflow_level of this JobPartUpdateSourceDto.  # noqa: E501


        :return: The workflow_level of this JobPartUpdateSourceDto.  # noqa: E501
        :rtype: int
        """
        return self._workflow_level

    @workflow_level.setter
    def workflow_level(self, workflow_level):
        """Sets the workflow_level of this JobPartUpdateSourceDto.


        :param workflow_level: The workflow_level of this JobPartUpdateSourceDto.  # noqa: E501
        :type: int
        """

        self._workflow_level = workflow_level

    @property
    def workflow_step(self) -> WorkflowStepReference:
        """Gets the workflow_step of this JobPartUpdateSourceDto.  # noqa: E501


        :return: The workflow_step of this JobPartUpdateSourceDto.  # noqa: E501
        :rtype: WorkflowStepReference
        """
        return self._workflow_step

    @workflow_step.setter
    def workflow_step(self, workflow_step):
        """Sets the workflow_step of this JobPartUpdateSourceDto.


        :param workflow_step: The workflow_step of this JobPartUpdateSourceDto.  # noqa: E501
        :type: WorkflowStepReference
        """

        self._workflow_step = workflow_step

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(JobPartUpdateSourceDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobPartUpdateSourceDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
