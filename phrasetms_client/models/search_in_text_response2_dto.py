# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from phrasetms_client.models import TermV2Dto, ConceptDtov2, TermBaseReference, Match


class SearchInTextResponse2Dto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "term_base": "TermBaseReference",
        "source_term": "TermV2Dto",
        "concept": "ConceptDtov2",
        "translation_terms": "list[TermV2Dto]",
        "sub_term": "bool",
        "matches": "list[Match]",
    }

    attribute_map = {
        "term_base": "termBase",
        "source_term": "sourceTerm",
        "concept": "concept",
        "translation_terms": "translationTerms",
        "sub_term": "subTerm",
        "matches": "matches",
    }

    def __init__(
        self,
        term_base=None,
        source_term=None,
        concept=None,
        translation_terms=None,
        sub_term=None,
        matches=None,
    ):  # noqa: E501
        """SearchInTextResponse2Dto - a model defined in Swagger"""  # noqa: E501
        self._term_base = None
        self._source_term = None
        self._concept = None
        self._translation_terms = None
        self._sub_term = None
        self._matches = None
        self.discriminator = None
        if term_base is not None:
            self.term_base = term_base
        if source_term is not None:
            self.source_term = source_term
        if concept is not None:
            self.concept = concept
        if translation_terms is not None:
            self.translation_terms = translation_terms
        if sub_term is not None:
            self.sub_term = sub_term
        if matches is not None:
            self.matches = matches

    @property
    def term_base(self) -> TermBaseReference:
        """Gets the term_base of this SearchInTextResponse2Dto.  # noqa: E501


        :return: The term_base of this SearchInTextResponse2Dto.  # noqa: E501
        :rtype: TermBaseReference
        """
        return self._term_base

    @term_base.setter
    def term_base(self, term_base):
        """Sets the term_base of this SearchInTextResponse2Dto.


        :param term_base: The term_base of this SearchInTextResponse2Dto.  # noqa: E501
        :type: TermBaseReference
        """

        self._term_base = term_base

    @property
    def source_term(self) -> TermV2Dto:
        """Gets the source_term of this SearchInTextResponse2Dto.  # noqa: E501


        :return: The source_term of this SearchInTextResponse2Dto.  # noqa: E501
        :rtype: TermV2Dto
        """
        return self._source_term

    @source_term.setter
    def source_term(self, source_term):
        """Sets the source_term of this SearchInTextResponse2Dto.


        :param source_term: The source_term of this SearchInTextResponse2Dto.  # noqa: E501
        :type: TermV2Dto
        """

        self._source_term = source_term

    @property
    def concept(self) -> ConceptDtov2:
        """Gets the concept of this SearchInTextResponse2Dto.  # noqa: E501


        :return: The concept of this SearchInTextResponse2Dto.  # noqa: E501
        :rtype: ConceptDtov2
        """
        return self._concept

    @concept.setter
    def concept(self, concept):
        """Sets the concept of this SearchInTextResponse2Dto.


        :param concept: The concept of this SearchInTextResponse2Dto.  # noqa: E501
        :type: ConceptDtov2
        """

        self._concept = concept

    @property
    def translation_terms(self) -> list[TermV2Dto]:
        """Gets the translation_terms of this SearchInTextResponse2Dto.  # noqa: E501


        :return: The translation_terms of this SearchInTextResponse2Dto.  # noqa: E501
        :rtype: list[TermV2Dto]
        """
        return self._translation_terms

    @translation_terms.setter
    def translation_terms(self, translation_terms):
        """Sets the translation_terms of this SearchInTextResponse2Dto.


        :param translation_terms: The translation_terms of this SearchInTextResponse2Dto.  # noqa: E501
        :type: list[TermV2Dto]
        """

        self._translation_terms = translation_terms

    @property
    def sub_term(self) -> bool:
        """Gets the sub_term of this SearchInTextResponse2Dto.  # noqa: E501


        :return: The sub_term of this SearchInTextResponse2Dto.  # noqa: E501
        :rtype: bool
        """
        return self._sub_term

    @sub_term.setter
    def sub_term(self, sub_term):
        """Sets the sub_term of this SearchInTextResponse2Dto.


        :param sub_term: The sub_term of this SearchInTextResponse2Dto.  # noqa: E501
        :type: bool
        """

        self._sub_term = sub_term

    @property
    def matches(self) -> list[Match]:
        """Gets the matches of this SearchInTextResponse2Dto.  # noqa: E501


        :return: The matches of this SearchInTextResponse2Dto.  # noqa: E501
        :rtype: list[Match]
        """
        return self._matches

    @matches.setter
    def matches(self, matches):
        """Sets the matches of this SearchInTextResponse2Dto.


        :param matches: The matches of this SearchInTextResponse2Dto.  # noqa: E501
        :type: list[Match]
        """

        self._matches = matches

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(SearchInTextResponse2Dto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchInTextResponse2Dto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
