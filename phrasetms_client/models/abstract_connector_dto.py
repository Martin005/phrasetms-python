# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AbstractConnectorDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'str'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type'
    }

    discriminator_value_class_map = {
          'Sftp': 'Sftp',
'Magento': 'Magento',
'Tridion': 'Tridion',
'Ftp': 'Ftp',
'AdobeExperienceManager': 'AdobeExperienceManager',
'Typo3': 'Typo3',
'Contentstack': 'Contentstack',
'AmazonS3': 'AmazonS3',
'Joomla': 'Joomla',
'Wordpress': 'Wordpress',
'BitbucketServer': 'BitbucketServer',
'Marketo': 'Marketo',
'GitLab': 'GitLab',
'Sitecore': 'Sitecore',
'Git': 'Git',
'Kentico': 'Kentico',
'MicrosoftAzure': 'MicrosoftAzure'    }

    def __init__(self, name=None, type=None):  # noqa: E501
        """AbstractConnectorDto - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._type = None
        self.discriminator = 'type'
        self.name = name
        self.type = type

    @property
    def name(self):
        """Gets the name of this AbstractConnectorDto.  # noqa: E501

        Name of the connector  # noqa: E501

        :return: The name of this AbstractConnectorDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AbstractConnectorDto.

        Name of the connector  # noqa: E501

        :param name: The name of this AbstractConnectorDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this AbstractConnectorDto.  # noqa: E501

        Connector type  # noqa: E501

        :return: The type of this AbstractConnectorDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AbstractConnectorDto.

        Connector type  # noqa: E501

        :param type: The type of this AbstractConnectorDto.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AbstractConnectorDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AbstractConnectorDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
