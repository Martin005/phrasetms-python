# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from phrasetms_client.models.abstract_user_edit_dto import (
    AbstractUserEditDto,
)  # noqa: F401,E501


class LINGUISTEDIT(AbstractUserEditDto):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "edit_all_terms_in_tb": "bool",
        "edit_translations_in_tm": "bool",
        "enable_mt": "bool",
        "may_reject_jobs": "bool",
        "source_locales": "list[str]",
        "target_locales": "list[str]",
        "workflow_steps": "list[UidReference]",
        "clients": "list[UidReference]",
        "domains": "list[UidReference]",
        "sub_domains": "list[UidReference]",
        "net_rate_scheme": "UidReference",
        "translation_price_list": "UidReference",
    }
    if hasattr(AbstractUserEditDto, "swagger_types"):
        swagger_types.update(AbstractUserEditDto.swagger_types)

    attribute_map = {
        "edit_all_terms_in_tb": "editAllTermsInTB",
        "edit_translations_in_tm": "editTranslationsInTM",
        "enable_mt": "enableMT",
        "may_reject_jobs": "mayRejectJobs",
        "source_locales": "sourceLocales",
        "target_locales": "targetLocales",
        "workflow_steps": "workflowSteps",
        "clients": "clients",
        "domains": "domains",
        "sub_domains": "subDomains",
        "net_rate_scheme": "netRateScheme",
        "translation_price_list": "translationPriceList",
    }
    if hasattr(AbstractUserEditDto, "attribute_map"):
        attribute_map.update(AbstractUserEditDto.attribute_map)

    def __init__(
        self,
        edit_all_terms_in_tb=None,
        edit_translations_in_tm=None,
        enable_mt=None,
        may_reject_jobs=None,
        source_locales=None,
        target_locales=None,
        workflow_steps=None,
        clients=None,
        domains=None,
        sub_domains=None,
        net_rate_scheme=None,
        translation_price_list=None,
        *args,
        **kwargs
    ):  # noqa: E501
        """LINGUISTEDIT - a model defined in Swagger"""  # noqa: E501
        self._edit_all_terms_in_tb = None
        self._edit_translations_in_tm = None
        self._enable_mt = None
        self._may_reject_jobs = None
        self._source_locales = None
        self._target_locales = None
        self._workflow_steps = None
        self._clients = None
        self._domains = None
        self._sub_domains = None
        self._net_rate_scheme = None
        self._translation_price_list = None
        self.discriminator = None
        if edit_all_terms_in_tb is not None:
            self.edit_all_terms_in_tb = edit_all_terms_in_tb
        if edit_translations_in_tm is not None:
            self.edit_translations_in_tm = edit_translations_in_tm
        if enable_mt is not None:
            self.enable_mt = enable_mt
        if may_reject_jobs is not None:
            self.may_reject_jobs = may_reject_jobs
        if source_locales is not None:
            self.source_locales = source_locales
        if target_locales is not None:
            self.target_locales = target_locales
        if workflow_steps is not None:
            self.workflow_steps = workflow_steps
        if clients is not None:
            self.clients = clients
        if domains is not None:
            self.domains = domains
        if sub_domains is not None:
            self.sub_domains = sub_domains
        if net_rate_scheme is not None:
            self.net_rate_scheme = net_rate_scheme
        if translation_price_list is not None:
            self.translation_price_list = translation_price_list
        AbstractUserEditDto.__init__(self, *args, **kwargs)

    @property
    def edit_all_terms_in_tb(self) -> bool:
        """Gets the edit_all_terms_in_tb of this LINGUISTEDIT.  # noqa: E501

        Edit all terms in TB. Default: false  # noqa: E501

        :return: The edit_all_terms_in_tb of this LINGUISTEDIT.  # noqa: E501
        :rtype: bool
        """
        return self._edit_all_terms_in_tb

    @edit_all_terms_in_tb.setter
    def edit_all_terms_in_tb(self, edit_all_terms_in_tb):
        """Sets the edit_all_terms_in_tb of this LINGUISTEDIT.

        Edit all terms in TB. Default: false  # noqa: E501

        :param edit_all_terms_in_tb: The edit_all_terms_in_tb of this LINGUISTEDIT.  # noqa: E501
        :type: bool
        """

        self._edit_all_terms_in_tb = edit_all_terms_in_tb

    @property
    def edit_translations_in_tm(self) -> bool:
        """Gets the edit_translations_in_tm of this LINGUISTEDIT.  # noqa: E501

        Edit translations in TM. Default: false  # noqa: E501

        :return: The edit_translations_in_tm of this LINGUISTEDIT.  # noqa: E501
        :rtype: bool
        """
        return self._edit_translations_in_tm

    @edit_translations_in_tm.setter
    def edit_translations_in_tm(self, edit_translations_in_tm):
        """Sets the edit_translations_in_tm of this LINGUISTEDIT.

        Edit translations in TM. Default: false  # noqa: E501

        :param edit_translations_in_tm: The edit_translations_in_tm of this LINGUISTEDIT.  # noqa: E501
        :type: bool
        """

        self._edit_translations_in_tm = edit_translations_in_tm

    @property
    def enable_mt(self) -> bool:
        """Gets the enable_mt of this LINGUISTEDIT.  # noqa: E501

        Enable MT. Default: true  # noqa: E501

        :return: The enable_mt of this LINGUISTEDIT.  # noqa: E501
        :rtype: bool
        """
        return self._enable_mt

    @enable_mt.setter
    def enable_mt(self, enable_mt):
        """Sets the enable_mt of this LINGUISTEDIT.

        Enable MT. Default: true  # noqa: E501

        :param enable_mt: The enable_mt of this LINGUISTEDIT.  # noqa: E501
        :type: bool
        """

        self._enable_mt = enable_mt

    @property
    def may_reject_jobs(self) -> bool:
        """Gets the may_reject_jobs of this LINGUISTEDIT.  # noqa: E501

        Reject jobs. Default: false  # noqa: E501

        :return: The may_reject_jobs of this LINGUISTEDIT.  # noqa: E501
        :rtype: bool
        """
        return self._may_reject_jobs

    @may_reject_jobs.setter
    def may_reject_jobs(self, may_reject_jobs):
        """Sets the may_reject_jobs of this LINGUISTEDIT.

        Reject jobs. Default: false  # noqa: E501

        :param may_reject_jobs: The may_reject_jobs of this LINGUISTEDIT.  # noqa: E501
        :type: bool
        """

        self._may_reject_jobs = may_reject_jobs

    @property
    def source_locales(self) -> list[str]:
        """Gets the source_locales of this LINGUISTEDIT.  # noqa: E501


        :return: The source_locales of this LINGUISTEDIT.  # noqa: E501
        :rtype: list[str]
        """
        return self._source_locales

    @source_locales.setter
    def source_locales(self, source_locales):
        """Sets the source_locales of this LINGUISTEDIT.


        :param source_locales: The source_locales of this LINGUISTEDIT.  # noqa: E501
        :type: list[str]
        """

        self._source_locales = source_locales

    @property
    def target_locales(self) -> list[str]:
        """Gets the target_locales of this LINGUISTEDIT.  # noqa: E501


        :return: The target_locales of this LINGUISTEDIT.  # noqa: E501
        :rtype: list[str]
        """
        return self._target_locales

    @target_locales.setter
    def target_locales(self, target_locales):
        """Sets the target_locales of this LINGUISTEDIT.


        :param target_locales: The target_locales of this LINGUISTEDIT.  # noqa: E501
        :type: list[str]
        """

        self._target_locales = target_locales

    @property
    def workflow_steps(self) -> list[UidReference]:
        """Gets the workflow_steps of this LINGUISTEDIT.  # noqa: E501


        :return: The workflow_steps of this LINGUISTEDIT.  # noqa: E501
        :rtype: list[UidReference]
        """
        return self._workflow_steps

    @workflow_steps.setter
    def workflow_steps(self, workflow_steps):
        """Sets the workflow_steps of this LINGUISTEDIT.


        :param workflow_steps: The workflow_steps of this LINGUISTEDIT.  # noqa: E501
        :type: list[UidReference]
        """

        self._workflow_steps = workflow_steps

    @property
    def clients(self) -> list[UidReference]:
        """Gets the clients of this LINGUISTEDIT.  # noqa: E501


        :return: The clients of this LINGUISTEDIT.  # noqa: E501
        :rtype: list[UidReference]
        """
        return self._clients

    @clients.setter
    def clients(self, clients):
        """Sets the clients of this LINGUISTEDIT.


        :param clients: The clients of this LINGUISTEDIT.  # noqa: E501
        :type: list[UidReference]
        """

        self._clients = clients

    @property
    def domains(self) -> list[UidReference]:
        """Gets the domains of this LINGUISTEDIT.  # noqa: E501


        :return: The domains of this LINGUISTEDIT.  # noqa: E501
        :rtype: list[UidReference]
        """
        return self._domains

    @domains.setter
    def domains(self, domains):
        """Sets the domains of this LINGUISTEDIT.


        :param domains: The domains of this LINGUISTEDIT.  # noqa: E501
        :type: list[UidReference]
        """

        self._domains = domains

    @property
    def sub_domains(self) -> list[UidReference]:
        """Gets the sub_domains of this LINGUISTEDIT.  # noqa: E501


        :return: The sub_domains of this LINGUISTEDIT.  # noqa: E501
        :rtype: list[UidReference]
        """
        return self._sub_domains

    @sub_domains.setter
    def sub_domains(self, sub_domains):
        """Sets the sub_domains of this LINGUISTEDIT.


        :param sub_domains: The sub_domains of this LINGUISTEDIT.  # noqa: E501
        :type: list[UidReference]
        """

        self._sub_domains = sub_domains

    @property
    def net_rate_scheme(self) -> UidReference:
        """Gets the net_rate_scheme of this LINGUISTEDIT.  # noqa: E501


        :return: The net_rate_scheme of this LINGUISTEDIT.  # noqa: E501
        :rtype: UidReference
        """
        return self._net_rate_scheme

    @net_rate_scheme.setter
    def net_rate_scheme(self, net_rate_scheme):
        """Sets the net_rate_scheme of this LINGUISTEDIT.


        :param net_rate_scheme: The net_rate_scheme of this LINGUISTEDIT.  # noqa: E501
        :type: UidReference
        """

        self._net_rate_scheme = net_rate_scheme

    @property
    def translation_price_list(self) -> UidReference:
        """Gets the translation_price_list of this LINGUISTEDIT.  # noqa: E501


        :return: The translation_price_list of this LINGUISTEDIT.  # noqa: E501
        :rtype: UidReference
        """
        return self._translation_price_list

    @translation_price_list.setter
    def translation_price_list(self, translation_price_list):
        """Sets the translation_price_list of this LINGUISTEDIT.


        :param translation_price_list: The translation_price_list of this LINGUISTEDIT.  # noqa: E501
        :type: UidReference
        """

        self._translation_price_list = translation_price_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(LINGUISTEDIT, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LINGUISTEDIT):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
