# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from datetime import datetime

import six

from phrasetms_client.models import (
    CustomFieldInstanceApiDto,
    LqaProfilesForWsV2Dto,
    IdReference,
)


class EditProjectV2Dto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "name": "str",
        "status": "str",
        "client": "IdReference",
        "business_unit": "IdReference",
        "domain": "IdReference",
        "sub_domain": "IdReference",
        "owner": "IdReference",
        "purchase_order": "str",
        "date_due": "datetime",
        "note": "str",
        "file_handover": "bool",
        "lqa_profiles": "list[LqaProfilesForWsV2Dto]",
        "archived": "bool",
        "custom_fields": "list[CustomFieldInstanceApiDto]",
    }

    attribute_map = {
        "name": "name",
        "status": "status",
        "client": "client",
        "business_unit": "businessUnit",
        "domain": "domain",
        "sub_domain": "subDomain",
        "owner": "owner",
        "purchase_order": "purchaseOrder",
        "date_due": "dateDue",
        "note": "note",
        "file_handover": "fileHandover",
        "lqa_profiles": "lqaProfiles",
        "archived": "archived",
        "custom_fields": "customFields",
    }

    def __init__(
        self,
        name=None,
        status=None,
        client=None,
        business_unit=None,
        domain=None,
        sub_domain=None,
        owner=None,
        purchase_order=None,
        date_due=None,
        note=None,
        file_handover=None,
        lqa_profiles=None,
        archived=None,
        custom_fields=None,
    ):  # noqa: E501
        """EditProjectV2Dto - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._status = None
        self._client = None
        self._business_unit = None
        self._domain = None
        self._sub_domain = None
        self._owner = None
        self._purchase_order = None
        self._date_due = None
        self._note = None
        self._file_handover = None
        self._lqa_profiles = None
        self._archived = None
        self._custom_fields = None
        self.discriminator = None
        self.name = name
        if status is not None:
            self.status = status
        if client is not None:
            self.client = client
        if business_unit is not None:
            self.business_unit = business_unit
        if domain is not None:
            self.domain = domain
        if sub_domain is not None:
            self.sub_domain = sub_domain
        if owner is not None:
            self.owner = owner
        if purchase_order is not None:
            self.purchase_order = purchase_order
        if date_due is not None:
            self.date_due = date_due
        if note is not None:
            self.note = note
        if file_handover is not None:
            self.file_handover = file_handover
        if lqa_profiles is not None:
            self.lqa_profiles = lqa_profiles
        if archived is not None:
            self.archived = archived
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def name(self) -> str:
        """Gets the name of this EditProjectV2Dto.  # noqa: E501


        :return: The name of this EditProjectV2Dto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EditProjectV2Dto.


        :param name: The name of this EditProjectV2Dto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError(
                "Invalid value for `name`, must not be `None`"
            )  # noqa: E501

        self._name = name

    @property
    def status(self) -> str:
        """Gets the status of this EditProjectV2Dto.  # noqa: E501


        :return: The status of this EditProjectV2Dto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EditProjectV2Dto.


        :param status: The status of this EditProjectV2Dto.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "NEW",
            "ASSIGNED",
            "COMPLETED",
            "ACCEPTED_BY_VENDOR",
            "DECLINED_BY_VENDOR",
            "COMPLETED_BY_VENDOR",
            "CANCELLED",
        ]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}".format(  # noqa: E501
                    status, allowed_values
                )
            )

        self._status = status

    @property
    def client(self) -> IdReference:
        """Gets the client of this EditProjectV2Dto.  # noqa: E501


        :return: The client of this EditProjectV2Dto.  # noqa: E501
        :rtype: IdReference
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this EditProjectV2Dto.


        :param client: The client of this EditProjectV2Dto.  # noqa: E501
        :type: IdReference
        """

        self._client = client

    @property
    def business_unit(self) -> IdReference:
        """Gets the business_unit of this EditProjectV2Dto.  # noqa: E501


        :return: The business_unit of this EditProjectV2Dto.  # noqa: E501
        :rtype: IdReference
        """
        return self._business_unit

    @business_unit.setter
    def business_unit(self, business_unit):
        """Sets the business_unit of this EditProjectV2Dto.


        :param business_unit: The business_unit of this EditProjectV2Dto.  # noqa: E501
        :type: IdReference
        """

        self._business_unit = business_unit

    @property
    def domain(self) -> IdReference:
        """Gets the domain of this EditProjectV2Dto.  # noqa: E501


        :return: The domain of this EditProjectV2Dto.  # noqa: E501
        :rtype: IdReference
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this EditProjectV2Dto.


        :param domain: The domain of this EditProjectV2Dto.  # noqa: E501
        :type: IdReference
        """

        self._domain = domain

    @property
    def sub_domain(self) -> IdReference:
        """Gets the sub_domain of this EditProjectV2Dto.  # noqa: E501


        :return: The sub_domain of this EditProjectV2Dto.  # noqa: E501
        :rtype: IdReference
        """
        return self._sub_domain

    @sub_domain.setter
    def sub_domain(self, sub_domain):
        """Sets the sub_domain of this EditProjectV2Dto.


        :param sub_domain: The sub_domain of this EditProjectV2Dto.  # noqa: E501
        :type: IdReference
        """

        self._sub_domain = sub_domain

    @property
    def owner(self) -> IdReference:
        """Gets the owner of this EditProjectV2Dto.  # noqa: E501


        :return: The owner of this EditProjectV2Dto.  # noqa: E501
        :rtype: IdReference
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this EditProjectV2Dto.


        :param owner: The owner of this EditProjectV2Dto.  # noqa: E501
        :type: IdReference
        """

        self._owner = owner

    @property
    def purchase_order(self) -> str:
        """Gets the purchase_order of this EditProjectV2Dto.  # noqa: E501


        :return: The purchase_order of this EditProjectV2Dto.  # noqa: E501
        :rtype: str
        """
        return self._purchase_order

    @purchase_order.setter
    def purchase_order(self, purchase_order):
        """Sets the purchase_order of this EditProjectV2Dto.


        :param purchase_order: The purchase_order of this EditProjectV2Dto.  # noqa: E501
        :type: str
        """

        self._purchase_order = purchase_order

    @property
    def date_due(self) -> datetime:
        """Gets the date_due of this EditProjectV2Dto.  # noqa: E501


        :return: The date_due of this EditProjectV2Dto.  # noqa: E501
        :rtype: datetime
        """
        return self._date_due

    @date_due.setter
    def date_due(self, date_due):
        """Sets the date_due of this EditProjectV2Dto.


        :param date_due: The date_due of this EditProjectV2Dto.  # noqa: E501
        :type: datetime
        """

        self._date_due = date_due

    @property
    def note(self) -> str:
        """Gets the note of this EditProjectV2Dto.  # noqa: E501


        :return: The note of this EditProjectV2Dto.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this EditProjectV2Dto.


        :param note: The note of this EditProjectV2Dto.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def file_handover(self) -> bool:
        """Gets the file_handover of this EditProjectV2Dto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The file_handover of this EditProjectV2Dto.  # noqa: E501
        :rtype: bool
        """
        return self._file_handover

    @file_handover.setter
    def file_handover(self, file_handover):
        """Sets the file_handover of this EditProjectV2Dto.

        Default: false  # noqa: E501

        :param file_handover: The file_handover of this EditProjectV2Dto.  # noqa: E501
        :type: bool
        """

        self._file_handover = file_handover

    @property
    def lqa_profiles(self) -> list[LqaProfilesForWsV2Dto]:
        """Gets the lqa_profiles of this EditProjectV2Dto.  # noqa: E501

        Lqa profiles that will be added to workflow steps  # noqa: E501

        :return: The lqa_profiles of this EditProjectV2Dto.  # noqa: E501
        :rtype: list[LqaProfilesForWsV2Dto]
        """
        return self._lqa_profiles

    @lqa_profiles.setter
    def lqa_profiles(self, lqa_profiles):
        """Sets the lqa_profiles of this EditProjectV2Dto.

        Lqa profiles that will be added to workflow steps  # noqa: E501

        :param lqa_profiles: The lqa_profiles of this EditProjectV2Dto.  # noqa: E501
        :type: list[LqaProfilesForWsV2Dto]
        """

        self._lqa_profiles = lqa_profiles

    @property
    def archived(self) -> bool:
        """Gets the archived of this EditProjectV2Dto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The archived of this EditProjectV2Dto.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this EditProjectV2Dto.

        Default: false  # noqa: E501

        :param archived: The archived of this EditProjectV2Dto.  # noqa: E501
        :type: bool
        """

        self._archived = archived

    @property
    def custom_fields(self) -> list[CustomFieldInstanceApiDto]:
        """Gets the custom_fields of this EditProjectV2Dto.  # noqa: E501

        Custom fields for project  # noqa: E501

        :return: The custom_fields of this EditProjectV2Dto.  # noqa: E501
        :rtype: list[CustomFieldInstanceApiDto]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this EditProjectV2Dto.

        Custom fields for project  # noqa: E501

        :param custom_fields: The custom_fields of this EditProjectV2Dto.  # noqa: E501
        :type: list[CustomFieldInstanceApiDto]
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(EditProjectV2Dto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditProjectV2Dto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
