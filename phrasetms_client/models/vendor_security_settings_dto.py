# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from phrasetms_client.models import UidReference


class VendorSecuritySettingsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "can_change_shared_job_due_date_enabled": "bool",
        "can_change_shared_job_due_date": "list[UidReference]",
        "job_vendors_may_upload_references": "bool",
    }

    attribute_map = {
        "can_change_shared_job_due_date_enabled": "canChangeSharedJobDueDateEnabled",
        "can_change_shared_job_due_date": "canChangeSharedJobDueDate",
        "job_vendors_may_upload_references": "jobVendorsMayUploadReferences",
    }

    def __init__(
        self,
        can_change_shared_job_due_date_enabled=None,
        can_change_shared_job_due_date=None,
        job_vendors_may_upload_references=None,
    ):  # noqa: E501
        """VendorSecuritySettingsDto - a model defined in Swagger"""  # noqa: E501
        self._can_change_shared_job_due_date_enabled = None
        self._can_change_shared_job_due_date = None
        self._job_vendors_may_upload_references = None
        self.discriminator = None
        if can_change_shared_job_due_date_enabled is not None:
            self.can_change_shared_job_due_date_enabled = (
                can_change_shared_job_due_date_enabled
            )
        if can_change_shared_job_due_date is not None:
            self.can_change_shared_job_due_date = can_change_shared_job_due_date
        if job_vendors_may_upload_references is not None:
            self.job_vendors_may_upload_references = job_vendors_may_upload_references

    @property
    def can_change_shared_job_due_date_enabled(self) -> bool:
        """Gets the can_change_shared_job_due_date_enabled of this VendorSecuritySettingsDto.  # noqa: E501

        Default: `false`  # noqa: E501

        :return: The can_change_shared_job_due_date_enabled of this VendorSecuritySettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._can_change_shared_job_due_date_enabled

    @can_change_shared_job_due_date_enabled.setter
    def can_change_shared_job_due_date_enabled(
        self, can_change_shared_job_due_date_enabled
    ):
        """Sets the can_change_shared_job_due_date_enabled of this VendorSecuritySettingsDto.

        Default: `false`  # noqa: E501

        :param can_change_shared_job_due_date_enabled: The can_change_shared_job_due_date_enabled of this VendorSecuritySettingsDto.  # noqa: E501
        :type: bool
        """

        self._can_change_shared_job_due_date_enabled = (
            can_change_shared_job_due_date_enabled
        )

    @property
    def can_change_shared_job_due_date(self) -> list[UidReference]:
        """Gets the can_change_shared_job_due_date of this VendorSecuritySettingsDto.  # noqa: E501


        :return: The can_change_shared_job_due_date of this VendorSecuritySettingsDto.  # noqa: E501
        :rtype: list[UidReference]
        """
        return self._can_change_shared_job_due_date

    @can_change_shared_job_due_date.setter
    def can_change_shared_job_due_date(self, can_change_shared_job_due_date):
        """Sets the can_change_shared_job_due_date of this VendorSecuritySettingsDto.


        :param can_change_shared_job_due_date: The can_change_shared_job_due_date of this VendorSecuritySettingsDto.  # noqa: E501
        :type: list[UidReference]
        """

        self._can_change_shared_job_due_date = can_change_shared_job_due_date

    @property
    def job_vendors_may_upload_references(self) -> bool:
        """Gets the job_vendors_may_upload_references of this VendorSecuritySettingsDto.  # noqa: E501

        Default: `false`  # noqa: E501

        :return: The job_vendors_may_upload_references of this VendorSecuritySettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._job_vendors_may_upload_references

    @job_vendors_may_upload_references.setter
    def job_vendors_may_upload_references(self, job_vendors_may_upload_references):
        """Sets the job_vendors_may_upload_references of this VendorSecuritySettingsDto.

        Default: `false`  # noqa: E501

        :param job_vendors_may_upload_references: The job_vendors_may_upload_references of this VendorSecuritySettingsDto.  # noqa: E501
        :type: bool
        """

        self._job_vendors_may_upload_references = job_vendors_may_upload_references

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(VendorSecuritySettingsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VendorSecuritySettingsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
