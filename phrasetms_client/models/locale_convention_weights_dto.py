# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from phrasetms_client.models import ToggleableWeightDto


class LocaleConventionWeightsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "locale_convention": "ToggleableWeightDto",
        "address_format": "ToggleableWeightDto",
        "date_format": "ToggleableWeightDto",
        "currency_format": "ToggleableWeightDto",
        "measurement_format": "ToggleableWeightDto",
        "shortcut_key": "ToggleableWeightDto",
        "telephone_format": "ToggleableWeightDto",
    }

    attribute_map = {
        "locale_convention": "localeConvention",
        "address_format": "addressFormat",
        "date_format": "dateFormat",
        "currency_format": "currencyFormat",
        "measurement_format": "measurementFormat",
        "shortcut_key": "shortcutKey",
        "telephone_format": "telephoneFormat",
    }

    def __init__(
        self,
        locale_convention=None,
        address_format=None,
        date_format=None,
        currency_format=None,
        measurement_format=None,
        shortcut_key=None,
        telephone_format=None,
    ):  # noqa: E501
        """LocaleConventionWeightsDto - a model defined in Swagger"""  # noqa: E501
        self._locale_convention = None
        self._address_format = None
        self._date_format = None
        self._currency_format = None
        self._measurement_format = None
        self._shortcut_key = None
        self._telephone_format = None
        self.discriminator = None
        if locale_convention is not None:
            self.locale_convention = locale_convention
        if address_format is not None:
            self.address_format = address_format
        if date_format is not None:
            self.date_format = date_format
        if currency_format is not None:
            self.currency_format = currency_format
        if measurement_format is not None:
            self.measurement_format = measurement_format
        if shortcut_key is not None:
            self.shortcut_key = shortcut_key
        if telephone_format is not None:
            self.telephone_format = telephone_format

    @property
    def locale_convention(self) -> ToggleableWeightDto:
        """Gets the locale_convention of this LocaleConventionWeightsDto.  # noqa: E501


        :return: The locale_convention of this LocaleConventionWeightsDto.  # noqa: E501
        :rtype: ToggleableWeightDto
        """
        return self._locale_convention

    @locale_convention.setter
    def locale_convention(self, locale_convention):
        """Sets the locale_convention of this LocaleConventionWeightsDto.


        :param locale_convention: The locale_convention of this LocaleConventionWeightsDto.  # noqa: E501
        :type: ToggleableWeightDto
        """

        self._locale_convention = locale_convention

    @property
    def address_format(self) -> ToggleableWeightDto:
        """Gets the address_format of this LocaleConventionWeightsDto.  # noqa: E501


        :return: The address_format of this LocaleConventionWeightsDto.  # noqa: E501
        :rtype: ToggleableWeightDto
        """
        return self._address_format

    @address_format.setter
    def address_format(self, address_format):
        """Sets the address_format of this LocaleConventionWeightsDto.


        :param address_format: The address_format of this LocaleConventionWeightsDto.  # noqa: E501
        :type: ToggleableWeightDto
        """

        self._address_format = address_format

    @property
    def date_format(self) -> ToggleableWeightDto:
        """Gets the date_format of this LocaleConventionWeightsDto.  # noqa: E501


        :return: The date_format of this LocaleConventionWeightsDto.  # noqa: E501
        :rtype: ToggleableWeightDto
        """
        return self._date_format

    @date_format.setter
    def date_format(self, date_format):
        """Sets the date_format of this LocaleConventionWeightsDto.


        :param date_format: The date_format of this LocaleConventionWeightsDto.  # noqa: E501
        :type: ToggleableWeightDto
        """

        self._date_format = date_format

    @property
    def currency_format(self) -> ToggleableWeightDto:
        """Gets the currency_format of this LocaleConventionWeightsDto.  # noqa: E501


        :return: The currency_format of this LocaleConventionWeightsDto.  # noqa: E501
        :rtype: ToggleableWeightDto
        """
        return self._currency_format

    @currency_format.setter
    def currency_format(self, currency_format):
        """Sets the currency_format of this LocaleConventionWeightsDto.


        :param currency_format: The currency_format of this LocaleConventionWeightsDto.  # noqa: E501
        :type: ToggleableWeightDto
        """

        self._currency_format = currency_format

    @property
    def measurement_format(self) -> ToggleableWeightDto:
        """Gets the measurement_format of this LocaleConventionWeightsDto.  # noqa: E501


        :return: The measurement_format of this LocaleConventionWeightsDto.  # noqa: E501
        :rtype: ToggleableWeightDto
        """
        return self._measurement_format

    @measurement_format.setter
    def measurement_format(self, measurement_format):
        """Sets the measurement_format of this LocaleConventionWeightsDto.


        :param measurement_format: The measurement_format of this LocaleConventionWeightsDto.  # noqa: E501
        :type: ToggleableWeightDto
        """

        self._measurement_format = measurement_format

    @property
    def shortcut_key(self) -> ToggleableWeightDto:
        """Gets the shortcut_key of this LocaleConventionWeightsDto.  # noqa: E501


        :return: The shortcut_key of this LocaleConventionWeightsDto.  # noqa: E501
        :rtype: ToggleableWeightDto
        """
        return self._shortcut_key

    @shortcut_key.setter
    def shortcut_key(self, shortcut_key):
        """Sets the shortcut_key of this LocaleConventionWeightsDto.


        :param shortcut_key: The shortcut_key of this LocaleConventionWeightsDto.  # noqa: E501
        :type: ToggleableWeightDto
        """

        self._shortcut_key = shortcut_key

    @property
    def telephone_format(self) -> ToggleableWeightDto:
        """Gets the telephone_format of this LocaleConventionWeightsDto.  # noqa: E501


        :return: The telephone_format of this LocaleConventionWeightsDto.  # noqa: E501
        :rtype: ToggleableWeightDto
        """
        return self._telephone_format

    @telephone_format.setter
    def telephone_format(self, telephone_format):
        """Sets the telephone_format of this LocaleConventionWeightsDto.


        :param telephone_format: The telephone_format of this LocaleConventionWeightsDto.  # noqa: E501
        :type: ToggleableWeightDto
        """

        self._telephone_format = telephone_format

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(LocaleConventionWeightsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocaleConventionWeightsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
