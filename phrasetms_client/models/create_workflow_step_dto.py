# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CreateWorkflowStepDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "name": "str",
        "order": "int",
        "lqa_enabled": "bool",
        "abbr": "str",
    }

    attribute_map = {
        "name": "name",
        "order": "order",
        "lqa_enabled": "lqaEnabled",
        "abbr": "abbr",
    }

    def __init__(
        self, name=None, order=None, lqa_enabled=None, abbr=None
    ):  # noqa: E501
        """CreateWorkflowStepDto - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._order = None
        self._lqa_enabled = None
        self._abbr = None
        self.discriminator = None
        self.name = name
        if order is not None:
            self.order = order
        if lqa_enabled is not None:
            self.lqa_enabled = lqa_enabled
        self.abbr = abbr

    @property
    def name(self) -> str:
        """Gets the name of this CreateWorkflowStepDto.  # noqa: E501

        Name of the lqa workflow step  # noqa: E501

        :return: The name of this CreateWorkflowStepDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateWorkflowStepDto.

        Name of the lqa workflow step  # noqa: E501

        :param name: The name of this CreateWorkflowStepDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError(
                "Invalid value for `name`, must not be `None`"
            )  # noqa: E501

        self._name = name

    @property
    def order(self) -> int:
        """Gets the order of this CreateWorkflowStepDto.  # noqa: E501

        Order value  # noqa: E501

        :return: The order of this CreateWorkflowStepDto.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this CreateWorkflowStepDto.

        Order value  # noqa: E501

        :param order: The order of this CreateWorkflowStepDto.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def lqa_enabled(self) -> bool:
        """Gets the lqa_enabled of this CreateWorkflowStepDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The lqa_enabled of this CreateWorkflowStepDto.  # noqa: E501
        :rtype: bool
        """
        return self._lqa_enabled

    @lqa_enabled.setter
    def lqa_enabled(self, lqa_enabled):
        """Sets the lqa_enabled of this CreateWorkflowStepDto.

        Default: false  # noqa: E501

        :param lqa_enabled: The lqa_enabled of this CreateWorkflowStepDto.  # noqa: E501
        :type: bool
        """

        self._lqa_enabled = lqa_enabled

    @property
    def abbr(self) -> str:
        """Gets the abbr of this CreateWorkflowStepDto.  # noqa: E501

        Abbreviation  # noqa: E501

        :return: The abbr of this CreateWorkflowStepDto.  # noqa: E501
        :rtype: str
        """
        return self._abbr

    @abbr.setter
    def abbr(self, abbr):
        """Sets the abbr of this CreateWorkflowStepDto.

        Abbreviation  # noqa: E501

        :param abbr: The abbr of this CreateWorkflowStepDto.  # noqa: E501
        :type: str
        """
        if abbr is None:
            raise ValueError(
                "Invalid value for `abbr`, must not be `None`"
            )  # noqa: E501

        self._abbr = abbr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(CreateWorkflowStepDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateWorkflowStepDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
