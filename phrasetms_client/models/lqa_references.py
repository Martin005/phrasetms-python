# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class LQAReferences(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "task_id": "str",
        "job_part_uid": "str",
        "trans_group_id": "int",
        "segment_id": "str",
        "conversation_title": "str",
        "conversation_title_offset": "int",
        "commented_text": "str",
        "correlation": "ReferenceCorrelation",
        "lqa": "list[LQAReference]",
    }

    attribute_map = {
        "task_id": "taskId",
        "job_part_uid": "jobPartUid",
        "trans_group_id": "transGroupId",
        "segment_id": "segmentId",
        "conversation_title": "conversationTitle",
        "conversation_title_offset": "conversationTitleOffset",
        "commented_text": "commentedText",
        "correlation": "correlation",
        "lqa": "lqa",
    }

    def __init__(
        self,
        task_id=None,
        job_part_uid=None,
        trans_group_id=None,
        segment_id=None,
        conversation_title=None,
        conversation_title_offset=None,
        commented_text=None,
        correlation=None,
        lqa=None,
    ):  # noqa: E501
        """LQAReferences - a model defined in Swagger"""  # noqa: E501
        self._task_id = None
        self._job_part_uid = None
        self._trans_group_id = None
        self._segment_id = None
        self._conversation_title = None
        self._conversation_title_offset = None
        self._commented_text = None
        self._correlation = None
        self._lqa = None
        self.discriminator = None
        if task_id is not None:
            self.task_id = task_id
        if job_part_uid is not None:
            self.job_part_uid = job_part_uid
        self.trans_group_id = trans_group_id
        self.segment_id = segment_id
        if conversation_title is not None:
            self.conversation_title = conversation_title
        if conversation_title_offset is not None:
            self.conversation_title_offset = conversation_title_offset
        if commented_text is not None:
            self.commented_text = commented_text
        if correlation is not None:
            self.correlation = correlation
        self.lqa = lqa

    @property
    def task_id(self) -> str:
        """Gets the task_id of this LQAReferences.  # noqa: E501


        :return: The task_id of this LQAReferences.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this LQAReferences.


        :param task_id: The task_id of this LQAReferences.  # noqa: E501
        :type: str
        """

        self._task_id = task_id

    @property
    def job_part_uid(self) -> str:
        """Gets the job_part_uid of this LQAReferences.  # noqa: E501


        :return: The job_part_uid of this LQAReferences.  # noqa: E501
        :rtype: str
        """
        return self._job_part_uid

    @job_part_uid.setter
    def job_part_uid(self, job_part_uid):
        """Sets the job_part_uid of this LQAReferences.


        :param job_part_uid: The job_part_uid of this LQAReferences.  # noqa: E501
        :type: str
        """

        self._job_part_uid = job_part_uid

    @property
    def trans_group_id(self) -> int:
        """Gets the trans_group_id of this LQAReferences.  # noqa: E501


        :return: The trans_group_id of this LQAReferences.  # noqa: E501
        :rtype: int
        """
        return self._trans_group_id

    @trans_group_id.setter
    def trans_group_id(self, trans_group_id):
        """Sets the trans_group_id of this LQAReferences.


        :param trans_group_id: The trans_group_id of this LQAReferences.  # noqa: E501
        :type: int
        """
        if trans_group_id is None:
            raise ValueError(
                "Invalid value for `trans_group_id`, must not be `None`"
            )  # noqa: E501

        self._trans_group_id = trans_group_id

    @property
    def segment_id(self) -> str:
        """Gets the segment_id of this LQAReferences.  # noqa: E501


        :return: The segment_id of this LQAReferences.  # noqa: E501
        :rtype: str
        """
        return self._segment_id

    @segment_id.setter
    def segment_id(self, segment_id):
        """Sets the segment_id of this LQAReferences.


        :param segment_id: The segment_id of this LQAReferences.  # noqa: E501
        :type: str
        """
        if segment_id is None:
            raise ValueError(
                "Invalid value for `segment_id`, must not be `None`"
            )  # noqa: E501

        self._segment_id = segment_id

    @property
    def conversation_title(self) -> str:
        """Gets the conversation_title of this LQAReferences.  # noqa: E501


        :return: The conversation_title of this LQAReferences.  # noqa: E501
        :rtype: str
        """
        return self._conversation_title

    @conversation_title.setter
    def conversation_title(self, conversation_title):
        """Sets the conversation_title of this LQAReferences.


        :param conversation_title: The conversation_title of this LQAReferences.  # noqa: E501
        :type: str
        """

        self._conversation_title = conversation_title

    @property
    def conversation_title_offset(self) -> int:
        """Gets the conversation_title_offset of this LQAReferences.  # noqa: E501


        :return: The conversation_title_offset of this LQAReferences.  # noqa: E501
        :rtype: int
        """
        return self._conversation_title_offset

    @conversation_title_offset.setter
    def conversation_title_offset(self, conversation_title_offset):
        """Sets the conversation_title_offset of this LQAReferences.


        :param conversation_title_offset: The conversation_title_offset of this LQAReferences.  # noqa: E501
        :type: int
        """

        self._conversation_title_offset = conversation_title_offset

    @property
    def commented_text(self) -> str:
        """Gets the commented_text of this LQAReferences.  # noqa: E501


        :return: The commented_text of this LQAReferences.  # noqa: E501
        :rtype: str
        """
        return self._commented_text

    @commented_text.setter
    def commented_text(self, commented_text):
        """Sets the commented_text of this LQAReferences.


        :param commented_text: The commented_text of this LQAReferences.  # noqa: E501
        :type: str
        """

        self._commented_text = commented_text

    @property
    def correlation(self) -> ReferenceCorrelation:
        """Gets the correlation of this LQAReferences.  # noqa: E501


        :return: The correlation of this LQAReferences.  # noqa: E501
        :rtype: ReferenceCorrelation
        """
        return self._correlation

    @correlation.setter
    def correlation(self, correlation):
        """Sets the correlation of this LQAReferences.


        :param correlation: The correlation of this LQAReferences.  # noqa: E501
        :type: ReferenceCorrelation
        """

        self._correlation = correlation

    @property
    def lqa(self) -> list[LQAReference]:
        """Gets the lqa of this LQAReferences.  # noqa: E501


        :return: The lqa of this LQAReferences.  # noqa: E501
        :rtype: list[LQAReference]
        """
        return self._lqa

    @lqa.setter
    def lqa(self, lqa):
        """Sets the lqa of this LQAReferences.


        :param lqa: The lqa of this LQAReferences.  # noqa: E501
        :type: list[LQAReference]
        """
        if lqa is None:
            raise ValueError(
                "Invalid value for `lqa`, must not be `None`"
            )  # noqa: E501

        self._lqa = lqa

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(LQAReferences, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LQAReferences):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
