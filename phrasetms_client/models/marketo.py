# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from phrasetms_client.models.abstract_connector_dto import AbstractConnectorDto  # noqa: F401,E501

class Marketo(AbstractConnectorDto):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_key': 'str',
        'api_secret': 'str',
        'identity_url': 'str',
        'connector_type': 'str',
        'variables': 'list[VariableDto]',
        'segmentation_mapping': 'MarketoSegmentationMappingDto',
        'translate_tokens': 'bool',
        'debug_mode': 'bool'
    }
    if hasattr(AbstractConnectorDto, "swagger_types"):
        swagger_types.update(AbstractConnectorDto.swagger_types)

    attribute_map = {
        'api_key': 'apiKey',
        'api_secret': 'apiSecret',
        'identity_url': 'identityURL',
        'connector_type': 'connectorType',
        'variables': 'variables',
        'segmentation_mapping': 'segmentationMapping',
        'translate_tokens': 'translateTokens',
        'debug_mode': 'debugMode'
    }
    if hasattr(AbstractConnectorDto, "attribute_map"):
        attribute_map.update(AbstractConnectorDto.attribute_map)

    def __init__(self, api_key=None, api_secret=None, identity_url=None, connector_type=None, variables=None, segmentation_mapping=None, translate_tokens=None, debug_mode=None, *args, **kwargs):  # noqa: E501
        """Marketo - a model defined in Swagger"""  # noqa: E501
        self._api_key = None
        self._api_secret = None
        self._identity_url = None
        self._connector_type = None
        self._variables = None
        self._segmentation_mapping = None
        self._translate_tokens = None
        self._debug_mode = None
        self.discriminator = None
        self.api_key = api_key
        self.api_secret = api_secret
        self.identity_url = identity_url
        self.connector_type = connector_type
        if variables is not None:
            self.variables = variables
        if segmentation_mapping is not None:
            self.segmentation_mapping = segmentation_mapping
        if translate_tokens is not None:
            self.translate_tokens = translate_tokens
        if debug_mode is not None:
            self.debug_mode = debug_mode
        AbstractConnectorDto.__init__(self, *args, **kwargs)

    @property
    def api_key(self):
        """Gets the api_key of this Marketo.  # noqa: E501


        :return: The api_key of this Marketo.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this Marketo.


        :param api_key: The api_key of this Marketo.  # noqa: E501
        :type: str
        """
        if api_key is None:
            raise ValueError("Invalid value for `api_key`, must not be `None`")  # noqa: E501

        self._api_key = api_key

    @property
    def api_secret(self):
        """Gets the api_secret of this Marketo.  # noqa: E501


        :return: The api_secret of this Marketo.  # noqa: E501
        :rtype: str
        """
        return self._api_secret

    @api_secret.setter
    def api_secret(self, api_secret):
        """Sets the api_secret of this Marketo.


        :param api_secret: The api_secret of this Marketo.  # noqa: E501
        :type: str
        """
        if api_secret is None:
            raise ValueError("Invalid value for `api_secret`, must not be `None`")  # noqa: E501

        self._api_secret = api_secret

    @property
    def identity_url(self):
        """Gets the identity_url of this Marketo.  # noqa: E501


        :return: The identity_url of this Marketo.  # noqa: E501
        :rtype: str
        """
        return self._identity_url

    @identity_url.setter
    def identity_url(self, identity_url):
        """Sets the identity_url of this Marketo.


        :param identity_url: The identity_url of this Marketo.  # noqa: E501
        :type: str
        """
        if identity_url is None:
            raise ValueError("Invalid value for `identity_url`, must not be `None`")  # noqa: E501

        self._identity_url = identity_url

    @property
    def connector_type(self):
        """Gets the connector_type of this Marketo.  # noqa: E501


        :return: The connector_type of this Marketo.  # noqa: E501
        :rtype: str
        """
        return self._connector_type

    @connector_type.setter
    def connector_type(self, connector_type):
        """Sets the connector_type of this Marketo.


        :param connector_type: The connector_type of this Marketo.  # noqa: E501
        :type: str
        """
        if connector_type is None:
            raise ValueError("Invalid value for `connector_type`, must not be `None`")  # noqa: E501

        self._connector_type = connector_type

    @property
    def variables(self):
        """Gets the variables of this Marketo.  # noqa: E501


        :return: The variables of this Marketo.  # noqa: E501
        :rtype: list[VariableDto]
        """
        return self._variables

    @variables.setter
    def variables(self, variables):
        """Sets the variables of this Marketo.


        :param variables: The variables of this Marketo.  # noqa: E501
        :type: list[VariableDto]
        """

        self._variables = variables

    @property
    def segmentation_mapping(self):
        """Gets the segmentation_mapping of this Marketo.  # noqa: E501


        :return: The segmentation_mapping of this Marketo.  # noqa: E501
        :rtype: MarketoSegmentationMappingDto
        """
        return self._segmentation_mapping

    @segmentation_mapping.setter
    def segmentation_mapping(self, segmentation_mapping):
        """Sets the segmentation_mapping of this Marketo.


        :param segmentation_mapping: The segmentation_mapping of this Marketo.  # noqa: E501
        :type: MarketoSegmentationMappingDto
        """

        self._segmentation_mapping = segmentation_mapping

    @property
    def translate_tokens(self):
        """Gets the translate_tokens of this Marketo.  # noqa: E501


        :return: The translate_tokens of this Marketo.  # noqa: E501
        :rtype: bool
        """
        return self._translate_tokens

    @translate_tokens.setter
    def translate_tokens(self, translate_tokens):
        """Sets the translate_tokens of this Marketo.


        :param translate_tokens: The translate_tokens of this Marketo.  # noqa: E501
        :type: bool
        """

        self._translate_tokens = translate_tokens

    @property
    def debug_mode(self):
        """Gets the debug_mode of this Marketo.  # noqa: E501


        :return: The debug_mode of this Marketo.  # noqa: E501
        :rtype: bool
        """
        return self._debug_mode

    @debug_mode.setter
    def debug_mode(self, debug_mode):
        """Sets the debug_mode of this Marketo.


        :param debug_mode: The debug_mode of this Marketo.  # noqa: E501
        :type: bool
        """

        self._debug_mode = debug_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Marketo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Marketo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
