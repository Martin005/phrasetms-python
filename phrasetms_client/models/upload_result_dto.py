# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class UploadResultDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "name": "str",
        "folder": "str",
        "encoded_name": "str",
        "size": "int",
        "error": "str",
        "async_task_id": "str",
        "errors": "ConnectorErrorsDto",
    }

    attribute_map = {
        "id": "id",
        "name": "name",
        "folder": "folder",
        "encoded_name": "encodedName",
        "size": "size",
        "error": "error",
        "async_task_id": "asyncTaskId",
        "errors": "errors",
    }

    def __init__(
        self,
        id=None,
        name=None,
        folder=None,
        encoded_name=None,
        size=None,
        error=None,
        async_task_id=None,
        errors=None,
    ):  # noqa: E501
        """UploadResultDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._folder = None
        self._encoded_name = None
        self._size = None
        self._error = None
        self._async_task_id = None
        self._errors = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if folder is not None:
            self.folder = folder
        if encoded_name is not None:
            self.encoded_name = encoded_name
        if size is not None:
            self.size = size
        if error is not None:
            self.error = error
        if async_task_id is not None:
            self.async_task_id = async_task_id
        if errors is not None:
            self.errors = errors

    @property
    def id(self) -> str:
        """Gets the id of this UploadResultDto.  # noqa: E501


        :return: The id of this UploadResultDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UploadResultDto.


        :param id: The id of this UploadResultDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this UploadResultDto.  # noqa: E501


        :return: The name of this UploadResultDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UploadResultDto.


        :param name: The name of this UploadResultDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def folder(self) -> str:
        """Gets the folder of this UploadResultDto.  # noqa: E501


        :return: The folder of this UploadResultDto.  # noqa: E501
        :rtype: str
        """
        return self._folder

    @folder.setter
    def folder(self, folder):
        """Sets the folder of this UploadResultDto.


        :param folder: The folder of this UploadResultDto.  # noqa: E501
        :type: str
        """

        self._folder = folder

    @property
    def encoded_name(self) -> str:
        """Gets the encoded_name of this UploadResultDto.  # noqa: E501


        :return: The encoded_name of this UploadResultDto.  # noqa: E501
        :rtype: str
        """
        return self._encoded_name

    @encoded_name.setter
    def encoded_name(self, encoded_name):
        """Sets the encoded_name of this UploadResultDto.


        :param encoded_name: The encoded_name of this UploadResultDto.  # noqa: E501
        :type: str
        """

        self._encoded_name = encoded_name

    @property
    def size(self) -> int:
        """Gets the size of this UploadResultDto.  # noqa: E501


        :return: The size of this UploadResultDto.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this UploadResultDto.


        :param size: The size of this UploadResultDto.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def error(self) -> str:
        """Gets the error of this UploadResultDto.  # noqa: E501


        :return: The error of this UploadResultDto.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this UploadResultDto.


        :param error: The error of this UploadResultDto.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def async_task_id(self) -> str:
        """Gets the async_task_id of this UploadResultDto.  # noqa: E501


        :return: The async_task_id of this UploadResultDto.  # noqa: E501
        :rtype: str
        """
        return self._async_task_id

    @async_task_id.setter
    def async_task_id(self, async_task_id):
        """Sets the async_task_id of this UploadResultDto.


        :param async_task_id: The async_task_id of this UploadResultDto.  # noqa: E501
        :type: str
        """

        self._async_task_id = async_task_id

    @property
    def errors(self) -> ConnectorErrorsDto:
        """Gets the errors of this UploadResultDto.  # noqa: E501


        :return: The errors of this UploadResultDto.  # noqa: E501
        :rtype: ConnectorErrorsDto
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this UploadResultDto.


        :param errors: The errors of this UploadResultDto.  # noqa: E501
        :type: ConnectorErrorsDto
        """

        self._errors = errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(UploadResultDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UploadResultDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
