# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MentionDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mention_type': 'str',
        'mention_group_type': 'str',
        'uid_reference': 'UidReference',
        'user_references': 'list[MentionableUserDto]',
        'mentionable_group': 'MentionableGroupDto',
        'tag': 'str'
    }

    attribute_map = {
        'mention_type': 'mentionType',
        'mention_group_type': 'mentionGroupType',
        'uid_reference': 'uidReference',
        'user_references': 'userReferences',
        'mentionable_group': 'mentionableGroup',
        'tag': 'tag'
    }

    def __init__(self, mention_type=None, mention_group_type=None, uid_reference=None, user_references=None, mentionable_group=None, tag=None):  # noqa: E501
        """MentionDto - a model defined in Swagger"""  # noqa: E501
        self._mention_type = None
        self._mention_group_type = None
        self._uid_reference = None
        self._user_references = None
        self._mentionable_group = None
        self._tag = None
        self.discriminator = None
        self.mention_type = mention_type
        if mention_group_type is not None:
            self.mention_group_type = mention_group_type
        if uid_reference is not None:
            self.uid_reference = uid_reference
        if user_references is not None:
            self.user_references = user_references
        if mentionable_group is not None:
            self.mentionable_group = mentionable_group
        if tag is not None:
            self.tag = tag

    @property
    def mention_type(self):
        """Gets the mention_type of this MentionDto.  # noqa: E501


        :return: The mention_type of this MentionDto.  # noqa: E501
        :rtype: str
        """
        return self._mention_type

    @mention_type.setter
    def mention_type(self, mention_type):
        """Sets the mention_type of this MentionDto.


        :param mention_type: The mention_type of this MentionDto.  # noqa: E501
        :type: str
        """
        if mention_type is None:
            raise ValueError("Invalid value for `mention_type`, must not be `None`")  # noqa: E501
        allowed_values = ["USER", "GROUP"]  # noqa: E501
        if mention_type not in allowed_values:
            raise ValueError(
                "Invalid value for `mention_type` ({0}), must be one of {1}"  # noqa: E501
                .format(mention_type, allowed_values)
            )

        self._mention_type = mention_type

    @property
    def mention_group_type(self):
        """Gets the mention_group_type of this MentionDto.  # noqa: E501


        :return: The mention_group_type of this MentionDto.  # noqa: E501
        :rtype: str
        """
        return self._mention_group_type

    @mention_group_type.setter
    def mention_group_type(self, mention_group_type):
        """Sets the mention_group_type of this MentionDto.


        :param mention_group_type: The mention_group_type of this MentionDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["JOB", "OWNERS", "PROVIDERS", "GUESTS", "WORKFLOW_STEP"]  # noqa: E501
        if mention_group_type not in allowed_values:
            raise ValueError(
                "Invalid value for `mention_group_type` ({0}), must be one of {1}"  # noqa: E501
                .format(mention_group_type, allowed_values)
            )

        self._mention_group_type = mention_group_type

    @property
    def uid_reference(self):
        """Gets the uid_reference of this MentionDto.  # noqa: E501


        :return: The uid_reference of this MentionDto.  # noqa: E501
        :rtype: UidReference
        """
        return self._uid_reference

    @uid_reference.setter
    def uid_reference(self, uid_reference):
        """Sets the uid_reference of this MentionDto.


        :param uid_reference: The uid_reference of this MentionDto.  # noqa: E501
        :type: UidReference
        """

        self._uid_reference = uid_reference

    @property
    def user_references(self):
        """Gets the user_references of this MentionDto.  # noqa: E501


        :return: The user_references of this MentionDto.  # noqa: E501
        :rtype: list[MentionableUserDto]
        """
        return self._user_references

    @user_references.setter
    def user_references(self, user_references):
        """Sets the user_references of this MentionDto.


        :param user_references: The user_references of this MentionDto.  # noqa: E501
        :type: list[MentionableUserDto]
        """

        self._user_references = user_references

    @property
    def mentionable_group(self):
        """Gets the mentionable_group of this MentionDto.  # noqa: E501


        :return: The mentionable_group of this MentionDto.  # noqa: E501
        :rtype: MentionableGroupDto
        """
        return self._mentionable_group

    @mentionable_group.setter
    def mentionable_group(self, mentionable_group):
        """Sets the mentionable_group of this MentionDto.


        :param mentionable_group: The mentionable_group of this MentionDto.  # noqa: E501
        :type: MentionableGroupDto
        """

        self._mentionable_group = mentionable_group

    @property
    def tag(self):
        """Gets the tag of this MentionDto.  # noqa: E501


        :return: The tag of this MentionDto.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this MentionDto.


        :param tag: The tag of this MentionDto.  # noqa: E501
        :type: str
        """

        self._tag = tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MentionDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MentionDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
