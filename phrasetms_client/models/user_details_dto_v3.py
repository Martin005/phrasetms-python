# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class UserDetailsDtoV3(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "uid": "str",
        "user_name": "str",
        "first_name": "str",
        "last_name": "str",
        "email": "str",
        "date_created": "datetime",
        "date_deleted": "datetime",
        "created_by": "UserReference",
        "role": "str",
        "timezone": "str",
        "note": "str",
        "receive_newsletter": "bool",
        "active": "bool",
        "pending_email_change": "bool",
    }

    attribute_map = {
        "uid": "uid",
        "user_name": "userName",
        "first_name": "firstName",
        "last_name": "lastName",
        "email": "email",
        "date_created": "dateCreated",
        "date_deleted": "dateDeleted",
        "created_by": "createdBy",
        "role": "role",
        "timezone": "timezone",
        "note": "note",
        "receive_newsletter": "receiveNewsletter",
        "active": "active",
        "pending_email_change": "pendingEmailChange",
    }

    discriminator_value_class_map = {
        "LINGUIST_RESPONSE": "LINGUISTRESPONSE",
        "PROJECT_MANAGER_RESPONSE": "PROJECTMANAGERRESPONSE",
        "ADMIN_RESPONSE": "ADMINRESPONSE",
        "GUEST_RESPONSE": "GUESTRESPONSE",
        "SUBMITTER_RESPONSE": "SUBMITTERRESPONSE",
    }

    def __init__(
        self,
        uid=None,
        user_name=None,
        first_name=None,
        last_name=None,
        email=None,
        date_created=None,
        date_deleted=None,
        created_by=None,
        role=None,
        timezone=None,
        note=None,
        receive_newsletter=None,
        active=None,
        pending_email_change=None,
    ):  # noqa: E501
        """UserDetailsDtoV3 - a model defined in Swagger"""  # noqa: E501
        self._uid = None
        self._user_name = None
        self._first_name = None
        self._last_name = None
        self._email = None
        self._date_created = None
        self._date_deleted = None
        self._created_by = None
        self._role = None
        self._timezone = None
        self._note = None
        self._receive_newsletter = None
        self._active = None
        self._pending_email_change = None
        self.discriminator = "role"
        self.uid = uid
        self.user_name = user_name
        self.first_name = first_name
        self.last_name = last_name
        self.email = email
        if date_created is not None:
            self.date_created = date_created
        if date_deleted is not None:
            self.date_deleted = date_deleted
        if created_by is not None:
            self.created_by = created_by
        self.role = role
        self.timezone = timezone
        if note is not None:
            self.note = note
        if receive_newsletter is not None:
            self.receive_newsletter = receive_newsletter
        if active is not None:
            self.active = active
        if pending_email_change is not None:
            self.pending_email_change = pending_email_change

    @property
    def uid(self) -> str:
        """Gets the uid of this UserDetailsDtoV3.  # noqa: E501


        :return: The uid of this UserDetailsDtoV3.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this UserDetailsDtoV3.


        :param uid: The uid of this UserDetailsDtoV3.  # noqa: E501
        :type: str
        """
        if uid is None:
            raise ValueError(
                "Invalid value for `uid`, must not be `None`"
            )  # noqa: E501

        self._uid = uid

    @property
    def user_name(self) -> str:
        """Gets the user_name of this UserDetailsDtoV3.  # noqa: E501


        :return: The user_name of this UserDetailsDtoV3.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UserDetailsDtoV3.


        :param user_name: The user_name of this UserDetailsDtoV3.  # noqa: E501
        :type: str
        """
        if user_name is None:
            raise ValueError(
                "Invalid value for `user_name`, must not be `None`"
            )  # noqa: E501

        self._user_name = user_name

    @property
    def first_name(self) -> str:
        """Gets the first_name of this UserDetailsDtoV3.  # noqa: E501


        :return: The first_name of this UserDetailsDtoV3.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserDetailsDtoV3.


        :param first_name: The first_name of this UserDetailsDtoV3.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError(
                "Invalid value for `first_name`, must not be `None`"
            )  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self) -> str:
        """Gets the last_name of this UserDetailsDtoV3.  # noqa: E501


        :return: The last_name of this UserDetailsDtoV3.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserDetailsDtoV3.


        :param last_name: The last_name of this UserDetailsDtoV3.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError(
                "Invalid value for `last_name`, must not be `None`"
            )  # noqa: E501

        self._last_name = last_name

    @property
    def email(self) -> str:
        """Gets the email of this UserDetailsDtoV3.  # noqa: E501


        :return: The email of this UserDetailsDtoV3.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserDetailsDtoV3.


        :param email: The email of this UserDetailsDtoV3.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError(
                "Invalid value for `email`, must not be `None`"
            )  # noqa: E501

        self._email = email

    @property
    def date_created(self) -> datetime:
        """Gets the date_created of this UserDetailsDtoV3.  # noqa: E501


        :return: The date_created of this UserDetailsDtoV3.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this UserDetailsDtoV3.


        :param date_created: The date_created of this UserDetailsDtoV3.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_deleted(self) -> datetime:
        """Gets the date_deleted of this UserDetailsDtoV3.  # noqa: E501


        :return: The date_deleted of this UserDetailsDtoV3.  # noqa: E501
        :rtype: datetime
        """
        return self._date_deleted

    @date_deleted.setter
    def date_deleted(self, date_deleted):
        """Sets the date_deleted of this UserDetailsDtoV3.


        :param date_deleted: The date_deleted of this UserDetailsDtoV3.  # noqa: E501
        :type: datetime
        """

        self._date_deleted = date_deleted

    @property
    def created_by(self) -> UserReference:
        """Gets the created_by of this UserDetailsDtoV3.  # noqa: E501


        :return: The created_by of this UserDetailsDtoV3.  # noqa: E501
        :rtype: UserReference
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this UserDetailsDtoV3.


        :param created_by: The created_by of this UserDetailsDtoV3.  # noqa: E501
        :type: UserReference
        """

        self._created_by = created_by

    @property
    def role(self) -> str:
        """Gets the role of this UserDetailsDtoV3.  # noqa: E501

        Enum: \"ADMIN\", \"PROJECT_MANAGER\", \"LINGUIST\", \"GUEST\", \"SUBMITTER\"  # noqa: E501

        :return: The role of this UserDetailsDtoV3.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this UserDetailsDtoV3.

        Enum: \"ADMIN\", \"PROJECT_MANAGER\", \"LINGUIST\", \"GUEST\", \"SUBMITTER\"  # noqa: E501

        :param role: The role of this UserDetailsDtoV3.  # noqa: E501
        :type: str
        """
        if role is None:
            raise ValueError(
                "Invalid value for `role`, must not be `None`"
            )  # noqa: E501
        allowed_values = [
            "SYS_ADMIN",
            "SYS_ADMIN_READ",
            "ADMIN",
            "PROJECT_MANAGER",
            "LINGUIST",
            "GUEST",
            "SUBMITTER",
        ]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}".format(  # noqa: E501
                    role, allowed_values
                )
            )

        self._role = role

    @property
    def timezone(self) -> str:
        """Gets the timezone of this UserDetailsDtoV3.  # noqa: E501


        :return: The timezone of this UserDetailsDtoV3.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this UserDetailsDtoV3.


        :param timezone: The timezone of this UserDetailsDtoV3.  # noqa: E501
        :type: str
        """
        if timezone is None:
            raise ValueError(
                "Invalid value for `timezone`, must not be `None`"
            )  # noqa: E501

        self._timezone = timezone

    @property
    def note(self) -> str:
        """Gets the note of this UserDetailsDtoV3.  # noqa: E501


        :return: The note of this UserDetailsDtoV3.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this UserDetailsDtoV3.


        :param note: The note of this UserDetailsDtoV3.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def receive_newsletter(self) -> bool:
        """Gets the receive_newsletter of this UserDetailsDtoV3.  # noqa: E501


        :return: The receive_newsletter of this UserDetailsDtoV3.  # noqa: E501
        :rtype: bool
        """
        return self._receive_newsletter

    @receive_newsletter.setter
    def receive_newsletter(self, receive_newsletter):
        """Sets the receive_newsletter of this UserDetailsDtoV3.


        :param receive_newsletter: The receive_newsletter of this UserDetailsDtoV3.  # noqa: E501
        :type: bool
        """

        self._receive_newsletter = receive_newsletter

    @property
    def active(self) -> bool:
        """Gets the active of this UserDetailsDtoV3.  # noqa: E501


        :return: The active of this UserDetailsDtoV3.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this UserDetailsDtoV3.


        :param active: The active of this UserDetailsDtoV3.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def pending_email_change(self) -> bool:
        """Gets the pending_email_change of this UserDetailsDtoV3.  # noqa: E501

        If user has email change pending (new email not verified)  # noqa: E501

        :return: The pending_email_change of this UserDetailsDtoV3.  # noqa: E501
        :rtype: bool
        """
        return self._pending_email_change

    @pending_email_change.setter
    def pending_email_change(self, pending_email_change):
        """Sets the pending_email_change of this UserDetailsDtoV3.

        If user has email change pending (new email not verified)  # noqa: E501

        :param pending_email_change: The pending_email_change of this UserDetailsDtoV3.  # noqa: E501
        :type: bool
        """

        self._pending_email_change = pending_email_change

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(UserDetailsDtoV3, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserDetailsDtoV3):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
