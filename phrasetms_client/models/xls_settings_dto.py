# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class XlsSettingsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "sheet_names": "bool",
        "hidden": "bool",
        "comments": "bool",
        "other": "bool",
        "cell_flow": "str",
        "html_subfilter": "bool",
        "tag_regexp": "str",
        "specified_columns": "str",
    }

    attribute_map = {
        "sheet_names": "sheetNames",
        "hidden": "hidden",
        "comments": "comments",
        "other": "other",
        "cell_flow": "cellFlow",
        "html_subfilter": "htmlSubfilter",
        "tag_regexp": "tagRegexp",
        "specified_columns": "specifiedColumns",
    }

    def __init__(
        self,
        sheet_names=None,
        hidden=None,
        comments=None,
        other=None,
        cell_flow=None,
        html_subfilter=None,
        tag_regexp=None,
        specified_columns=None,
    ):  # noqa: E501
        """XlsSettingsDto - a model defined in Swagger"""  # noqa: E501
        self._sheet_names = None
        self._hidden = None
        self._comments = None
        self._other = None
        self._cell_flow = None
        self._html_subfilter = None
        self._tag_regexp = None
        self._specified_columns = None
        self.discriminator = None
        if sheet_names is not None:
            self.sheet_names = sheet_names
        if hidden is not None:
            self.hidden = hidden
        if comments is not None:
            self.comments = comments
        if other is not None:
            self.other = other
        if cell_flow is not None:
            self.cell_flow = cell_flow
        if html_subfilter is not None:
            self.html_subfilter = html_subfilter
        if tag_regexp is not None:
            self.tag_regexp = tag_regexp
        if specified_columns is not None:
            self.specified_columns = specified_columns

    @property
    def sheet_names(self) -> bool:
        """Gets the sheet_names of this XlsSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The sheet_names of this XlsSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._sheet_names

    @sheet_names.setter
    def sheet_names(self, sheet_names):
        """Sets the sheet_names of this XlsSettingsDto.

        Default: false  # noqa: E501

        :param sheet_names: The sheet_names of this XlsSettingsDto.  # noqa: E501
        :type: bool
        """

        self._sheet_names = sheet_names

    @property
    def hidden(self) -> bool:
        """Gets the hidden of this XlsSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The hidden of this XlsSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this XlsSettingsDto.

        Default: false  # noqa: E501

        :param hidden: The hidden of this XlsSettingsDto.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def comments(self) -> bool:
        """Gets the comments of this XlsSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The comments of this XlsSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this XlsSettingsDto.

        Default: false  # noqa: E501

        :param comments: The comments of this XlsSettingsDto.  # noqa: E501
        :type: bool
        """

        self._comments = comments

    @property
    def other(self) -> bool:
        """Gets the other of this XlsSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The other of this XlsSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._other

    @other.setter
    def other(self, other):
        """Sets the other of this XlsSettingsDto.

        Default: false  # noqa: E501

        :param other: The other of this XlsSettingsDto.  # noqa: E501
        :type: bool
        """

        self._other = other

    @property
    def cell_flow(self) -> str:
        """Gets the cell_flow of this XlsSettingsDto.  # noqa: E501

        Default: DownRight  # noqa: E501

        :return: The cell_flow of this XlsSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._cell_flow

    @cell_flow.setter
    def cell_flow(self, cell_flow):
        """Sets the cell_flow of this XlsSettingsDto.

        Default: DownRight  # noqa: E501

        :param cell_flow: The cell_flow of this XlsSettingsDto.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "DownRight",
            "RightDown",
            "DownLeft",
            "LeftDown",
        ]  # noqa: E501
        if cell_flow not in allowed_values:
            raise ValueError(
                "Invalid value for `cell_flow` ({0}), must be one of {1}".format(  # noqa: E501
                    cell_flow, allowed_values
                )
            )

        self._cell_flow = cell_flow

    @property
    def html_subfilter(self) -> bool:
        """Gets the html_subfilter of this XlsSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The html_subfilter of this XlsSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._html_subfilter

    @html_subfilter.setter
    def html_subfilter(self, html_subfilter):
        """Sets the html_subfilter of this XlsSettingsDto.

        Default: false  # noqa: E501

        :param html_subfilter: The html_subfilter of this XlsSettingsDto.  # noqa: E501
        :type: bool
        """

        self._html_subfilter = html_subfilter

    @property
    def tag_regexp(self) -> str:
        """Gets the tag_regexp of this XlsSettingsDto.  # noqa: E501


        :return: The tag_regexp of this XlsSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._tag_regexp

    @tag_regexp.setter
    def tag_regexp(self, tag_regexp):
        """Sets the tag_regexp of this XlsSettingsDto.


        :param tag_regexp: The tag_regexp of this XlsSettingsDto.  # noqa: E501
        :type: str
        """

        self._tag_regexp = tag_regexp

    @property
    def specified_columns(self) -> str:
        """Gets the specified_columns of this XlsSettingsDto.  # noqa: E501


        :return: The specified_columns of this XlsSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._specified_columns

    @specified_columns.setter
    def specified_columns(self, specified_columns):
        """Sets the specified_columns of this XlsSettingsDto.


        :param specified_columns: The specified_columns of this XlsSettingsDto.  # noqa: E501
        :type: str
        """

        self._specified_columns = specified_columns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(XlsSettingsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XlsSettingsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
