# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import phrasetms_client.models


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictStr

class SegmentWarning(BaseModel):
    """
    SegmentWarning
    """
    id: Optional[StrictStr] = None
    ignored: Optional[StrictBool] = None
    type: Optional[StrictStr] = None
    repetition_group_id: Optional[StrictStr] = Field(None, alias="repetitionGroupId")
    __properties = ["id", "ignored", "type", "repetitionGroupId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    # JSON field name that stores the object type
    __discriminator_property_name = 'type'

    # discriminator mappings
    __discriminator_value_class_map = {
        'AbsoluteTranslationLengthWarningDto': 'AbsoluteTranslationLengthWarningDto',
        'CustomQAWarningDto': 'CustomQAWarningDto',
        'EmptyPairTagsWarningDto': 'EmptyPairTagsWarningDto',
        'EmptyTagContentWarningDto': 'EmptyTagContentWarningDto',
        'EmptyTranslationWarningDto': 'EmptyTranslationWarningDto',
        'ExtraNumbersV3WarningDto': 'ExtraNumbersV3WarningDto',
        'ExtraNumbersWarningDto': 'ExtraNumbersWarningDto',
        'ForbiddenStringWarningDto': 'ForbiddenStringWarningDto',
        'ForbiddenTermWarningDto': 'ForbiddenTermWarningDto',
        'FormattingWarningDto': 'FormattingWarningDto',
        'FuzzyInconsistencyWarningDto': 'FuzzyInconsistencyWarningDto',
        'InconsistentTagContentWarningDto': 'InconsistentTagContentWarningDto',
        'InconsistentTranslationWarningDto': 'InconsistentTranslationWarningDto',
        'JoinTagsWarningDto': 'JoinTagsWarningDto',
        'LeadingAndTrailingSpacesWarningDto': 'LeadingAndTrailingSpacesWarningDto',
        'MalformedWarningDto': 'MalformedWarningDto',
        'MissingNumbersV3WarningDto': 'MissingNumbersV3WarningDto',
        'MissingNumbersWarningDto': 'MissingNumbersWarningDto',
        'MoraviaWarningDto': 'MoraviaWarningDto',
        'MultipleSpacesV3WarningDto': 'MultipleSpacesV3WarningDto',
        'MultipleSpacesWarningDto': 'MultipleSpacesWarningDto',
        'NestedTagsWarningDto': 'NestedTagsWarningDto',
        'NewerAtLowerLevelWarningDto': 'NewerAtLowerLevelWarningDto',
        'NonConformingTermWarningDto': 'NonConformingTermWarningDto',
        'NotConfirmedWarningDto': 'NotConfirmedWarningDto',
        'RelativeTranslationLengthWarningDto': 'RelativeTranslationLengthWarningDto',
        'RepeatedWordWarningDto': 'RepeatedWordWarningDto',
        'RepeatedWordsWarningDto': 'RepeatedWordsWarningDto',
        'SourceTargetRegexpWarningDto': 'SourceTargetRegexpWarningDto',
        'SpellCheckWarningDto': 'SpellCheckWarningDto',
        'TargetSourceIdenticalWarningDto': 'TargetSourceIdenticalWarningDto',
        'TerminologyWarningDto': 'TerminologyWarningDto',
        'TrailingPunctuationWarningDto': 'TrailingPunctuationWarningDto',
        'TrailingSpaceWarningDto': 'TrailingSpaceWarningDto',
        'TranslationLengthWarningDto': 'TranslationLengthWarningDto',
        'UnmodifiedFuzzyTranslationMTNTWarningDto': 'UnmodifiedFuzzyTranslationMTNTWarningDto',
        'UnmodifiedFuzzyTranslationTMWarningDto': 'UnmodifiedFuzzyTranslationTMWarningDto',
        'UnmodifiedFuzzyTranslationWarningDto': 'UnmodifiedFuzzyTranslationWarningDto',
        'UnresolvedCommentWarningDto': 'UnresolvedCommentWarningDto',
        'UnresolvedConversationWarningDto': 'UnresolvedConversationWarningDto'
    }

    @classmethod
    def get_discriminator_value(cls, obj: dict) -> str:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Union(AbsoluteTranslationLengthWarningDto, CustomQAWarningDto, EmptyPairTagsWarningDto, EmptyTagContentWarningDto, EmptyTranslationWarningDto, ExtraNumbersV3WarningDto, ExtraNumbersWarningDto, ForbiddenStringWarningDto, ForbiddenTermWarningDto, FormattingWarningDto, FuzzyInconsistencyWarningDto, InconsistentTagContentWarningDto, InconsistentTranslationWarningDto, JoinTagsWarningDto, LeadingAndTrailingSpacesWarningDto, MalformedWarningDto, MissingNumbersV3WarningDto, MissingNumbersWarningDto, MoraviaWarningDto, MultipleSpacesV3WarningDto, MultipleSpacesWarningDto, NestedTagsWarningDto, NewerAtLowerLevelWarningDto, NonConformingTermWarningDto, NotConfirmedWarningDto, RelativeTranslationLengthWarningDto, RepeatedWordWarningDto, RepeatedWordsWarningDto, SourceTargetRegexpWarningDto, SpellCheckWarningDto, TargetSourceIdenticalWarningDto, TerminologyWarningDto, TrailingPunctuationWarningDto, TrailingSpaceWarningDto, TranslationLengthWarningDto, UnmodifiedFuzzyTranslationMTNTWarningDto, UnmodifiedFuzzyTranslationTMWarningDto, UnmodifiedFuzzyTranslationWarningDto, UnresolvedCommentWarningDto, UnresolvedConversationWarningDto):  # noqa: F821
        """Create an instance of SegmentWarning from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Union(AbsoluteTranslationLengthWarningDto, CustomQAWarningDto, EmptyPairTagsWarningDto, EmptyTagContentWarningDto, EmptyTranslationWarningDto, ExtraNumbersV3WarningDto, ExtraNumbersWarningDto, ForbiddenStringWarningDto, ForbiddenTermWarningDto, FormattingWarningDto, FuzzyInconsistencyWarningDto, InconsistentTagContentWarningDto, InconsistentTranslationWarningDto, JoinTagsWarningDto, LeadingAndTrailingSpacesWarningDto, MalformedWarningDto, MissingNumbersV3WarningDto, MissingNumbersWarningDto, MoraviaWarningDto, MultipleSpacesV3WarningDto, MultipleSpacesWarningDto, NestedTagsWarningDto, NewerAtLowerLevelWarningDto, NonConformingTermWarningDto, NotConfirmedWarningDto, RelativeTranslationLengthWarningDto, RepeatedWordWarningDto, RepeatedWordsWarningDto, SourceTargetRegexpWarningDto, SpellCheckWarningDto, TargetSourceIdenticalWarningDto, TerminologyWarningDto, TrailingPunctuationWarningDto, TrailingSpaceWarningDto, TranslationLengthWarningDto, UnmodifiedFuzzyTranslationMTNTWarningDto, UnmodifiedFuzzyTranslationTMWarningDto, UnmodifiedFuzzyTranslationWarningDto, UnresolvedCommentWarningDto, UnresolvedConversationWarningDto):  # noqa: F821
        """Create an instance of SegmentWarning from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = getattr(phrasetms_client.models, object_type)
            return klass.from_dict(obj)
        else:
            raise ValueError("SegmentWarning failed to lookup discriminator value from " +
                             json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                             ", mapping: " + json.dumps(cls.__discriminator_value_class_map))

