# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from phrasetms_client.models import (
    PassFailThresholdDto,
    PenaltyPointsDto,
    ErrorCategoriesDto,
)


class CreateLqaProfileDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "name": "str",
        "error_categories": "ErrorCategoriesDto",
        "penalty_points": "PenaltyPointsDto",
        "pass_fail_threshold": "PassFailThresholdDto",
    }

    attribute_map = {
        "name": "name",
        "error_categories": "errorCategories",
        "penalty_points": "penaltyPoints",
        "pass_fail_threshold": "passFailThreshold",
    }

    def __init__(
        self,
        name=None,
        error_categories=None,
        penalty_points=None,
        pass_fail_threshold=None,
    ):  # noqa: E501
        """CreateLqaProfileDto - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._error_categories = None
        self._penalty_points = None
        self._pass_fail_threshold = None
        self.discriminator = None
        self.name = name
        self.error_categories = error_categories
        if penalty_points is not None:
            self.penalty_points = penalty_points
        if pass_fail_threshold is not None:
            self.pass_fail_threshold = pass_fail_threshold

    @property
    def name(self) -> str:
        """Gets the name of this CreateLqaProfileDto.  # noqa: E501


        :return: The name of this CreateLqaProfileDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateLqaProfileDto.


        :param name: The name of this CreateLqaProfileDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError(
                "Invalid value for `name`, must not be `None`"
            )  # noqa: E501

        self._name = name

    @property
    def error_categories(self) -> ErrorCategoriesDto:
        """Gets the error_categories of this CreateLqaProfileDto.  # noqa: E501


        :return: The error_categories of this CreateLqaProfileDto.  # noqa: E501
        :rtype: ErrorCategoriesDto
        """
        return self._error_categories

    @error_categories.setter
    def error_categories(self, error_categories):
        """Sets the error_categories of this CreateLqaProfileDto.


        :param error_categories: The error_categories of this CreateLqaProfileDto.  # noqa: E501
        :type: ErrorCategoriesDto
        """
        if error_categories is None:
            raise ValueError(
                "Invalid value for `error_categories`, must not be `None`"
            )  # noqa: E501

        self._error_categories = error_categories

    @property
    def penalty_points(self) -> PenaltyPointsDto:
        """Gets the penalty_points of this CreateLqaProfileDto.  # noqa: E501


        :return: The penalty_points of this CreateLqaProfileDto.  # noqa: E501
        :rtype: PenaltyPointsDto
        """
        return self._penalty_points

    @penalty_points.setter
    def penalty_points(self, penalty_points):
        """Sets the penalty_points of this CreateLqaProfileDto.


        :param penalty_points: The penalty_points of this CreateLqaProfileDto.  # noqa: E501
        :type: PenaltyPointsDto
        """

        self._penalty_points = penalty_points

    @property
    def pass_fail_threshold(self) -> PassFailThresholdDto:
        """Gets the pass_fail_threshold of this CreateLqaProfileDto.  # noqa: E501


        :return: The pass_fail_threshold of this CreateLqaProfileDto.  # noqa: E501
        :rtype: PassFailThresholdDto
        """
        return self._pass_fail_threshold

    @pass_fail_threshold.setter
    def pass_fail_threshold(self, pass_fail_threshold):
        """Sets the pass_fail_threshold of this CreateLqaProfileDto.


        :param pass_fail_threshold: The pass_fail_threshold of this CreateLqaProfileDto.  # noqa: E501
        :type: PassFailThresholdDto
        """

        self._pass_fail_threshold = pass_fail_threshold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(CreateLqaProfileDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateLqaProfileDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
