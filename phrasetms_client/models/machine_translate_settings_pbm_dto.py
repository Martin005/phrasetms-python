# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from phrasetms_client.models.machine_translate_settings_langs_dto import MachineTranslateSettingsLangsDto

class MachineTranslateSettingsPbmDto(BaseModel):
    """
    MachineTranslateSettingsPbmDto
    """
    id: Optional[StrictStr] = None
    uid: Optional[StrictStr] = None
    base_name: Optional[StrictStr] = Field(None, alias="baseName")
    name: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    default_: Optional[StrictBool] = None
    include_tags: Optional[StrictBool] = Field(None, alias="includeTags")
    mt_quality_estimation: Optional[StrictBool] = Field(None, alias="mtQualityEstimation")
    args: Optional[Dict[str, StrictStr]] = None
    pay_for_mt_possible: Optional[StrictBool] = Field(None, alias="payForMtPossible")
    pay_for_mt_active: Optional[StrictBool] = Field(None, alias="payForMtActive")
    char_count: Optional[StrictInt] = Field(None, alias="charCount")
    sharing_settings: Optional[StrictInt] = Field(None, alias="sharingSettings")
    langs: Optional[MachineTranslateSettingsLangsDto] = None
    __properties = ["id", "uid", "baseName", "name", "type", "default_", "includeTags", "mtQualityEstimation", "args", "payForMtPossible", "payForMtActive", "charCount", "sharingSettings", "langs"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MachineTranslateSettingsPbmDto:
        """Create an instance of MachineTranslateSettingsPbmDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of langs
        if self.langs:
            _dict['langs'] = self.langs.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MachineTranslateSettingsPbmDto:
        """Create an instance of MachineTranslateSettingsPbmDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MachineTranslateSettingsPbmDto.parse_obj(obj)

        _obj = MachineTranslateSettingsPbmDto.parse_obj({
            "id": obj.get("id"),
            "uid": obj.get("uid"),
            "base_name": obj.get("baseName"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "default_": obj.get("default_"),
            "include_tags": obj.get("includeTags"),
            "mt_quality_estimation": obj.get("mtQualityEstimation"),
            "args": obj.get("args"),
            "pay_for_mt_possible": obj.get("payForMtPossible"),
            "pay_for_mt_active": obj.get("payForMtActive"),
            "char_count": obj.get("charCount"),
            "sharing_settings": obj.get("sharingSettings"),
            "langs": MachineTranslateSettingsLangsDto.from_dict(obj.get("langs")) if obj.get("langs") is not None else None
        })
        return _obj

