# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from phrasetms_client.models import CountsDto


class MatchCounts101Dto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "match100": "CountsDto",
        "match95": "CountsDto",
        "match85": "CountsDto",
        "match75": "CountsDto",
        "match50": "CountsDto",
        "match0": "CountsDto",
        "match101": "CountsDto",
    }

    attribute_map = {
        "match100": "match100",
        "match95": "match95",
        "match85": "match85",
        "match75": "match75",
        "match50": "match50",
        "match0": "match0",
        "match101": "match101",
    }

    def __init__(
        self,
        match100=None,
        match95=None,
        match85=None,
        match75=None,
        match50=None,
        match0=None,
        match101=None,
    ):  # noqa: E501
        """MatchCounts101Dto - a model defined in Swagger"""  # noqa: E501
        self._match100 = None
        self._match95 = None
        self._match85 = None
        self._match75 = None
        self._match50 = None
        self._match0 = None
        self._match101 = None
        self.discriminator = None
        if match100 is not None:
            self.match100 = match100
        if match95 is not None:
            self.match95 = match95
        if match85 is not None:
            self.match85 = match85
        if match75 is not None:
            self.match75 = match75
        if match50 is not None:
            self.match50 = match50
        if match0 is not None:
            self.match0 = match0
        if match101 is not None:
            self.match101 = match101

    @property
    def match100(self) -> CountsDto:
        """Gets the match100 of this MatchCounts101Dto.  # noqa: E501


        :return: The match100 of this MatchCounts101Dto.  # noqa: E501
        :rtype: CountsDto
        """
        return self._match100

    @match100.setter
    def match100(self, match100):
        """Sets the match100 of this MatchCounts101Dto.


        :param match100: The match100 of this MatchCounts101Dto.  # noqa: E501
        :type: CountsDto
        """

        self._match100 = match100

    @property
    def match95(self) -> CountsDto:
        """Gets the match95 of this MatchCounts101Dto.  # noqa: E501


        :return: The match95 of this MatchCounts101Dto.  # noqa: E501
        :rtype: CountsDto
        """
        return self._match95

    @match95.setter
    def match95(self, match95):
        """Sets the match95 of this MatchCounts101Dto.


        :param match95: The match95 of this MatchCounts101Dto.  # noqa: E501
        :type: CountsDto
        """

        self._match95 = match95

    @property
    def match85(self) -> CountsDto:
        """Gets the match85 of this MatchCounts101Dto.  # noqa: E501


        :return: The match85 of this MatchCounts101Dto.  # noqa: E501
        :rtype: CountsDto
        """
        return self._match85

    @match85.setter
    def match85(self, match85):
        """Sets the match85 of this MatchCounts101Dto.


        :param match85: The match85 of this MatchCounts101Dto.  # noqa: E501
        :type: CountsDto
        """

        self._match85 = match85

    @property
    def match75(self) -> CountsDto:
        """Gets the match75 of this MatchCounts101Dto.  # noqa: E501


        :return: The match75 of this MatchCounts101Dto.  # noqa: E501
        :rtype: CountsDto
        """
        return self._match75

    @match75.setter
    def match75(self, match75):
        """Sets the match75 of this MatchCounts101Dto.


        :param match75: The match75 of this MatchCounts101Dto.  # noqa: E501
        :type: CountsDto
        """

        self._match75 = match75

    @property
    def match50(self) -> CountsDto:
        """Gets the match50 of this MatchCounts101Dto.  # noqa: E501


        :return: The match50 of this MatchCounts101Dto.  # noqa: E501
        :rtype: CountsDto
        """
        return self._match50

    @match50.setter
    def match50(self, match50):
        """Sets the match50 of this MatchCounts101Dto.


        :param match50: The match50 of this MatchCounts101Dto.  # noqa: E501
        :type: CountsDto
        """

        self._match50 = match50

    @property
    def match0(self) -> CountsDto:
        """Gets the match0 of this MatchCounts101Dto.  # noqa: E501


        :return: The match0 of this MatchCounts101Dto.  # noqa: E501
        :rtype: CountsDto
        """
        return self._match0

    @match0.setter
    def match0(self, match0):
        """Sets the match0 of this MatchCounts101Dto.


        :param match0: The match0 of this MatchCounts101Dto.  # noqa: E501
        :type: CountsDto
        """

        self._match0 = match0

    @property
    def match101(self) -> CountsDto:
        """Gets the match101 of this MatchCounts101Dto.  # noqa: E501


        :return: The match101 of this MatchCounts101Dto.  # noqa: E501
        :rtype: CountsDto
        """
        return self._match101

    @match101.setter
    def match101(self, match101):
        """Sets the match101 of this MatchCounts101Dto.


        :param match101: The match101 of this MatchCounts101Dto.  # noqa: E501
        :type: CountsDto
        """

        self._match101 = match101

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(MatchCounts101Dto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MatchCounts101Dto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
