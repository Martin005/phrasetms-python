# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from phrasetms_client.models import UidReference
from phrasetms_client.models.abstract_user_create_dto import (
    AbstractUserCreateDto,
)  # noqa: F401,E501


class PROJECTMANAGER(AbstractUserCreateDto):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "source_locales": "list[str]",
        "target_locales": "list[str]",
        "workflow_steps": "list[UidReference]",
        "clients": "list[UidReference]",
        "domains": "list[UidReference]",
        "sub_domains": "list[UidReference]",
        "project_create": "bool",
        "project_view_other": "bool",
        "project_edit_other": "bool",
        "project_delete_other": "bool",
        "project_clients": "list[UidReference]",
        "project_business_units": "list[UidReference]",
        "project_template_create": "bool",
        "project_template_view_other": "bool",
        "project_template_edit_other": "bool",
        "project_template_delete_other": "bool",
        "project_template_clients": "list[UidReference]",
        "project_template_business_units": "list[UidReference]",
        "trans_memory_create": "bool",
        "trans_memory_view_other": "bool",
        "trans_memory_edit_other": "bool",
        "trans_memory_delete_other": "bool",
        "trans_memory_export_other": "bool",
        "trans_memory_import_other": "bool",
        "trans_memory_clients": "list[UidReference]",
        "trans_memory_business_units": "list[UidReference]",
        "term_base_create": "bool",
        "term_base_view_other": "bool",
        "term_base_edit_other": "bool",
        "term_base_delete_other": "bool",
        "term_base_export_other": "bool",
        "term_base_import_other": "bool",
        "term_base_approve_other": "bool",
        "term_base_clients": "list[UidReference]",
        "term_base_business_units": "list[UidReference]",
        "user_create": "bool",
        "user_view_other": "bool",
        "user_edit_other": "bool",
        "user_delete_other": "bool",
        "client_domain_sub_domain_create": "bool",
        "client_domain_sub_domain_view_other": "bool",
        "client_domain_sub_domain_edit_other": "bool",
        "client_domain_sub_domain_delete_other": "bool",
        "vendor_create": "bool",
        "vendor_view_other": "bool",
        "vendor_edit_other": "bool",
        "vendor_delete_other": "bool",
        "dashboard_setting": "str",
        "setup_server": "bool",
    }
    if hasattr(AbstractUserCreateDto, "swagger_types"):
        swagger_types.update(AbstractUserCreateDto.swagger_types)

    attribute_map = {
        "source_locales": "sourceLocales",
        "target_locales": "targetLocales",
        "workflow_steps": "workflowSteps",
        "clients": "clients",
        "domains": "domains",
        "sub_domains": "subDomains",
        "project_create": "projectCreate",
        "project_view_other": "projectViewOther",
        "project_edit_other": "projectEditOther",
        "project_delete_other": "projectDeleteOther",
        "project_clients": "projectClients",
        "project_business_units": "projectBusinessUnits",
        "project_template_create": "projectTemplateCreate",
        "project_template_view_other": "projectTemplateViewOther",
        "project_template_edit_other": "projectTemplateEditOther",
        "project_template_delete_other": "projectTemplateDeleteOther",
        "project_template_clients": "projectTemplateClients",
        "project_template_business_units": "projectTemplateBusinessUnits",
        "trans_memory_create": "transMemoryCreate",
        "trans_memory_view_other": "transMemoryViewOther",
        "trans_memory_edit_other": "transMemoryEditOther",
        "trans_memory_delete_other": "transMemoryDeleteOther",
        "trans_memory_export_other": "transMemoryExportOther",
        "trans_memory_import_other": "transMemoryImportOther",
        "trans_memory_clients": "transMemoryClients",
        "trans_memory_business_units": "transMemoryBusinessUnits",
        "term_base_create": "termBaseCreate",
        "term_base_view_other": "termBaseViewOther",
        "term_base_edit_other": "termBaseEditOther",
        "term_base_delete_other": "termBaseDeleteOther",
        "term_base_export_other": "termBaseExportOther",
        "term_base_import_other": "termBaseImportOther",
        "term_base_approve_other": "termBaseApproveOther",
        "term_base_clients": "termBaseClients",
        "term_base_business_units": "termBaseBusinessUnits",
        "user_create": "userCreate",
        "user_view_other": "userViewOther",
        "user_edit_other": "userEditOther",
        "user_delete_other": "userDeleteOther",
        "client_domain_sub_domain_create": "clientDomainSubDomainCreate",
        "client_domain_sub_domain_view_other": "clientDomainSubDomainViewOther",
        "client_domain_sub_domain_edit_other": "clientDomainSubDomainEditOther",
        "client_domain_sub_domain_delete_other": "clientDomainSubDomainDeleteOther",
        "vendor_create": "vendorCreate",
        "vendor_view_other": "vendorViewOther",
        "vendor_edit_other": "vendorEditOther",
        "vendor_delete_other": "vendorDeleteOther",
        "dashboard_setting": "dashboardSetting",
        "setup_server": "setupServer",
    }
    if hasattr(AbstractUserCreateDto, "attribute_map"):
        attribute_map.update(AbstractUserCreateDto.attribute_map)

    def __init__(
        self,
        source_locales=None,
        target_locales=None,
        workflow_steps=None,
        clients=None,
        domains=None,
        sub_domains=None,
        project_create=None,
        project_view_other=None,
        project_edit_other=None,
        project_delete_other=None,
        project_clients=None,
        project_business_units=None,
        project_template_create=None,
        project_template_view_other=None,
        project_template_edit_other=None,
        project_template_delete_other=None,
        project_template_clients=None,
        project_template_business_units=None,
        trans_memory_create=None,
        trans_memory_view_other=None,
        trans_memory_edit_other=None,
        trans_memory_delete_other=None,
        trans_memory_export_other=None,
        trans_memory_import_other=None,
        trans_memory_clients=None,
        trans_memory_business_units=None,
        term_base_create=None,
        term_base_view_other=None,
        term_base_edit_other=None,
        term_base_delete_other=None,
        term_base_export_other=None,
        term_base_import_other=None,
        term_base_approve_other=None,
        term_base_clients=None,
        term_base_business_units=None,
        user_create=None,
        user_view_other=None,
        user_edit_other=None,
        user_delete_other=None,
        client_domain_sub_domain_create=None,
        client_domain_sub_domain_view_other=None,
        client_domain_sub_domain_edit_other=None,
        client_domain_sub_domain_delete_other=None,
        vendor_create=None,
        vendor_view_other=None,
        vendor_edit_other=None,
        vendor_delete_other=None,
        dashboard_setting=None,
        setup_server=None,
        *args,
        **kwargs
    ):  # noqa: E501
        """PROJECTMANAGER - a model defined in Swagger"""  # noqa: E501
        self._source_locales = None
        self._target_locales = None
        self._workflow_steps = None
        self._clients = None
        self._domains = None
        self._sub_domains = None
        self._project_create = None
        self._project_view_other = None
        self._project_edit_other = None
        self._project_delete_other = None
        self._project_clients = None
        self._project_business_units = None
        self._project_template_create = None
        self._project_template_view_other = None
        self._project_template_edit_other = None
        self._project_template_delete_other = None
        self._project_template_clients = None
        self._project_template_business_units = None
        self._trans_memory_create = None
        self._trans_memory_view_other = None
        self._trans_memory_edit_other = None
        self._trans_memory_delete_other = None
        self._trans_memory_export_other = None
        self._trans_memory_import_other = None
        self._trans_memory_clients = None
        self._trans_memory_business_units = None
        self._term_base_create = None
        self._term_base_view_other = None
        self._term_base_edit_other = None
        self._term_base_delete_other = None
        self._term_base_export_other = None
        self._term_base_import_other = None
        self._term_base_approve_other = None
        self._term_base_clients = None
        self._term_base_business_units = None
        self._user_create = None
        self._user_view_other = None
        self._user_edit_other = None
        self._user_delete_other = None
        self._client_domain_sub_domain_create = None
        self._client_domain_sub_domain_view_other = None
        self._client_domain_sub_domain_edit_other = None
        self._client_domain_sub_domain_delete_other = None
        self._vendor_create = None
        self._vendor_view_other = None
        self._vendor_edit_other = None
        self._vendor_delete_other = None
        self._dashboard_setting = None
        self._setup_server = None
        self.discriminator = None
        if source_locales is not None:
            self.source_locales = source_locales
        if target_locales is not None:
            self.target_locales = target_locales
        if workflow_steps is not None:
            self.workflow_steps = workflow_steps
        if clients is not None:
            self.clients = clients
        if domains is not None:
            self.domains = domains
        if sub_domains is not None:
            self.sub_domains = sub_domains
        if project_create is not None:
            self.project_create = project_create
        if project_view_other is not None:
            self.project_view_other = project_view_other
        if project_edit_other is not None:
            self.project_edit_other = project_edit_other
        if project_delete_other is not None:
            self.project_delete_other = project_delete_other
        if project_clients is not None:
            self.project_clients = project_clients
        if project_business_units is not None:
            self.project_business_units = project_business_units
        if project_template_create is not None:
            self.project_template_create = project_template_create
        if project_template_view_other is not None:
            self.project_template_view_other = project_template_view_other
        if project_template_edit_other is not None:
            self.project_template_edit_other = project_template_edit_other
        if project_template_delete_other is not None:
            self.project_template_delete_other = project_template_delete_other
        if project_template_clients is not None:
            self.project_template_clients = project_template_clients
        if project_template_business_units is not None:
            self.project_template_business_units = project_template_business_units
        if trans_memory_create is not None:
            self.trans_memory_create = trans_memory_create
        if trans_memory_view_other is not None:
            self.trans_memory_view_other = trans_memory_view_other
        if trans_memory_edit_other is not None:
            self.trans_memory_edit_other = trans_memory_edit_other
        if trans_memory_delete_other is not None:
            self.trans_memory_delete_other = trans_memory_delete_other
        if trans_memory_export_other is not None:
            self.trans_memory_export_other = trans_memory_export_other
        if trans_memory_import_other is not None:
            self.trans_memory_import_other = trans_memory_import_other
        if trans_memory_clients is not None:
            self.trans_memory_clients = trans_memory_clients
        if trans_memory_business_units is not None:
            self.trans_memory_business_units = trans_memory_business_units
        if term_base_create is not None:
            self.term_base_create = term_base_create
        if term_base_view_other is not None:
            self.term_base_view_other = term_base_view_other
        if term_base_edit_other is not None:
            self.term_base_edit_other = term_base_edit_other
        if term_base_delete_other is not None:
            self.term_base_delete_other = term_base_delete_other
        if term_base_export_other is not None:
            self.term_base_export_other = term_base_export_other
        if term_base_import_other is not None:
            self.term_base_import_other = term_base_import_other
        if term_base_approve_other is not None:
            self.term_base_approve_other = term_base_approve_other
        if term_base_clients is not None:
            self.term_base_clients = term_base_clients
        if term_base_business_units is not None:
            self.term_base_business_units = term_base_business_units
        if user_create is not None:
            self.user_create = user_create
        if user_view_other is not None:
            self.user_view_other = user_view_other
        if user_edit_other is not None:
            self.user_edit_other = user_edit_other
        if user_delete_other is not None:
            self.user_delete_other = user_delete_other
        if client_domain_sub_domain_create is not None:
            self.client_domain_sub_domain_create = client_domain_sub_domain_create
        if client_domain_sub_domain_view_other is not None:
            self.client_domain_sub_domain_view_other = (
                client_domain_sub_domain_view_other
            )
        if client_domain_sub_domain_edit_other is not None:
            self.client_domain_sub_domain_edit_other = (
                client_domain_sub_domain_edit_other
            )
        if client_domain_sub_domain_delete_other is not None:
            self.client_domain_sub_domain_delete_other = (
                client_domain_sub_domain_delete_other
            )
        if vendor_create is not None:
            self.vendor_create = vendor_create
        if vendor_view_other is not None:
            self.vendor_view_other = vendor_view_other
        if vendor_edit_other is not None:
            self.vendor_edit_other = vendor_edit_other
        if vendor_delete_other is not None:
            self.vendor_delete_other = vendor_delete_other
        if dashboard_setting is not None:
            self.dashboard_setting = dashboard_setting
        if setup_server is not None:
            self.setup_server = setup_server
        AbstractUserCreateDto.__init__(self, *args, **kwargs)

    @property
    def source_locales(self) -> list[str]:
        """Gets the source_locales of this PROJECTMANAGER.  # noqa: E501


        :return: The source_locales of this PROJECTMANAGER.  # noqa: E501
        :rtype: list[str]
        """
        return self._source_locales

    @source_locales.setter
    def source_locales(self, source_locales):
        """Sets the source_locales of this PROJECTMANAGER.


        :param source_locales: The source_locales of this PROJECTMANAGER.  # noqa: E501
        :type: list[str]
        """

        self._source_locales = source_locales

    @property
    def target_locales(self) -> list[str]:
        """Gets the target_locales of this PROJECTMANAGER.  # noqa: E501


        :return: The target_locales of this PROJECTMANAGER.  # noqa: E501
        :rtype: list[str]
        """
        return self._target_locales

    @target_locales.setter
    def target_locales(self, target_locales):
        """Sets the target_locales of this PROJECTMANAGER.


        :param target_locales: The target_locales of this PROJECTMANAGER.  # noqa: E501
        :type: list[str]
        """

        self._target_locales = target_locales

    @property
    def workflow_steps(self) -> list[UidReference]:
        """Gets the workflow_steps of this PROJECTMANAGER.  # noqa: E501


        :return: The workflow_steps of this PROJECTMANAGER.  # noqa: E501
        :rtype: list[UidReference]
        """
        return self._workflow_steps

    @workflow_steps.setter
    def workflow_steps(self, workflow_steps):
        """Sets the workflow_steps of this PROJECTMANAGER.


        :param workflow_steps: The workflow_steps of this PROJECTMANAGER.  # noqa: E501
        :type: list[UidReference]
        """

        self._workflow_steps = workflow_steps

    @property
    def clients(self) -> list[UidReference]:
        """Gets the clients of this PROJECTMANAGER.  # noqa: E501


        :return: The clients of this PROJECTMANAGER.  # noqa: E501
        :rtype: list[UidReference]
        """
        return self._clients

    @clients.setter
    def clients(self, clients):
        """Sets the clients of this PROJECTMANAGER.


        :param clients: The clients of this PROJECTMANAGER.  # noqa: E501
        :type: list[UidReference]
        """

        self._clients = clients

    @property
    def domains(self) -> list[UidReference]:
        """Gets the domains of this PROJECTMANAGER.  # noqa: E501


        :return: The domains of this PROJECTMANAGER.  # noqa: E501
        :rtype: list[UidReference]
        """
        return self._domains

    @domains.setter
    def domains(self, domains):
        """Sets the domains of this PROJECTMANAGER.


        :param domains: The domains of this PROJECTMANAGER.  # noqa: E501
        :type: list[UidReference]
        """

        self._domains = domains

    @property
    def sub_domains(self) -> list[UidReference]:
        """Gets the sub_domains of this PROJECTMANAGER.  # noqa: E501


        :return: The sub_domains of this PROJECTMANAGER.  # noqa: E501
        :rtype: list[UidReference]
        """
        return self._sub_domains

    @sub_domains.setter
    def sub_domains(self, sub_domains):
        """Sets the sub_domains of this PROJECTMANAGER.


        :param sub_domains: The sub_domains of this PROJECTMANAGER.  # noqa: E501
        :type: list[UidReference]
        """

        self._sub_domains = sub_domains

    @property
    def project_create(self) -> bool:
        """Gets the project_create of this PROJECTMANAGER.  # noqa: E501

        Enable project creation. Default: true  # noqa: E501

        :return: The project_create of this PROJECTMANAGER.  # noqa: E501
        :rtype: bool
        """
        return self._project_create

    @project_create.setter
    def project_create(self, project_create):
        """Sets the project_create of this PROJECTMANAGER.

        Enable project creation. Default: true  # noqa: E501

        :param project_create: The project_create of this PROJECTMANAGER.  # noqa: E501
        :type: bool
        """

        self._project_create = project_create

    @property
    def project_view_other(self) -> bool:
        """Gets the project_view_other of this PROJECTMANAGER.  # noqa: E501

        View projects created by other users. Default: true  # noqa: E501

        :return: The project_view_other of this PROJECTMANAGER.  # noqa: E501
        :rtype: bool
        """
        return self._project_view_other

    @project_view_other.setter
    def project_view_other(self, project_view_other):
        """Sets the project_view_other of this PROJECTMANAGER.

        View projects created by other users. Default: true  # noqa: E501

        :param project_view_other: The project_view_other of this PROJECTMANAGER.  # noqa: E501
        :type: bool
        """

        self._project_view_other = project_view_other

    @property
    def project_edit_other(self) -> bool:
        """Gets the project_edit_other of this PROJECTMANAGER.  # noqa: E501

        Modify projects created by other users. Default: true  # noqa: E501

        :return: The project_edit_other of this PROJECTMANAGER.  # noqa: E501
        :rtype: bool
        """
        return self._project_edit_other

    @project_edit_other.setter
    def project_edit_other(self, project_edit_other):
        """Sets the project_edit_other of this PROJECTMANAGER.

        Modify projects created by other users. Default: true  # noqa: E501

        :param project_edit_other: The project_edit_other of this PROJECTMANAGER.  # noqa: E501
        :type: bool
        """

        self._project_edit_other = project_edit_other

    @property
    def project_delete_other(self) -> bool:
        """Gets the project_delete_other of this PROJECTMANAGER.  # noqa: E501

        Delete projects created by other users. Default: true  # noqa: E501

        :return: The project_delete_other of this PROJECTMANAGER.  # noqa: E501
        :rtype: bool
        """
        return self._project_delete_other

    @project_delete_other.setter
    def project_delete_other(self, project_delete_other):
        """Sets the project_delete_other of this PROJECTMANAGER.

        Delete projects created by other users. Default: true  # noqa: E501

        :param project_delete_other: The project_delete_other of this PROJECTMANAGER.  # noqa: E501
        :type: bool
        """

        self._project_delete_other = project_delete_other

    @property
    def project_clients(self) -> list[UidReference]:
        """Gets the project_clients of this PROJECTMANAGER.  # noqa: E501

        Access projects of a selected clients only  # noqa: E501

        :return: The project_clients of this PROJECTMANAGER.  # noqa: E501
        :rtype: list[UidReference]
        """
        return self._project_clients

    @project_clients.setter
    def project_clients(self, project_clients):
        """Sets the project_clients of this PROJECTMANAGER.

        Access projects of a selected clients only  # noqa: E501

        :param project_clients: The project_clients of this PROJECTMANAGER.  # noqa: E501
        :type: list[UidReference]
        """

        self._project_clients = project_clients

    @property
    def project_business_units(self) -> list[UidReference]:
        """Gets the project_business_units of this PROJECTMANAGER.  # noqa: E501

        Access projects of selected business units only  # noqa: E501

        :return: The project_business_units of this PROJECTMANAGER.  # noqa: E501
        :rtype: list[UidReference]
        """
        return self._project_business_units

    @project_business_units.setter
    def project_business_units(self, project_business_units):
        """Sets the project_business_units of this PROJECTMANAGER.

        Access projects of selected business units only  # noqa: E501

        :param project_business_units: The project_business_units of this PROJECTMANAGER.  # noqa: E501
        :type: list[UidReference]
        """

        self._project_business_units = project_business_units

    @property
    def project_template_create(self) -> bool:
        """Gets the project_template_create of this PROJECTMANAGER.  # noqa: E501

        Enable project templates creation. Default: true  # noqa: E501

        :return: The project_template_create of this PROJECTMANAGER.  # noqa: E501
        :rtype: bool
        """
        return self._project_template_create

    @project_template_create.setter
    def project_template_create(self, project_template_create):
        """Sets the project_template_create of this PROJECTMANAGER.

        Enable project templates creation. Default: true  # noqa: E501

        :param project_template_create: The project_template_create of this PROJECTMANAGER.  # noqa: E501
        :type: bool
        """

        self._project_template_create = project_template_create

    @property
    def project_template_view_other(self) -> bool:
        """Gets the project_template_view_other of this PROJECTMANAGER.  # noqa: E501

        View project templates created by other users. Default: true  # noqa: E501

        :return: The project_template_view_other of this PROJECTMANAGER.  # noqa: E501
        :rtype: bool
        """
        return self._project_template_view_other

    @project_template_view_other.setter
    def project_template_view_other(self, project_template_view_other):
        """Sets the project_template_view_other of this PROJECTMANAGER.

        View project templates created by other users. Default: true  # noqa: E501

        :param project_template_view_other: The project_template_view_other of this PROJECTMANAGER.  # noqa: E501
        :type: bool
        """

        self._project_template_view_other = project_template_view_other

    @property
    def project_template_edit_other(self) -> bool:
        """Gets the project_template_edit_other of this PROJECTMANAGER.  # noqa: E501

        Modify project templates created by other users. Default: true  # noqa: E501

        :return: The project_template_edit_other of this PROJECTMANAGER.  # noqa: E501
        :rtype: bool
        """
        return self._project_template_edit_other

    @project_template_edit_other.setter
    def project_template_edit_other(self, project_template_edit_other):
        """Sets the project_template_edit_other of this PROJECTMANAGER.

        Modify project templates created by other users. Default: true  # noqa: E501

        :param project_template_edit_other: The project_template_edit_other of this PROJECTMANAGER.  # noqa: E501
        :type: bool
        """

        self._project_template_edit_other = project_template_edit_other

    @property
    def project_template_delete_other(self) -> bool:
        """Gets the project_template_delete_other of this PROJECTMANAGER.  # noqa: E501

        Delete project templates created by other users. Default: true  # noqa: E501

        :return: The project_template_delete_other of this PROJECTMANAGER.  # noqa: E501
        :rtype: bool
        """
        return self._project_template_delete_other

    @project_template_delete_other.setter
    def project_template_delete_other(self, project_template_delete_other):
        """Sets the project_template_delete_other of this PROJECTMANAGER.

        Delete project templates created by other users. Default: true  # noqa: E501

        :param project_template_delete_other: The project_template_delete_other of this PROJECTMANAGER.  # noqa: E501
        :type: bool
        """

        self._project_template_delete_other = project_template_delete_other

    @property
    def project_template_clients(self) -> list[UidReference]:
        """Gets the project_template_clients of this PROJECTMANAGER.  # noqa: E501

        Access project templates of a selected clients only  # noqa: E501

        :return: The project_template_clients of this PROJECTMANAGER.  # noqa: E501
        :rtype: list[UidReference]
        """
        return self._project_template_clients

    @project_template_clients.setter
    def project_template_clients(self, project_template_clients):
        """Sets the project_template_clients of this PROJECTMANAGER.

        Access project templates of a selected clients only  # noqa: E501

        :param project_template_clients: The project_template_clients of this PROJECTMANAGER.  # noqa: E501
        :type: list[UidReference]
        """

        self._project_template_clients = project_template_clients

    @property
    def project_template_business_units(self) -> list[UidReference]:
        """Gets the project_template_business_units of this PROJECTMANAGER.  # noqa: E501

        Access project templates of selected business units only  # noqa: E501

        :return: The project_template_business_units of this PROJECTMANAGER.  # noqa: E501
        :rtype: list[UidReference]
        """
        return self._project_template_business_units

    @project_template_business_units.setter
    def project_template_business_units(self, project_template_business_units):
        """Sets the project_template_business_units of this PROJECTMANAGER.

        Access project templates of selected business units only  # noqa: E501

        :param project_template_business_units: The project_template_business_units of this PROJECTMANAGER.  # noqa: E501
        :type: list[UidReference]
        """

        self._project_template_business_units = project_template_business_units

    @property
    def trans_memory_create(self) -> bool:
        """Gets the trans_memory_create of this PROJECTMANAGER.  # noqa: E501

        Enable TMs creation. Default: true  # noqa: E501

        :return: The trans_memory_create of this PROJECTMANAGER.  # noqa: E501
        :rtype: bool
        """
        return self._trans_memory_create

    @trans_memory_create.setter
    def trans_memory_create(self, trans_memory_create):
        """Sets the trans_memory_create of this PROJECTMANAGER.

        Enable TMs creation. Default: true  # noqa: E501

        :param trans_memory_create: The trans_memory_create of this PROJECTMANAGER.  # noqa: E501
        :type: bool
        """

        self._trans_memory_create = trans_memory_create

    @property
    def trans_memory_view_other(self) -> bool:
        """Gets the trans_memory_view_other of this PROJECTMANAGER.  # noqa: E501

        View TMs created by other users. Default: true  # noqa: E501

        :return: The trans_memory_view_other of this PROJECTMANAGER.  # noqa: E501
        :rtype: bool
        """
        return self._trans_memory_view_other

    @trans_memory_view_other.setter
    def trans_memory_view_other(self, trans_memory_view_other):
        """Sets the trans_memory_view_other of this PROJECTMANAGER.

        View TMs created by other users. Default: true  # noqa: E501

        :param trans_memory_view_other: The trans_memory_view_other of this PROJECTMANAGER.  # noqa: E501
        :type: bool
        """

        self._trans_memory_view_other = trans_memory_view_other

    @property
    def trans_memory_edit_other(self) -> bool:
        """Gets the trans_memory_edit_other of this PROJECTMANAGER.  # noqa: E501

        Modify TMs created by other users. Default: true  # noqa: E501

        :return: The trans_memory_edit_other of this PROJECTMANAGER.  # noqa: E501
        :rtype: bool
        """
        return self._trans_memory_edit_other

    @trans_memory_edit_other.setter
    def trans_memory_edit_other(self, trans_memory_edit_other):
        """Sets the trans_memory_edit_other of this PROJECTMANAGER.

        Modify TMs created by other users. Default: true  # noqa: E501

        :param trans_memory_edit_other: The trans_memory_edit_other of this PROJECTMANAGER.  # noqa: E501
        :type: bool
        """

        self._trans_memory_edit_other = trans_memory_edit_other

    @property
    def trans_memory_delete_other(self) -> bool:
        """Gets the trans_memory_delete_other of this PROJECTMANAGER.  # noqa: E501

        Delete TMs created by other users. Default: true  # noqa: E501

        :return: The trans_memory_delete_other of this PROJECTMANAGER.  # noqa: E501
        :rtype: bool
        """
        return self._trans_memory_delete_other

    @trans_memory_delete_other.setter
    def trans_memory_delete_other(self, trans_memory_delete_other):
        """Sets the trans_memory_delete_other of this PROJECTMANAGER.

        Delete TMs created by other users. Default: true  # noqa: E501

        :param trans_memory_delete_other: The trans_memory_delete_other of this PROJECTMANAGER.  # noqa: E501
        :type: bool
        """

        self._trans_memory_delete_other = trans_memory_delete_other

    @property
    def trans_memory_export_other(self) -> bool:
        """Gets the trans_memory_export_other of this PROJECTMANAGER.  # noqa: E501

        Export TMs created by other users. Default: true  # noqa: E501

        :return: The trans_memory_export_other of this PROJECTMANAGER.  # noqa: E501
        :rtype: bool
        """
        return self._trans_memory_export_other

    @trans_memory_export_other.setter
    def trans_memory_export_other(self, trans_memory_export_other):
        """Sets the trans_memory_export_other of this PROJECTMANAGER.

        Export TMs created by other users. Default: true  # noqa: E501

        :param trans_memory_export_other: The trans_memory_export_other of this PROJECTMANAGER.  # noqa: E501
        :type: bool
        """

        self._trans_memory_export_other = trans_memory_export_other

    @property
    def trans_memory_import_other(self) -> bool:
        """Gets the trans_memory_import_other of this PROJECTMANAGER.  # noqa: E501

        Import into TMs created by other users. Default: true  # noqa: E501

        :return: The trans_memory_import_other of this PROJECTMANAGER.  # noqa: E501
        :rtype: bool
        """
        return self._trans_memory_import_other

    @trans_memory_import_other.setter
    def trans_memory_import_other(self, trans_memory_import_other):
        """Sets the trans_memory_import_other of this PROJECTMANAGER.

        Import into TMs created by other users. Default: true  # noqa: E501

        :param trans_memory_import_other: The trans_memory_import_other of this PROJECTMANAGER.  # noqa: E501
        :type: bool
        """

        self._trans_memory_import_other = trans_memory_import_other

    @property
    def trans_memory_clients(self) -> list[UidReference]:
        """Gets the trans_memory_clients of this PROJECTMANAGER.  # noqa: E501

        Access TMs of a selected clients only  # noqa: E501

        :return: The trans_memory_clients of this PROJECTMANAGER.  # noqa: E501
        :rtype: list[UidReference]
        """
        return self._trans_memory_clients

    @trans_memory_clients.setter
    def trans_memory_clients(self, trans_memory_clients):
        """Sets the trans_memory_clients of this PROJECTMANAGER.

        Access TMs of a selected clients only  # noqa: E501

        :param trans_memory_clients: The trans_memory_clients of this PROJECTMANAGER.  # noqa: E501
        :type: list[UidReference]
        """

        self._trans_memory_clients = trans_memory_clients

    @property
    def trans_memory_business_units(self) -> list[UidReference]:
        """Gets the trans_memory_business_units of this PROJECTMANAGER.  # noqa: E501

        Access TMs of selected business units only  # noqa: E501

        :return: The trans_memory_business_units of this PROJECTMANAGER.  # noqa: E501
        :rtype: list[UidReference]
        """
        return self._trans_memory_business_units

    @trans_memory_business_units.setter
    def trans_memory_business_units(self, trans_memory_business_units):
        """Sets the trans_memory_business_units of this PROJECTMANAGER.

        Access TMs of selected business units only  # noqa: E501

        :param trans_memory_business_units: The trans_memory_business_units of this PROJECTMANAGER.  # noqa: E501
        :type: list[UidReference]
        """

        self._trans_memory_business_units = trans_memory_business_units

    @property
    def term_base_create(self) -> bool:
        """Gets the term_base_create of this PROJECTMANAGER.  # noqa: E501

        Enable TBs creation. Default: true  # noqa: E501

        :return: The term_base_create of this PROJECTMANAGER.  # noqa: E501
        :rtype: bool
        """
        return self._term_base_create

    @term_base_create.setter
    def term_base_create(self, term_base_create):
        """Sets the term_base_create of this PROJECTMANAGER.

        Enable TBs creation. Default: true  # noqa: E501

        :param term_base_create: The term_base_create of this PROJECTMANAGER.  # noqa: E501
        :type: bool
        """

        self._term_base_create = term_base_create

    @property
    def term_base_view_other(self) -> bool:
        """Gets the term_base_view_other of this PROJECTMANAGER.  # noqa: E501

        View TBs created by other users. Default: true  # noqa: E501

        :return: The term_base_view_other of this PROJECTMANAGER.  # noqa: E501
        :rtype: bool
        """
        return self._term_base_view_other

    @term_base_view_other.setter
    def term_base_view_other(self, term_base_view_other):
        """Sets the term_base_view_other of this PROJECTMANAGER.

        View TBs created by other users. Default: true  # noqa: E501

        :param term_base_view_other: The term_base_view_other of this PROJECTMANAGER.  # noqa: E501
        :type: bool
        """

        self._term_base_view_other = term_base_view_other

    @property
    def term_base_edit_other(self) -> bool:
        """Gets the term_base_edit_other of this PROJECTMANAGER.  # noqa: E501

        Modify TBs created by other users. Default: true  # noqa: E501

        :return: The term_base_edit_other of this PROJECTMANAGER.  # noqa: E501
        :rtype: bool
        """
        return self._term_base_edit_other

    @term_base_edit_other.setter
    def term_base_edit_other(self, term_base_edit_other):
        """Sets the term_base_edit_other of this PROJECTMANAGER.

        Modify TBs created by other users. Default: true  # noqa: E501

        :param term_base_edit_other: The term_base_edit_other of this PROJECTMANAGER.  # noqa: E501
        :type: bool
        """

        self._term_base_edit_other = term_base_edit_other

    @property
    def term_base_delete_other(self) -> bool:
        """Gets the term_base_delete_other of this PROJECTMANAGER.  # noqa: E501

        Delete TBs created by other users. Default: true  # noqa: E501

        :return: The term_base_delete_other of this PROJECTMANAGER.  # noqa: E501
        :rtype: bool
        """
        return self._term_base_delete_other

    @term_base_delete_other.setter
    def term_base_delete_other(self, term_base_delete_other):
        """Sets the term_base_delete_other of this PROJECTMANAGER.

        Delete TBs created by other users. Default: true  # noqa: E501

        :param term_base_delete_other: The term_base_delete_other of this PROJECTMANAGER.  # noqa: E501
        :type: bool
        """

        self._term_base_delete_other = term_base_delete_other

    @property
    def term_base_export_other(self) -> bool:
        """Gets the term_base_export_other of this PROJECTMANAGER.  # noqa: E501

        Export TBs created by other users. Default: true  # noqa: E501

        :return: The term_base_export_other of this PROJECTMANAGER.  # noqa: E501
        :rtype: bool
        """
        return self._term_base_export_other

    @term_base_export_other.setter
    def term_base_export_other(self, term_base_export_other):
        """Sets the term_base_export_other of this PROJECTMANAGER.

        Export TBs created by other users. Default: true  # noqa: E501

        :param term_base_export_other: The term_base_export_other of this PROJECTMANAGER.  # noqa: E501
        :type: bool
        """

        self._term_base_export_other = term_base_export_other

    @property
    def term_base_import_other(self) -> bool:
        """Gets the term_base_import_other of this PROJECTMANAGER.  # noqa: E501

        Import into TBs created by other users. Default: true  # noqa: E501

        :return: The term_base_import_other of this PROJECTMANAGER.  # noqa: E501
        :rtype: bool
        """
        return self._term_base_import_other

    @term_base_import_other.setter
    def term_base_import_other(self, term_base_import_other):
        """Sets the term_base_import_other of this PROJECTMANAGER.

        Import into TBs created by other users. Default: true  # noqa: E501

        :param term_base_import_other: The term_base_import_other of this PROJECTMANAGER.  # noqa: E501
        :type: bool
        """

        self._term_base_import_other = term_base_import_other

    @property
    def term_base_approve_other(self) -> bool:
        """Gets the term_base_approve_other of this PROJECTMANAGER.  # noqa: E501

        Approve terms in TBs created by other users. Default: true  # noqa: E501

        :return: The term_base_approve_other of this PROJECTMANAGER.  # noqa: E501
        :rtype: bool
        """
        return self._term_base_approve_other

    @term_base_approve_other.setter
    def term_base_approve_other(self, term_base_approve_other):
        """Sets the term_base_approve_other of this PROJECTMANAGER.

        Approve terms in TBs created by other users. Default: true  # noqa: E501

        :param term_base_approve_other: The term_base_approve_other of this PROJECTMANAGER.  # noqa: E501
        :type: bool
        """

        self._term_base_approve_other = term_base_approve_other

    @property
    def term_base_clients(self) -> list[UidReference]:
        """Gets the term_base_clients of this PROJECTMANAGER.  # noqa: E501

        Access TBs of a selected clients only  # noqa: E501

        :return: The term_base_clients of this PROJECTMANAGER.  # noqa: E501
        :rtype: list[UidReference]
        """
        return self._term_base_clients

    @term_base_clients.setter
    def term_base_clients(self, term_base_clients):
        """Sets the term_base_clients of this PROJECTMANAGER.

        Access TBs of a selected clients only  # noqa: E501

        :param term_base_clients: The term_base_clients of this PROJECTMANAGER.  # noqa: E501
        :type: list[UidReference]
        """

        self._term_base_clients = term_base_clients

    @property
    def term_base_business_units(self) -> list[UidReference]:
        """Gets the term_base_business_units of this PROJECTMANAGER.  # noqa: E501

        Access TBs of selected business units only  # noqa: E501

        :return: The term_base_business_units of this PROJECTMANAGER.  # noqa: E501
        :rtype: list[UidReference]
        """
        return self._term_base_business_units

    @term_base_business_units.setter
    def term_base_business_units(self, term_base_business_units):
        """Sets the term_base_business_units of this PROJECTMANAGER.

        Access TBs of selected business units only  # noqa: E501

        :param term_base_business_units: The term_base_business_units of this PROJECTMANAGER.  # noqa: E501
        :type: list[UidReference]
        """

        self._term_base_business_units = term_base_business_units

    @property
    def user_create(self) -> bool:
        """Gets the user_create of this PROJECTMANAGER.  # noqa: E501

        Enable users creation. Default: true  # noqa: E501

        :return: The user_create of this PROJECTMANAGER.  # noqa: E501
        :rtype: bool
        """
        return self._user_create

    @user_create.setter
    def user_create(self, user_create):
        """Sets the user_create of this PROJECTMANAGER.

        Enable users creation. Default: true  # noqa: E501

        :param user_create: The user_create of this PROJECTMANAGER.  # noqa: E501
        :type: bool
        """

        self._user_create = user_create

    @property
    def user_view_other(self) -> bool:
        """Gets the user_view_other of this PROJECTMANAGER.  # noqa: E501

        View users created by other users. Default: true  # noqa: E501

        :return: The user_view_other of this PROJECTMANAGER.  # noqa: E501
        :rtype: bool
        """
        return self._user_view_other

    @user_view_other.setter
    def user_view_other(self, user_view_other):
        """Sets the user_view_other of this PROJECTMANAGER.

        View users created by other users. Default: true  # noqa: E501

        :param user_view_other: The user_view_other of this PROJECTMANAGER.  # noqa: E501
        :type: bool
        """

        self._user_view_other = user_view_other

    @property
    def user_edit_other(self) -> bool:
        """Gets the user_edit_other of this PROJECTMANAGER.  # noqa: E501

        Modify users created by other users. Default: true  # noqa: E501

        :return: The user_edit_other of this PROJECTMANAGER.  # noqa: E501
        :rtype: bool
        """
        return self._user_edit_other

    @user_edit_other.setter
    def user_edit_other(self, user_edit_other):
        """Sets the user_edit_other of this PROJECTMANAGER.

        Modify users created by other users. Default: true  # noqa: E501

        :param user_edit_other: The user_edit_other of this PROJECTMANAGER.  # noqa: E501
        :type: bool
        """

        self._user_edit_other = user_edit_other

    @property
    def user_delete_other(self) -> bool:
        """Gets the user_delete_other of this PROJECTMANAGER.  # noqa: E501

        Delete users created by other users. Default: true  # noqa: E501

        :return: The user_delete_other of this PROJECTMANAGER.  # noqa: E501
        :rtype: bool
        """
        return self._user_delete_other

    @user_delete_other.setter
    def user_delete_other(self, user_delete_other):
        """Sets the user_delete_other of this PROJECTMANAGER.

        Delete users created by other users. Default: true  # noqa: E501

        :param user_delete_other: The user_delete_other of this PROJECTMANAGER.  # noqa: E501
        :type: bool
        """

        self._user_delete_other = user_delete_other

    @property
    def client_domain_sub_domain_create(self) -> bool:
        """Gets the client_domain_sub_domain_create of this PROJECTMANAGER.  # noqa: E501

        Enable clients, domains, subdomains creation. Default: true  # noqa: E501

        :return: The client_domain_sub_domain_create of this PROJECTMANAGER.  # noqa: E501
        :rtype: bool
        """
        return self._client_domain_sub_domain_create

    @client_domain_sub_domain_create.setter
    def client_domain_sub_domain_create(self, client_domain_sub_domain_create):
        """Sets the client_domain_sub_domain_create of this PROJECTMANAGER.

        Enable clients, domains, subdomains creation. Default: true  # noqa: E501

        :param client_domain_sub_domain_create: The client_domain_sub_domain_create of this PROJECTMANAGER.  # noqa: E501
        :type: bool
        """

        self._client_domain_sub_domain_create = client_domain_sub_domain_create

    @property
    def client_domain_sub_domain_view_other(self) -> bool:
        """Gets the client_domain_sub_domain_view_other of this PROJECTMANAGER.  # noqa: E501

        View clients, domains, subdomains created by other users. Default: true  # noqa: E501

        :return: The client_domain_sub_domain_view_other of this PROJECTMANAGER.  # noqa: E501
        :rtype: bool
        """
        return self._client_domain_sub_domain_view_other

    @client_domain_sub_domain_view_other.setter
    def client_domain_sub_domain_view_other(self, client_domain_sub_domain_view_other):
        """Sets the client_domain_sub_domain_view_other of this PROJECTMANAGER.

        View clients, domains, subdomains created by other users. Default: true  # noqa: E501

        :param client_domain_sub_domain_view_other: The client_domain_sub_domain_view_other of this PROJECTMANAGER.  # noqa: E501
        :type: bool
        """

        self._client_domain_sub_domain_view_other = client_domain_sub_domain_view_other

    @property
    def client_domain_sub_domain_edit_other(self) -> bool:
        """Gets the client_domain_sub_domain_edit_other of this PROJECTMANAGER.  # noqa: E501

        Modify clients, domains, subdomains created by other users. Default: true  # noqa: E501

        :return: The client_domain_sub_domain_edit_other of this PROJECTMANAGER.  # noqa: E501
        :rtype: bool
        """
        return self._client_domain_sub_domain_edit_other

    @client_domain_sub_domain_edit_other.setter
    def client_domain_sub_domain_edit_other(self, client_domain_sub_domain_edit_other):
        """Sets the client_domain_sub_domain_edit_other of this PROJECTMANAGER.

        Modify clients, domains, subdomains created by other users. Default: true  # noqa: E501

        :param client_domain_sub_domain_edit_other: The client_domain_sub_domain_edit_other of this PROJECTMANAGER.  # noqa: E501
        :type: bool
        """

        self._client_domain_sub_domain_edit_other = client_domain_sub_domain_edit_other

    @property
    def client_domain_sub_domain_delete_other(self) -> bool:
        """Gets the client_domain_sub_domain_delete_other of this PROJECTMANAGER.  # noqa: E501

        Delete clients, domains, subdomains created by other users. Default: true  # noqa: E501

        :return: The client_domain_sub_domain_delete_other of this PROJECTMANAGER.  # noqa: E501
        :rtype: bool
        """
        return self._client_domain_sub_domain_delete_other

    @client_domain_sub_domain_delete_other.setter
    def client_domain_sub_domain_delete_other(
        self, client_domain_sub_domain_delete_other
    ):
        """Sets the client_domain_sub_domain_delete_other of this PROJECTMANAGER.

        Delete clients, domains, subdomains created by other users. Default: true  # noqa: E501

        :param client_domain_sub_domain_delete_other: The client_domain_sub_domain_delete_other of this PROJECTMANAGER.  # noqa: E501
        :type: bool
        """

        self._client_domain_sub_domain_delete_other = (
            client_domain_sub_domain_delete_other
        )

    @property
    def vendor_create(self) -> bool:
        """Gets the vendor_create of this PROJECTMANAGER.  # noqa: E501

        Enable Vendors creation. Default: true  # noqa: E501

        :return: The vendor_create of this PROJECTMANAGER.  # noqa: E501
        :rtype: bool
        """
        return self._vendor_create

    @vendor_create.setter
    def vendor_create(self, vendor_create):
        """Sets the vendor_create of this PROJECTMANAGER.

        Enable Vendors creation. Default: true  # noqa: E501

        :param vendor_create: The vendor_create of this PROJECTMANAGER.  # noqa: E501
        :type: bool
        """

        self._vendor_create = vendor_create

    @property
    def vendor_view_other(self) -> bool:
        """Gets the vendor_view_other of this PROJECTMANAGER.  # noqa: E501

        View Vendors created by other users. Default: true  # noqa: E501

        :return: The vendor_view_other of this PROJECTMANAGER.  # noqa: E501
        :rtype: bool
        """
        return self._vendor_view_other

    @vendor_view_other.setter
    def vendor_view_other(self, vendor_view_other):
        """Sets the vendor_view_other of this PROJECTMANAGER.

        View Vendors created by other users. Default: true  # noqa: E501

        :param vendor_view_other: The vendor_view_other of this PROJECTMANAGER.  # noqa: E501
        :type: bool
        """

        self._vendor_view_other = vendor_view_other

    @property
    def vendor_edit_other(self) -> bool:
        """Gets the vendor_edit_other of this PROJECTMANAGER.  # noqa: E501

        Modify Vendors created by other users. Default: true  # noqa: E501

        :return: The vendor_edit_other of this PROJECTMANAGER.  # noqa: E501
        :rtype: bool
        """
        return self._vendor_edit_other

    @vendor_edit_other.setter
    def vendor_edit_other(self, vendor_edit_other):
        """Sets the vendor_edit_other of this PROJECTMANAGER.

        Modify Vendors created by other users. Default: true  # noqa: E501

        :param vendor_edit_other: The vendor_edit_other of this PROJECTMANAGER.  # noqa: E501
        :type: bool
        """

        self._vendor_edit_other = vendor_edit_other

    @property
    def vendor_delete_other(self) -> bool:
        """Gets the vendor_delete_other of this PROJECTMANAGER.  # noqa: E501

        Delete Vendors created by other users. Default: true  # noqa: E501

        :return: The vendor_delete_other of this PROJECTMANAGER.  # noqa: E501
        :rtype: bool
        """
        return self._vendor_delete_other

    @vendor_delete_other.setter
    def vendor_delete_other(self, vendor_delete_other):
        """Sets the vendor_delete_other of this PROJECTMANAGER.

        Delete Vendors created by other users. Default: true  # noqa: E501

        :param vendor_delete_other: The vendor_delete_other of this PROJECTMANAGER.  # noqa: E501
        :type: bool
        """

        self._vendor_delete_other = vendor_delete_other

    @property
    def dashboard_setting(self) -> str:
        """Gets the dashboard_setting of this PROJECTMANAGER.  # noqa: E501

        Home page dashboards. Default: OWN_DATA  # noqa: E501

        :return: The dashboard_setting of this PROJECTMANAGER.  # noqa: E501
        :rtype: str
        """
        return self._dashboard_setting

    @dashboard_setting.setter
    def dashboard_setting(self, dashboard_setting):
        """Sets the dashboard_setting of this PROJECTMANAGER.

        Home page dashboards. Default: OWN_DATA  # noqa: E501

        :param dashboard_setting: The dashboard_setting of this PROJECTMANAGER.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALL_DATA", "OWN_DATA", "NO_DASHBOARD"]  # noqa: E501
        if dashboard_setting not in allowed_values:
            raise ValueError(
                "Invalid value for `dashboard_setting` ({0}), must be one of {1}".format(  # noqa: E501
                    dashboard_setting, allowed_values
                )
            )

        self._dashboard_setting = dashboard_setting

    @property
    def setup_server(self) -> bool:
        """Gets the setup_server of this PROJECTMANAGER.  # noqa: E501

        Modify setup's server settings. Default: true  # noqa: E501

        :return: The setup_server of this PROJECTMANAGER.  # noqa: E501
        :rtype: bool
        """
        return self._setup_server

    @setup_server.setter
    def setup_server(self, setup_server):
        """Sets the setup_server of this PROJECTMANAGER.

        Modify setup's server settings. Default: true  # noqa: E501

        :param setup_server: The setup_server of this PROJECTMANAGER.  # noqa: E501
        :type: bool
        """

        self._setup_server = setup_server

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(PROJECTMANAGER, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PROJECTMANAGER):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
