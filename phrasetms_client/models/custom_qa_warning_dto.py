# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from phrasetms_client.models import Position
from phrasetms_client.models.segment_warning import SegmentWarning  # noqa: F401,E501


class CustomQAWarningDto(SegmentWarning):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "message": "str",
        "sub_type": "str",
        "src_position": "Position",
        "tgt_position": "Position",
    }
    if hasattr(SegmentWarning, "swagger_types"):
        swagger_types.update(SegmentWarning.swagger_types)

    attribute_map = {
        "message": "message",
        "sub_type": "subType",
        "src_position": "srcPosition",
        "tgt_position": "tgtPosition",
    }
    if hasattr(SegmentWarning, "attribute_map"):
        attribute_map.update(SegmentWarning.attribute_map)

    def __init__(
        self,
        message=None,
        sub_type=None,
        src_position=None,
        tgt_position=None,
        *args,
        **kwargs
    ):  # noqa: E501
        """CustomQAWarningDto - a model defined in Swagger"""  # noqa: E501
        self._message = None
        self._sub_type = None
        self._src_position = None
        self._tgt_position = None
        self.discriminator = None
        if message is not None:
            self.message = message
        if sub_type is not None:
            self.sub_type = sub_type
        if src_position is not None:
            self.src_position = src_position
        if tgt_position is not None:
            self.tgt_position = tgt_position
        SegmentWarning.__init__(self, *args, **kwargs)

    @property
    def message(self) -> str:
        """Gets the message of this CustomQAWarningDto.  # noqa: E501


        :return: The message of this CustomQAWarningDto.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CustomQAWarningDto.


        :param message: The message of this CustomQAWarningDto.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def sub_type(self) -> str:
        """Gets the sub_type of this CustomQAWarningDto.  # noqa: E501


        :return: The sub_type of this CustomQAWarningDto.  # noqa: E501
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this CustomQAWarningDto.


        :param sub_type: The sub_type of this CustomQAWarningDto.  # noqa: E501
        :type: str
        """

        self._sub_type = sub_type

    @property
    def src_position(self) -> Position:
        """Gets the src_position of this CustomQAWarningDto.  # noqa: E501


        :return: The src_position of this CustomQAWarningDto.  # noqa: E501
        :rtype: Position
        """
        return self._src_position

    @src_position.setter
    def src_position(self, src_position):
        """Sets the src_position of this CustomQAWarningDto.


        :param src_position: The src_position of this CustomQAWarningDto.  # noqa: E501
        :type: Position
        """

        self._src_position = src_position

    @property
    def tgt_position(self) -> Position:
        """Gets the tgt_position of this CustomQAWarningDto.  # noqa: E501


        :return: The tgt_position of this CustomQAWarningDto.  # noqa: E501
        :rtype: Position
        """
        return self._tgt_position

    @tgt_position.setter
    def tgt_position(self, tgt_position):
        """Sets the tgt_position of this CustomQAWarningDto.


        :param tgt_position: The tgt_position of this CustomQAWarningDto.  # noqa: E501
        :type: Position
        """

        self._tgt_position = tgt_position

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(CustomQAWarningDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomQAWarningDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
