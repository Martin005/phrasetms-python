# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from datetime import datetime

import six

from phrasetms_client.models import MentionDto, MentionableUserDto


class CommentDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "text": "str",
        "created_by": "MentionableUserDto",
        "date_created": "datetime",
        "date_modified": "datetime",
        "mentions": "list[MentionDto]",
    }

    attribute_map = {
        "id": "id",
        "text": "text",
        "created_by": "createdBy",
        "date_created": "dateCreated",
        "date_modified": "dateModified",
        "mentions": "mentions",
    }

    def __init__(
        self,
        id=None,
        text=None,
        created_by=None,
        date_created=None,
        date_modified=None,
        mentions=None,
    ):  # noqa: E501
        """CommentDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._text = None
        self._created_by = None
        self._date_created = None
        self._date_modified = None
        self._mentions = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if text is not None:
            self.text = text
        if created_by is not None:
            self.created_by = created_by
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified
        if mentions is not None:
            self.mentions = mentions

    @property
    def id(self) -> str:
        """Gets the id of this CommentDto.  # noqa: E501


        :return: The id of this CommentDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CommentDto.


        :param id: The id of this CommentDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def text(self) -> str:
        """Gets the text of this CommentDto.  # noqa: E501


        :return: The text of this CommentDto.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this CommentDto.


        :param text: The text of this CommentDto.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def created_by(self) -> MentionableUserDto:
        """Gets the created_by of this CommentDto.  # noqa: E501


        :return: The created_by of this CommentDto.  # noqa: E501
        :rtype: MentionableUserDto
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this CommentDto.


        :param created_by: The created_by of this CommentDto.  # noqa: E501
        :type: MentionableUserDto
        """

        self._created_by = created_by

    @property
    def date_created(self) -> datetime:
        """Gets the date_created of this CommentDto.  # noqa: E501


        :return: The date_created of this CommentDto.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this CommentDto.


        :param date_created: The date_created of this CommentDto.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self) -> datetime:
        """Gets the date_modified of this CommentDto.  # noqa: E501


        :return: The date_modified of this CommentDto.  # noqa: E501
        :rtype: datetime
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this CommentDto.


        :param date_modified: The date_modified of this CommentDto.  # noqa: E501
        :type: datetime
        """

        self._date_modified = date_modified

    @property
    def mentions(self) -> list[MentionDto]:
        """Gets the mentions of this CommentDto.  # noqa: E501


        :return: The mentions of this CommentDto.  # noqa: E501
        :rtype: list[MentionDto]
        """
        return self._mentions

    @mentions.setter
    def mentions(self, mentions):
        """Sets the mentions of this CommentDto.


        :param mentions: The mentions of this CommentDto.  # noqa: E501
        :type: list[MentionDto]
        """

        self._mentions = mentions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(CommentDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommentDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
