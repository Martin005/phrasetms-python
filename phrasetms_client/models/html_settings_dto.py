# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HtmlSettingsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'break_tag_creates_segment': 'bool',
        'unknown_tag_creates_tag': 'bool',
        'preserve_whitespace': 'bool',
        'import_comments': 'bool',
        'exclude_elements': 'str',
        'tag_regexp': 'str',
        'char_entities_to_tags': 'str',
        'translate_meta_tag_regexp': 'str',
        'import_default_meta_tags': 'bool',
        'translatable_attributes': 'str',
        'import_default_attributes': 'bool',
        'non_translatable_inline_elements': 'str',
        'translatable_inline_elements': 'str',
        'update_lang': 'bool',
        'escape_disabled': 'bool'
    }

    attribute_map = {
        'break_tag_creates_segment': 'breakTagCreatesSegment',
        'unknown_tag_creates_tag': 'unknownTagCreatesTag',
        'preserve_whitespace': 'preserveWhitespace',
        'import_comments': 'importComments',
        'exclude_elements': 'excludeElements',
        'tag_regexp': 'tagRegexp',
        'char_entities_to_tags': 'charEntitiesToTags',
        'translate_meta_tag_regexp': 'translateMetaTagRegexp',
        'import_default_meta_tags': 'importDefaultMetaTags',
        'translatable_attributes': 'translatableAttributes',
        'import_default_attributes': 'importDefaultAttributes',
        'non_translatable_inline_elements': 'nonTranslatableInlineElements',
        'translatable_inline_elements': 'translatableInlineElements',
        'update_lang': 'updateLang',
        'escape_disabled': 'escapeDisabled'
    }

    def __init__(self, break_tag_creates_segment=None, unknown_tag_creates_tag=None, preserve_whitespace=None, import_comments=None, exclude_elements=None, tag_regexp=None, char_entities_to_tags=None, translate_meta_tag_regexp=None, import_default_meta_tags=None, translatable_attributes=None, import_default_attributes=None, non_translatable_inline_elements=None, translatable_inline_elements=None, update_lang=None, escape_disabled=None):  # noqa: E501
        """HtmlSettingsDto - a model defined in Swagger"""  # noqa: E501
        self._break_tag_creates_segment = None
        self._unknown_tag_creates_tag = None
        self._preserve_whitespace = None
        self._import_comments = None
        self._exclude_elements = None
        self._tag_regexp = None
        self._char_entities_to_tags = None
        self._translate_meta_tag_regexp = None
        self._import_default_meta_tags = None
        self._translatable_attributes = None
        self._import_default_attributes = None
        self._non_translatable_inline_elements = None
        self._translatable_inline_elements = None
        self._update_lang = None
        self._escape_disabled = None
        self.discriminator = None
        if break_tag_creates_segment is not None:
            self.break_tag_creates_segment = break_tag_creates_segment
        if unknown_tag_creates_tag is not None:
            self.unknown_tag_creates_tag = unknown_tag_creates_tag
        if preserve_whitespace is not None:
            self.preserve_whitespace = preserve_whitespace
        if import_comments is not None:
            self.import_comments = import_comments
        if exclude_elements is not None:
            self.exclude_elements = exclude_elements
        if tag_regexp is not None:
            self.tag_regexp = tag_regexp
        if char_entities_to_tags is not None:
            self.char_entities_to_tags = char_entities_to_tags
        if translate_meta_tag_regexp is not None:
            self.translate_meta_tag_regexp = translate_meta_tag_regexp
        if import_default_meta_tags is not None:
            self.import_default_meta_tags = import_default_meta_tags
        if translatable_attributes is not None:
            self.translatable_attributes = translatable_attributes
        if import_default_attributes is not None:
            self.import_default_attributes = import_default_attributes
        if non_translatable_inline_elements is not None:
            self.non_translatable_inline_elements = non_translatable_inline_elements
        if translatable_inline_elements is not None:
            self.translatable_inline_elements = translatable_inline_elements
        if update_lang is not None:
            self.update_lang = update_lang
        if escape_disabled is not None:
            self.escape_disabled = escape_disabled

    @property
    def break_tag_creates_segment(self):
        """Gets the break_tag_creates_segment of this HtmlSettingsDto.  # noqa: E501

        Default: true  # noqa: E501

        :return: The break_tag_creates_segment of this HtmlSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._break_tag_creates_segment

    @break_tag_creates_segment.setter
    def break_tag_creates_segment(self, break_tag_creates_segment):
        """Sets the break_tag_creates_segment of this HtmlSettingsDto.

        Default: true  # noqa: E501

        :param break_tag_creates_segment: The break_tag_creates_segment of this HtmlSettingsDto.  # noqa: E501
        :type: bool
        """

        self._break_tag_creates_segment = break_tag_creates_segment

    @property
    def unknown_tag_creates_tag(self):
        """Gets the unknown_tag_creates_tag of this HtmlSettingsDto.  # noqa: E501

        Default: true  # noqa: E501

        :return: The unknown_tag_creates_tag of this HtmlSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._unknown_tag_creates_tag

    @unknown_tag_creates_tag.setter
    def unknown_tag_creates_tag(self, unknown_tag_creates_tag):
        """Sets the unknown_tag_creates_tag of this HtmlSettingsDto.

        Default: true  # noqa: E501

        :param unknown_tag_creates_tag: The unknown_tag_creates_tag of this HtmlSettingsDto.  # noqa: E501
        :type: bool
        """

        self._unknown_tag_creates_tag = unknown_tag_creates_tag

    @property
    def preserve_whitespace(self):
        """Gets the preserve_whitespace of this HtmlSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The preserve_whitespace of this HtmlSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._preserve_whitespace

    @preserve_whitespace.setter
    def preserve_whitespace(self, preserve_whitespace):
        """Sets the preserve_whitespace of this HtmlSettingsDto.

        Default: false  # noqa: E501

        :param preserve_whitespace: The preserve_whitespace of this HtmlSettingsDto.  # noqa: E501
        :type: bool
        """

        self._preserve_whitespace = preserve_whitespace

    @property
    def import_comments(self):
        """Gets the import_comments of this HtmlSettingsDto.  # noqa: E501

        Default: true  # noqa: E501

        :return: The import_comments of this HtmlSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._import_comments

    @import_comments.setter
    def import_comments(self, import_comments):
        """Sets the import_comments of this HtmlSettingsDto.

        Default: true  # noqa: E501

        :param import_comments: The import_comments of this HtmlSettingsDto.  # noqa: E501
        :type: bool
        """

        self._import_comments = import_comments

    @property
    def exclude_elements(self):
        """Gets the exclude_elements of this HtmlSettingsDto.  # noqa: E501

        Example: \"script,blockquote\"  # noqa: E501

        :return: The exclude_elements of this HtmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._exclude_elements

    @exclude_elements.setter
    def exclude_elements(self, exclude_elements):
        """Sets the exclude_elements of this HtmlSettingsDto.

        Example: \"script,blockquote\"  # noqa: E501

        :param exclude_elements: The exclude_elements of this HtmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._exclude_elements = exclude_elements

    @property
    def tag_regexp(self):
        """Gets the tag_regexp of this HtmlSettingsDto.  # noqa: E501


        :return: The tag_regexp of this HtmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._tag_regexp

    @tag_regexp.setter
    def tag_regexp(self, tag_regexp):
        """Sets the tag_regexp of this HtmlSettingsDto.


        :param tag_regexp: The tag_regexp of this HtmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._tag_regexp = tag_regexp

    @property
    def char_entities_to_tags(self):
        """Gets the char_entities_to_tags of this HtmlSettingsDto.  # noqa: E501


        :return: The char_entities_to_tags of this HtmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._char_entities_to_tags

    @char_entities_to_tags.setter
    def char_entities_to_tags(self, char_entities_to_tags):
        """Sets the char_entities_to_tags of this HtmlSettingsDto.


        :param char_entities_to_tags: The char_entities_to_tags of this HtmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._char_entities_to_tags = char_entities_to_tags

    @property
    def translate_meta_tag_regexp(self):
        """Gets the translate_meta_tag_regexp of this HtmlSettingsDto.  # noqa: E501


        :return: The translate_meta_tag_regexp of this HtmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._translate_meta_tag_regexp

    @translate_meta_tag_regexp.setter
    def translate_meta_tag_regexp(self, translate_meta_tag_regexp):
        """Sets the translate_meta_tag_regexp of this HtmlSettingsDto.


        :param translate_meta_tag_regexp: The translate_meta_tag_regexp of this HtmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._translate_meta_tag_regexp = translate_meta_tag_regexp

    @property
    def import_default_meta_tags(self):
        """Gets the import_default_meta_tags of this HtmlSettingsDto.  # noqa: E501

        Default: true  # noqa: E501

        :return: The import_default_meta_tags of this HtmlSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._import_default_meta_tags

    @import_default_meta_tags.setter
    def import_default_meta_tags(self, import_default_meta_tags):
        """Sets the import_default_meta_tags of this HtmlSettingsDto.

        Default: true  # noqa: E501

        :param import_default_meta_tags: The import_default_meta_tags of this HtmlSettingsDto.  # noqa: E501
        :type: bool
        """

        self._import_default_meta_tags = import_default_meta_tags

    @property
    def translatable_attributes(self):
        """Gets the translatable_attributes of this HtmlSettingsDto.  # noqa: E501


        :return: The translatable_attributes of this HtmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._translatable_attributes

    @translatable_attributes.setter
    def translatable_attributes(self, translatable_attributes):
        """Sets the translatable_attributes of this HtmlSettingsDto.


        :param translatable_attributes: The translatable_attributes of this HtmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._translatable_attributes = translatable_attributes

    @property
    def import_default_attributes(self):
        """Gets the import_default_attributes of this HtmlSettingsDto.  # noqa: E501

        Default: true  # noqa: E501

        :return: The import_default_attributes of this HtmlSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._import_default_attributes

    @import_default_attributes.setter
    def import_default_attributes(self, import_default_attributes):
        """Sets the import_default_attributes of this HtmlSettingsDto.

        Default: true  # noqa: E501

        :param import_default_attributes: The import_default_attributes of this HtmlSettingsDto.  # noqa: E501
        :type: bool
        """

        self._import_default_attributes = import_default_attributes

    @property
    def non_translatable_inline_elements(self):
        """Gets the non_translatable_inline_elements of this HtmlSettingsDto.  # noqa: E501

        Example: \"code\"  # noqa: E501

        :return: The non_translatable_inline_elements of this HtmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._non_translatable_inline_elements

    @non_translatable_inline_elements.setter
    def non_translatable_inline_elements(self, non_translatable_inline_elements):
        """Sets the non_translatable_inline_elements of this HtmlSettingsDto.

        Example: \"code\"  # noqa: E501

        :param non_translatable_inline_elements: The non_translatable_inline_elements of this HtmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._non_translatable_inline_elements = non_translatable_inline_elements

    @property
    def translatable_inline_elements(self):
        """Gets the translatable_inline_elements of this HtmlSettingsDto.  # noqa: E501

        Example: \"span\"  # noqa: E501

        :return: The translatable_inline_elements of this HtmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._translatable_inline_elements

    @translatable_inline_elements.setter
    def translatable_inline_elements(self, translatable_inline_elements):
        """Sets the translatable_inline_elements of this HtmlSettingsDto.

        Example: \"span\"  # noqa: E501

        :param translatable_inline_elements: The translatable_inline_elements of this HtmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._translatable_inline_elements = translatable_inline_elements

    @property
    def update_lang(self):
        """Gets the update_lang of this HtmlSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The update_lang of this HtmlSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._update_lang

    @update_lang.setter
    def update_lang(self, update_lang):
        """Sets the update_lang of this HtmlSettingsDto.

        Default: false  # noqa: E501

        :param update_lang: The update_lang of this HtmlSettingsDto.  # noqa: E501
        :type: bool
        """

        self._update_lang = update_lang

    @property
    def escape_disabled(self):
        """Gets the escape_disabled of this HtmlSettingsDto.  # noqa: E501

        Default: `false`  # noqa: E501

        :return: The escape_disabled of this HtmlSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._escape_disabled

    @escape_disabled.setter
    def escape_disabled(self, escape_disabled):
        """Sets the escape_disabled of this HtmlSettingsDto.

        Default: `false`  # noqa: E501

        :param escape_disabled: The escape_disabled of this HtmlSettingsDto.  # noqa: E501
        :type: bool
        """

        self._escape_disabled = escape_disabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HtmlSettingsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HtmlSettingsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
