# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VendorDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'uid': 'str',
        'name': 'str',
        'vendor_token': 'str',
        'price_list': 'PriceListReference',
        'net_rate_scheme': 'DiscountSchemeReference',
        'source_locales': 'list[str]',
        'target_locales': 'list[str]',
        'clients': 'list[ClientReference]',
        'domains': 'list[DomainReference]',
        'sub_domains': 'list[SubDomainReference]',
        'workflow_steps': 'list[WorkflowStepReference]'
    }

    attribute_map = {
        'id': 'id',
        'uid': 'uid',
        'name': 'name',
        'vendor_token': 'vendorToken',
        'price_list': 'priceList',
        'net_rate_scheme': 'netRateScheme',
        'source_locales': 'sourceLocales',
        'target_locales': 'targetLocales',
        'clients': 'clients',
        'domains': 'domains',
        'sub_domains': 'subDomains',
        'workflow_steps': 'workflowSteps'
    }

    def __init__(self, id=None, uid=None, name=None, vendor_token=None, price_list=None, net_rate_scheme=None, source_locales=None, target_locales=None, clients=None, domains=None, sub_domains=None, workflow_steps=None):  # noqa: E501
        """VendorDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._uid = None
        self._name = None
        self._vendor_token = None
        self._price_list = None
        self._net_rate_scheme = None
        self._source_locales = None
        self._target_locales = None
        self._clients = None
        self._domains = None
        self._sub_domains = None
        self._workflow_steps = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if uid is not None:
            self.uid = uid
        if name is not None:
            self.name = name
        if vendor_token is not None:
            self.vendor_token = vendor_token
        if price_list is not None:
            self.price_list = price_list
        if net_rate_scheme is not None:
            self.net_rate_scheme = net_rate_scheme
        if source_locales is not None:
            self.source_locales = source_locales
        if target_locales is not None:
            self.target_locales = target_locales
        if clients is not None:
            self.clients = clients
        if domains is not None:
            self.domains = domains
        if sub_domains is not None:
            self.sub_domains = sub_domains
        if workflow_steps is not None:
            self.workflow_steps = workflow_steps

    @property
    def id(self):
        """Gets the id of this VendorDto.  # noqa: E501


        :return: The id of this VendorDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VendorDto.


        :param id: The id of this VendorDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def uid(self):
        """Gets the uid of this VendorDto.  # noqa: E501


        :return: The uid of this VendorDto.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this VendorDto.


        :param uid: The uid of this VendorDto.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def name(self):
        """Gets the name of this VendorDto.  # noqa: E501


        :return: The name of this VendorDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VendorDto.


        :param name: The name of this VendorDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def vendor_token(self):
        """Gets the vendor_token of this VendorDto.  # noqa: E501


        :return: The vendor_token of this VendorDto.  # noqa: E501
        :rtype: str
        """
        return self._vendor_token

    @vendor_token.setter
    def vendor_token(self, vendor_token):
        """Sets the vendor_token of this VendorDto.


        :param vendor_token: The vendor_token of this VendorDto.  # noqa: E501
        :type: str
        """

        self._vendor_token = vendor_token

    @property
    def price_list(self):
        """Gets the price_list of this VendorDto.  # noqa: E501


        :return: The price_list of this VendorDto.  # noqa: E501
        :rtype: PriceListReference
        """
        return self._price_list

    @price_list.setter
    def price_list(self, price_list):
        """Sets the price_list of this VendorDto.


        :param price_list: The price_list of this VendorDto.  # noqa: E501
        :type: PriceListReference
        """

        self._price_list = price_list

    @property
    def net_rate_scheme(self):
        """Gets the net_rate_scheme of this VendorDto.  # noqa: E501


        :return: The net_rate_scheme of this VendorDto.  # noqa: E501
        :rtype: DiscountSchemeReference
        """
        return self._net_rate_scheme

    @net_rate_scheme.setter
    def net_rate_scheme(self, net_rate_scheme):
        """Sets the net_rate_scheme of this VendorDto.


        :param net_rate_scheme: The net_rate_scheme of this VendorDto.  # noqa: E501
        :type: DiscountSchemeReference
        """

        self._net_rate_scheme = net_rate_scheme

    @property
    def source_locales(self):
        """Gets the source_locales of this VendorDto.  # noqa: E501


        :return: The source_locales of this VendorDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._source_locales

    @source_locales.setter
    def source_locales(self, source_locales):
        """Sets the source_locales of this VendorDto.


        :param source_locales: The source_locales of this VendorDto.  # noqa: E501
        :type: list[str]
        """

        self._source_locales = source_locales

    @property
    def target_locales(self):
        """Gets the target_locales of this VendorDto.  # noqa: E501


        :return: The target_locales of this VendorDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._target_locales

    @target_locales.setter
    def target_locales(self, target_locales):
        """Sets the target_locales of this VendorDto.


        :param target_locales: The target_locales of this VendorDto.  # noqa: E501
        :type: list[str]
        """

        self._target_locales = target_locales

    @property
    def clients(self):
        """Gets the clients of this VendorDto.  # noqa: E501


        :return: The clients of this VendorDto.  # noqa: E501
        :rtype: list[ClientReference]
        """
        return self._clients

    @clients.setter
    def clients(self, clients):
        """Sets the clients of this VendorDto.


        :param clients: The clients of this VendorDto.  # noqa: E501
        :type: list[ClientReference]
        """

        self._clients = clients

    @property
    def domains(self):
        """Gets the domains of this VendorDto.  # noqa: E501


        :return: The domains of this VendorDto.  # noqa: E501
        :rtype: list[DomainReference]
        """
        return self._domains

    @domains.setter
    def domains(self, domains):
        """Sets the domains of this VendorDto.


        :param domains: The domains of this VendorDto.  # noqa: E501
        :type: list[DomainReference]
        """

        self._domains = domains

    @property
    def sub_domains(self):
        """Gets the sub_domains of this VendorDto.  # noqa: E501


        :return: The sub_domains of this VendorDto.  # noqa: E501
        :rtype: list[SubDomainReference]
        """
        return self._sub_domains

    @sub_domains.setter
    def sub_domains(self, sub_domains):
        """Sets the sub_domains of this VendorDto.


        :param sub_domains: The sub_domains of this VendorDto.  # noqa: E501
        :type: list[SubDomainReference]
        """

        self._sub_domains = sub_domains

    @property
    def workflow_steps(self):
        """Gets the workflow_steps of this VendorDto.  # noqa: E501


        :return: The workflow_steps of this VendorDto.  # noqa: E501
        :rtype: list[WorkflowStepReference]
        """
        return self._workflow_steps

    @workflow_steps.setter
    def workflow_steps(self, workflow_steps):
        """Sets the workflow_steps of this VendorDto.


        :param workflow_steps: The workflow_steps of this VendorDto.  # noqa: E501
        :type: list[WorkflowStepReference]
        """

        self._workflow_steps = workflow_steps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VendorDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VendorDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
