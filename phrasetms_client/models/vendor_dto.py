# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from phrasetms_client.models.client_reference import ClientReference
from phrasetms_client.models.discount_scheme_reference import DiscountSchemeReference
from phrasetms_client.models.domain_reference import DomainReference
from phrasetms_client.models.price_list_reference import PriceListReference
from phrasetms_client.models.sub_domain_reference import SubDomainReference
from phrasetms_client.models.workflow_step_reference import WorkflowStepReference

class VendorDto(BaseModel):
    """
    VendorDto
    """
    id: Optional[StrictStr] = None
    uid: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    vendor_token: Optional[StrictStr] = Field(None, alias="vendorToken")
    price_list: Optional[PriceListReference] = Field(None, alias="priceList")
    net_rate_scheme: Optional[DiscountSchemeReference] = Field(None, alias="netRateScheme")
    source_locales: Optional[conlist(StrictStr)] = Field(None, alias="sourceLocales")
    target_locales: Optional[conlist(StrictStr)] = Field(None, alias="targetLocales")
    clients: Optional[conlist(ClientReference)] = None
    domains: Optional[conlist(DomainReference)] = None
    sub_domains: Optional[conlist(SubDomainReference)] = Field(None, alias="subDomains")
    workflow_steps: Optional[conlist(WorkflowStepReference)] = Field(None, alias="workflowSteps")
    __properties = ["id", "uid", "name", "vendorToken", "priceList", "netRateScheme", "sourceLocales", "targetLocales", "clients", "domains", "subDomains", "workflowSteps"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VendorDto:
        """Create an instance of VendorDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of price_list
        if self.price_list:
            _dict['priceList'] = self.price_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of net_rate_scheme
        if self.net_rate_scheme:
            _dict['netRateScheme'] = self.net_rate_scheme.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in clients (list)
        _items = []
        if self.clients:
            for _item in self.clients:
                if _item:
                    _items.append(_item.to_dict())
            _dict['clients'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in domains (list)
        _items = []
        if self.domains:
            for _item in self.domains:
                if _item:
                    _items.append(_item.to_dict())
            _dict['domains'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sub_domains (list)
        _items = []
        if self.sub_domains:
            for _item in self.sub_domains:
                if _item:
                    _items.append(_item.to_dict())
            _dict['subDomains'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in workflow_steps (list)
        _items = []
        if self.workflow_steps:
            for _item in self.workflow_steps:
                if _item:
                    _items.append(_item.to_dict())
            _dict['workflowSteps'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VendorDto:
        """Create an instance of VendorDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VendorDto.parse_obj(obj)

        _obj = VendorDto.parse_obj({
            "id": obj.get("id"),
            "uid": obj.get("uid"),
            "name": obj.get("name"),
            "vendor_token": obj.get("vendorToken"),
            "price_list": PriceListReference.from_dict(obj.get("priceList")) if obj.get("priceList") is not None else None,
            "net_rate_scheme": DiscountSchemeReference.from_dict(obj.get("netRateScheme")) if obj.get("netRateScheme") is not None else None,
            "source_locales": obj.get("sourceLocales"),
            "target_locales": obj.get("targetLocales"),
            "clients": [ClientReference.from_dict(_item) for _item in obj.get("clients")] if obj.get("clients") is not None else None,
            "domains": [DomainReference.from_dict(_item) for _item in obj.get("domains")] if obj.get("domains") is not None else None,
            "sub_domains": [SubDomainReference.from_dict(_item) for _item in obj.get("subDomains")] if obj.get("subDomains") is not None else None,
            "workflow_steps": [WorkflowStepReference.from_dict(_item) for _item in obj.get("workflowSteps")] if obj.get("workflowSteps") is not None else None
        })
        return _obj

