# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TranslationPriceListCreateDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'currency_code': 'str',
        'billing_unit': 'str'
    }

    attribute_map = {
        'name': 'name',
        'currency_code': 'currencyCode',
        'billing_unit': 'billingUnit'
    }

    def __init__(self, name=None, currency_code=None, billing_unit=None):  # noqa: E501
        """TranslationPriceListCreateDto - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._currency_code = None
        self._billing_unit = None
        self.discriminator = None
        self.name = name
        self.currency_code = currency_code
        if billing_unit is not None:
            self.billing_unit = billing_unit

    @property
    def name(self):
        """Gets the name of this TranslationPriceListCreateDto.  # noqa: E501


        :return: The name of this TranslationPriceListCreateDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TranslationPriceListCreateDto.


        :param name: The name of this TranslationPriceListCreateDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def currency_code(self):
        """Gets the currency_code of this TranslationPriceListCreateDto.  # noqa: E501


        :return: The currency_code of this TranslationPriceListCreateDto.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this TranslationPriceListCreateDto.


        :param currency_code: The currency_code of this TranslationPriceListCreateDto.  # noqa: E501
        :type: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")  # noqa: E501

        self._currency_code = currency_code

    @property
    def billing_unit(self):
        """Gets the billing_unit of this TranslationPriceListCreateDto.  # noqa: E501

        Default: Word  # noqa: E501

        :return: The billing_unit of this TranslationPriceListCreateDto.  # noqa: E501
        :rtype: str
        """
        return self._billing_unit

    @billing_unit.setter
    def billing_unit(self, billing_unit):
        """Sets the billing_unit of this TranslationPriceListCreateDto.

        Default: Word  # noqa: E501

        :param billing_unit: The billing_unit of this TranslationPriceListCreateDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Word", "Page", "Character", "Hour"]  # noqa: E501
        if billing_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `billing_unit` ({0}), must be one of {1}"  # noqa: E501
                .format(billing_unit, allowed_values)
            )

        self._billing_unit = billing_unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TranslationPriceListCreateDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TranslationPriceListCreateDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
