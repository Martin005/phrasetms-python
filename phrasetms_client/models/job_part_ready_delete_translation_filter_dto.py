# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class JobPartReadyDeleteTranslationFilterDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "filename": "str",
        "statuses": "list[str]",
        "target_lang": "str",
        "provider": "ProviderReference",
        "owner": "UidReference",
        "date_due": "datetime",
        "due_in_hours": "int",
        "overdue": "bool",
    }

    attribute_map = {
        "filename": "filename",
        "statuses": "statuses",
        "target_lang": "targetLang",
        "provider": "provider",
        "owner": "owner",
        "date_due": "dateDue",
        "due_in_hours": "dueInHours",
        "overdue": "overdue",
    }

    def __init__(
        self,
        filename=None,
        statuses=None,
        target_lang=None,
        provider=None,
        owner=None,
        date_due=None,
        due_in_hours=None,
        overdue=None,
    ):  # noqa: E501
        """JobPartReadyDeleteTranslationFilterDto - a model defined in Swagger"""  # noqa: E501
        self._filename = None
        self._statuses = None
        self._target_lang = None
        self._provider = None
        self._owner = None
        self._date_due = None
        self._due_in_hours = None
        self._overdue = None
        self.discriminator = None
        if filename is not None:
            self.filename = filename
        if statuses is not None:
            self.statuses = statuses
        if target_lang is not None:
            self.target_lang = target_lang
        if provider is not None:
            self.provider = provider
        if owner is not None:
            self.owner = owner
        if date_due is not None:
            self.date_due = date_due
        if due_in_hours is not None:
            self.due_in_hours = due_in_hours
        if overdue is not None:
            self.overdue = overdue

    @property
    def filename(self) -> str:
        """Gets the filename of this JobPartReadyDeleteTranslationFilterDto.  # noqa: E501


        :return: The filename of this JobPartReadyDeleteTranslationFilterDto.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this JobPartReadyDeleteTranslationFilterDto.


        :param filename: The filename of this JobPartReadyDeleteTranslationFilterDto.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def statuses(self) -> list[str]:
        """Gets the statuses of this JobPartReadyDeleteTranslationFilterDto.  # noqa: E501


        :return: The statuses of this JobPartReadyDeleteTranslationFilterDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this JobPartReadyDeleteTranslationFilterDto.


        :param statuses: The statuses of this JobPartReadyDeleteTranslationFilterDto.  # noqa: E501
        :type: list[str]
        """

        self._statuses = statuses

    @property
    def target_lang(self) -> str:
        """Gets the target_lang of this JobPartReadyDeleteTranslationFilterDto.  # noqa: E501


        :return: The target_lang of this JobPartReadyDeleteTranslationFilterDto.  # noqa: E501
        :rtype: str
        """
        return self._target_lang

    @target_lang.setter
    def target_lang(self, target_lang):
        """Sets the target_lang of this JobPartReadyDeleteTranslationFilterDto.


        :param target_lang: The target_lang of this JobPartReadyDeleteTranslationFilterDto.  # noqa: E501
        :type: str
        """

        self._target_lang = target_lang

    @property
    def provider(self) -> ProviderReference:
        """Gets the provider of this JobPartReadyDeleteTranslationFilterDto.  # noqa: E501


        :return: The provider of this JobPartReadyDeleteTranslationFilterDto.  # noqa: E501
        :rtype: ProviderReference
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this JobPartReadyDeleteTranslationFilterDto.


        :param provider: The provider of this JobPartReadyDeleteTranslationFilterDto.  # noqa: E501
        :type: ProviderReference
        """

        self._provider = provider

    @property
    def owner(self) -> UidReference:
        """Gets the owner of this JobPartReadyDeleteTranslationFilterDto.  # noqa: E501


        :return: The owner of this JobPartReadyDeleteTranslationFilterDto.  # noqa: E501
        :rtype: UidReference
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this JobPartReadyDeleteTranslationFilterDto.


        :param owner: The owner of this JobPartReadyDeleteTranslationFilterDto.  # noqa: E501
        :type: UidReference
        """

        self._owner = owner

    @property
    def date_due(self) -> datetime:
        """Gets the date_due of this JobPartReadyDeleteTranslationFilterDto.  # noqa: E501


        :return: The date_due of this JobPartReadyDeleteTranslationFilterDto.  # noqa: E501
        :rtype: datetime
        """
        return self._date_due

    @date_due.setter
    def date_due(self, date_due):
        """Sets the date_due of this JobPartReadyDeleteTranslationFilterDto.


        :param date_due: The date_due of this JobPartReadyDeleteTranslationFilterDto.  # noqa: E501
        :type: datetime
        """

        self._date_due = date_due

    @property
    def due_in_hours(self) -> int:
        """Gets the due_in_hours of this JobPartReadyDeleteTranslationFilterDto.  # noqa: E501


        :return: The due_in_hours of this JobPartReadyDeleteTranslationFilterDto.  # noqa: E501
        :rtype: int
        """
        return self._due_in_hours

    @due_in_hours.setter
    def due_in_hours(self, due_in_hours):
        """Sets the due_in_hours of this JobPartReadyDeleteTranslationFilterDto.


        :param due_in_hours: The due_in_hours of this JobPartReadyDeleteTranslationFilterDto.  # noqa: E501
        :type: int
        """

        self._due_in_hours = due_in_hours

    @property
    def overdue(self) -> bool:
        """Gets the overdue of this JobPartReadyDeleteTranslationFilterDto.  # noqa: E501


        :return: The overdue of this JobPartReadyDeleteTranslationFilterDto.  # noqa: E501
        :rtype: bool
        """
        return self._overdue

    @overdue.setter
    def overdue(self, overdue):
        """Sets the overdue of this JobPartReadyDeleteTranslationFilterDto.


        :param overdue: The overdue of this JobPartReadyDeleteTranslationFilterDto.  # noqa: E501
        :type: bool
        """

        self._overdue = overdue

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(JobPartReadyDeleteTranslationFilterDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobPartReadyDeleteTranslationFilterDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
