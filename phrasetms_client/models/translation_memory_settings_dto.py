# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TranslationMemorySettingsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "use_translation_memory": "bool",
        "translation_memory_threshold": "float",
        "confirm100_percent_matches": "bool",
        "confirm101_percent_matches": "bool",
        "lock100_percent_matches": "bool",
        "lock101_percent_matches": "bool",
    }

    attribute_map = {
        "use_translation_memory": "useTranslationMemory",
        "translation_memory_threshold": "translationMemoryThreshold",
        "confirm100_percent_matches": "confirm100PercentMatches",
        "confirm101_percent_matches": "confirm101PercentMatches",
        "lock100_percent_matches": "lock100PercentMatches",
        "lock101_percent_matches": "lock101PercentMatches",
    }

    def __init__(
        self,
        use_translation_memory=None,
        translation_memory_threshold=None,
        confirm100_percent_matches=None,
        confirm101_percent_matches=None,
        lock100_percent_matches=None,
        lock101_percent_matches=None,
    ):  # noqa: E501
        """TranslationMemorySettingsDto - a model defined in Swagger"""  # noqa: E501
        self._use_translation_memory = None
        self._translation_memory_threshold = None
        self._confirm100_percent_matches = None
        self._confirm101_percent_matches = None
        self._lock100_percent_matches = None
        self._lock101_percent_matches = None
        self.discriminator = None
        if use_translation_memory is not None:
            self.use_translation_memory = use_translation_memory
        if translation_memory_threshold is not None:
            self.translation_memory_threshold = translation_memory_threshold
        if confirm100_percent_matches is not None:
            self.confirm100_percent_matches = confirm100_percent_matches
        if confirm101_percent_matches is not None:
            self.confirm101_percent_matches = confirm101_percent_matches
        if lock100_percent_matches is not None:
            self.lock100_percent_matches = lock100_percent_matches
        if lock101_percent_matches is not None:
            self.lock101_percent_matches = lock101_percent_matches

    @property
    def use_translation_memory(self) -> bool:
        """Gets the use_translation_memory of this TranslationMemorySettingsDto.  # noqa: E501

        Pre-translate from translation memory. Default: false  # noqa: E501

        :return: The use_translation_memory of this TranslationMemorySettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._use_translation_memory

    @use_translation_memory.setter
    def use_translation_memory(self, use_translation_memory):
        """Sets the use_translation_memory of this TranslationMemorySettingsDto.

        Pre-translate from translation memory. Default: false  # noqa: E501

        :param use_translation_memory: The use_translation_memory of this TranslationMemorySettingsDto.  # noqa: E501
        :type: bool
        """

        self._use_translation_memory = use_translation_memory

    @property
    def translation_memory_threshold(self) -> float:
        """Gets the translation_memory_threshold of this TranslationMemorySettingsDto.  # noqa: E501

        Pre-translation threshold percent  # noqa: E501

        :return: The translation_memory_threshold of this TranslationMemorySettingsDto.  # noqa: E501
        :rtype: float
        """
        return self._translation_memory_threshold

    @translation_memory_threshold.setter
    def translation_memory_threshold(self, translation_memory_threshold):
        """Sets the translation_memory_threshold of this TranslationMemorySettingsDto.

        Pre-translation threshold percent  # noqa: E501

        :param translation_memory_threshold: The translation_memory_threshold of this TranslationMemorySettingsDto.  # noqa: E501
        :type: float
        """

        self._translation_memory_threshold = translation_memory_threshold

    @property
    def confirm100_percent_matches(self) -> bool:
        """Gets the confirm100_percent_matches of this TranslationMemorySettingsDto.  # noqa: E501

        Set segment status to confirmed for: 100% translation memory matches. Default: false  # noqa: E501

        :return: The confirm100_percent_matches of this TranslationMemorySettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._confirm100_percent_matches

    @confirm100_percent_matches.setter
    def confirm100_percent_matches(self, confirm100_percent_matches):
        """Sets the confirm100_percent_matches of this TranslationMemorySettingsDto.

        Set segment status to confirmed for: 100% translation memory matches. Default: false  # noqa: E501

        :param confirm100_percent_matches: The confirm100_percent_matches of this TranslationMemorySettingsDto.  # noqa: E501
        :type: bool
        """

        self._confirm100_percent_matches = confirm100_percent_matches

    @property
    def confirm101_percent_matches(self) -> bool:
        """Gets the confirm101_percent_matches of this TranslationMemorySettingsDto.  # noqa: E501

        Set segment status to confirmed for: 101% translation memory matches. Default: false  # noqa: E501

        :return: The confirm101_percent_matches of this TranslationMemorySettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._confirm101_percent_matches

    @confirm101_percent_matches.setter
    def confirm101_percent_matches(self, confirm101_percent_matches):
        """Sets the confirm101_percent_matches of this TranslationMemorySettingsDto.

        Set segment status to confirmed for: 101% translation memory matches. Default: false  # noqa: E501

        :param confirm101_percent_matches: The confirm101_percent_matches of this TranslationMemorySettingsDto.  # noqa: E501
        :type: bool
        """

        self._confirm101_percent_matches = confirm101_percent_matches

    @property
    def lock100_percent_matches(self) -> bool:
        """Gets the lock100_percent_matches of this TranslationMemorySettingsDto.  # noqa: E501

        Lock section: 100% translation memory matches. Default: false  # noqa: E501

        :return: The lock100_percent_matches of this TranslationMemorySettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._lock100_percent_matches

    @lock100_percent_matches.setter
    def lock100_percent_matches(self, lock100_percent_matches):
        """Sets the lock100_percent_matches of this TranslationMemorySettingsDto.

        Lock section: 100% translation memory matches. Default: false  # noqa: E501

        :param lock100_percent_matches: The lock100_percent_matches of this TranslationMemorySettingsDto.  # noqa: E501
        :type: bool
        """

        self._lock100_percent_matches = lock100_percent_matches

    @property
    def lock101_percent_matches(self) -> bool:
        """Gets the lock101_percent_matches of this TranslationMemorySettingsDto.  # noqa: E501

        Lock section: 101% translation memory matches. Default: false  # noqa: E501

        :return: The lock101_percent_matches of this TranslationMemorySettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._lock101_percent_matches

    @lock101_percent_matches.setter
    def lock101_percent_matches(self, lock101_percent_matches):
        """Sets the lock101_percent_matches of this TranslationMemorySettingsDto.

        Lock section: 101% translation memory matches. Default: false  # noqa: E501

        :param lock101_percent_matches: The lock101_percent_matches of this TranslationMemorySettingsDto.  # noqa: E501
        :type: bool
        """

        self._lock101_percent_matches = lock101_percent_matches

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(TranslationMemorySettingsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TranslationMemorySettingsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
