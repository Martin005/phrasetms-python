# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LoginResponseV3Dto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user': 'UserReference',
        'token': 'str',
        'expires': 'datetime',
        'last_invalidate_all_sessions_performed': 'datetime'
    }

    attribute_map = {
        'user': 'user',
        'token': 'token',
        'expires': 'expires',
        'last_invalidate_all_sessions_performed': 'lastInvalidateAllSessionsPerformed'
    }

    def __init__(self, user=None, token=None, expires=None, last_invalidate_all_sessions_performed=None):  # noqa: E501
        """LoginResponseV3Dto - a model defined in Swagger"""  # noqa: E501
        self._user = None
        self._token = None
        self._expires = None
        self._last_invalidate_all_sessions_performed = None
        self.discriminator = None
        if user is not None:
            self.user = user
        if token is not None:
            self.token = token
        if expires is not None:
            self.expires = expires
        if last_invalidate_all_sessions_performed is not None:
            self.last_invalidate_all_sessions_performed = last_invalidate_all_sessions_performed

    @property
    def user(self):
        """Gets the user of this LoginResponseV3Dto.  # noqa: E501


        :return: The user of this LoginResponseV3Dto.  # noqa: E501
        :rtype: UserReference
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this LoginResponseV3Dto.


        :param user: The user of this LoginResponseV3Dto.  # noqa: E501
        :type: UserReference
        """

        self._user = user

    @property
    def token(self):
        """Gets the token of this LoginResponseV3Dto.  # noqa: E501


        :return: The token of this LoginResponseV3Dto.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this LoginResponseV3Dto.


        :param token: The token of this LoginResponseV3Dto.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def expires(self):
        """Gets the expires of this LoginResponseV3Dto.  # noqa: E501


        :return: The expires of this LoginResponseV3Dto.  # noqa: E501
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this LoginResponseV3Dto.


        :param expires: The expires of this LoginResponseV3Dto.  # noqa: E501
        :type: datetime
        """

        self._expires = expires

    @property
    def last_invalidate_all_sessions_performed(self):
        """Gets the last_invalidate_all_sessions_performed of this LoginResponseV3Dto.  # noqa: E501


        :return: The last_invalidate_all_sessions_performed of this LoginResponseV3Dto.  # noqa: E501
        :rtype: datetime
        """
        return self._last_invalidate_all_sessions_performed

    @last_invalidate_all_sessions_performed.setter
    def last_invalidate_all_sessions_performed(self, last_invalidate_all_sessions_performed):
        """Sets the last_invalidate_all_sessions_performed of this LoginResponseV3Dto.


        :param last_invalidate_all_sessions_performed: The last_invalidate_all_sessions_performed of this LoginResponseV3Dto.  # noqa: E501
        :type: datetime
        """

        self._last_invalidate_all_sessions_performed = last_invalidate_all_sessions_performed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoginResponseV3Dto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoginResponseV3Dto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
