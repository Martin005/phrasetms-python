# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from phrasetms_client.models.abstract_connector_dto import (
    AbstractConnectorDto,
)  # noqa: F401,E501


class AdobeExperienceManager(AbstractConnectorDto):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "url_rewrite_find": "str",
        "url_rewrite_replace": "str",
        "host": "str",
    }
    if hasattr(AbstractConnectorDto, "swagger_types"):
        swagger_types.update(AbstractConnectorDto.swagger_types)

    attribute_map = {
        "url_rewrite_find": "urlRewriteFind",
        "url_rewrite_replace": "urlRewriteReplace",
        "host": "host",
    }
    if hasattr(AbstractConnectorDto, "attribute_map"):
        attribute_map.update(AbstractConnectorDto.attribute_map)

    def __init__(
        self,
        url_rewrite_find=None,
        url_rewrite_replace=None,
        host=None,
        *args,
        **kwargs
    ):  # noqa: E501
        """AdobeExperienceManager - a model defined in Swagger"""  # noqa: E501
        self._url_rewrite_find = None
        self._url_rewrite_replace = None
        self._host = None
        self.discriminator = None
        if url_rewrite_find is not None:
            self.url_rewrite_find = url_rewrite_find
        if url_rewrite_replace is not None:
            self.url_rewrite_replace = url_rewrite_replace
        self.host = host
        AbstractConnectorDto.__init__(self, *args, **kwargs)

    @property
    def url_rewrite_find(self) -> str:
        """Gets the url_rewrite_find of this AdobeExperienceManager.  # noqa: E501


        :return: The url_rewrite_find of this AdobeExperienceManager.  # noqa: E501
        :rtype: str
        """
        return self._url_rewrite_find

    @url_rewrite_find.setter
    def url_rewrite_find(self, url_rewrite_find):
        """Sets the url_rewrite_find of this AdobeExperienceManager.


        :param url_rewrite_find: The url_rewrite_find of this AdobeExperienceManager.  # noqa: E501
        :type: str
        """

        self._url_rewrite_find = url_rewrite_find

    @property
    def url_rewrite_replace(self) -> str:
        """Gets the url_rewrite_replace of this AdobeExperienceManager.  # noqa: E501


        :return: The url_rewrite_replace of this AdobeExperienceManager.  # noqa: E501
        :rtype: str
        """
        return self._url_rewrite_replace

    @url_rewrite_replace.setter
    def url_rewrite_replace(self, url_rewrite_replace):
        """Sets the url_rewrite_replace of this AdobeExperienceManager.


        :param url_rewrite_replace: The url_rewrite_replace of this AdobeExperienceManager.  # noqa: E501
        :type: str
        """

        self._url_rewrite_replace = url_rewrite_replace

    @property
    def host(self) -> str:
        """Gets the host of this AdobeExperienceManager.  # noqa: E501


        :return: The host of this AdobeExperienceManager.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this AdobeExperienceManager.


        :param host: The host of this AdobeExperienceManager.  # noqa: E501
        :type: str
        """
        if host is None:
            raise ValueError(
                "Invalid value for `host`, must not be `None`"
            )  # noqa: E501

        self._host = host

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(AdobeExperienceManager, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdobeExperienceManager):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
