# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from datetime import datetime

import six

from phrasetms_client.models import (
    ProviderReference,
    WorkflowStepReference,
    PriceListReference,
    NetRateSchemeReference,
    UserReference,
)


class QuoteDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "int",
        "uid": "str",
        "name": "str",
        "status": "str",
        "currency": "str",
        "billing_unit": "str",
        "created_by": "UserReference",
        "date_created": "datetime",
        "total_price": "float",
        "net_rate_scheme": "NetRateSchemeReference",
        "price_list": "PriceListReference",
        "workflow_step_list": "list[WorkflowStepReference]",
        "provider": "ProviderReference",
        "customer_email": "str",
        "quote_type": "str",
        "editable": "bool",
        "outdated": "bool",
    }

    attribute_map = {
        "id": "id",
        "uid": "uid",
        "name": "name",
        "status": "status",
        "currency": "currency",
        "billing_unit": "billingUnit",
        "created_by": "createdBy",
        "date_created": "dateCreated",
        "total_price": "totalPrice",
        "net_rate_scheme": "netRateScheme",
        "price_list": "priceList",
        "workflow_step_list": "workflowStepList",
        "provider": "provider",
        "customer_email": "customerEmail",
        "quote_type": "quoteType",
        "editable": "editable",
        "outdated": "outdated",
    }

    def __init__(
        self,
        id=None,
        uid=None,
        name=None,
        status=None,
        currency=None,
        billing_unit=None,
        created_by=None,
        date_created=None,
        total_price=None,
        net_rate_scheme=None,
        price_list=None,
        workflow_step_list=None,
        provider=None,
        customer_email=None,
        quote_type=None,
        editable=None,
        outdated=None,
    ):  # noqa: E501
        """QuoteDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._uid = None
        self._name = None
        self._status = None
        self._currency = None
        self._billing_unit = None
        self._created_by = None
        self._date_created = None
        self._total_price = None
        self._net_rate_scheme = None
        self._price_list = None
        self._workflow_step_list = None
        self._provider = None
        self._customer_email = None
        self._quote_type = None
        self._editable = None
        self._outdated = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if uid is not None:
            self.uid = uid
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status
        if currency is not None:
            self.currency = currency
        if billing_unit is not None:
            self.billing_unit = billing_unit
        if created_by is not None:
            self.created_by = created_by
        if date_created is not None:
            self.date_created = date_created
        if total_price is not None:
            self.total_price = total_price
        if net_rate_scheme is not None:
            self.net_rate_scheme = net_rate_scheme
        if price_list is not None:
            self.price_list = price_list
        if workflow_step_list is not None:
            self.workflow_step_list = workflow_step_list
        if provider is not None:
            self.provider = provider
        if customer_email is not None:
            self.customer_email = customer_email
        if quote_type is not None:
            self.quote_type = quote_type
        if editable is not None:
            self.editable = editable
        if outdated is not None:
            self.outdated = outdated

    @property
    def id(self) -> int:
        """Gets the id of this QuoteDto.  # noqa: E501


        :return: The id of this QuoteDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QuoteDto.


        :param id: The id of this QuoteDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uid(self) -> str:
        """Gets the uid of this QuoteDto.  # noqa: E501


        :return: The uid of this QuoteDto.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this QuoteDto.


        :param uid: The uid of this QuoteDto.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def name(self) -> str:
        """Gets the name of this QuoteDto.  # noqa: E501


        :return: The name of this QuoteDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this QuoteDto.


        :param name: The name of this QuoteDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self) -> str:
        """Gets the status of this QuoteDto.  # noqa: E501


        :return: The status of this QuoteDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this QuoteDto.


        :param status: The status of this QuoteDto.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "APPROVED",
            "DECLINED",
            "DRAFT",
            "FOR_APPROVAL",
            "NEW",
        ]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}".format(  # noqa: E501
                    status, allowed_values
                )
            )

        self._status = status

    @property
    def currency(self) -> str:
        """Gets the currency of this QuoteDto.  # noqa: E501


        :return: The currency of this QuoteDto.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this QuoteDto.


        :param currency: The currency of this QuoteDto.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def billing_unit(self) -> str:
        """Gets the billing_unit of this QuoteDto.  # noqa: E501


        :return: The billing_unit of this QuoteDto.  # noqa: E501
        :rtype: str
        """
        return self._billing_unit

    @billing_unit.setter
    def billing_unit(self, billing_unit):
        """Sets the billing_unit of this QuoteDto.


        :param billing_unit: The billing_unit of this QuoteDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Character", "Word", "Page", "Hour"]  # noqa: E501
        if billing_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `billing_unit` ({0}), must be one of {1}".format(  # noqa: E501
                    billing_unit, allowed_values
                )
            )

        self._billing_unit = billing_unit

    @property
    def created_by(self) -> UserReference:
        """Gets the created_by of this QuoteDto.  # noqa: E501


        :return: The created_by of this QuoteDto.  # noqa: E501
        :rtype: UserReference
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this QuoteDto.


        :param created_by: The created_by of this QuoteDto.  # noqa: E501
        :type: UserReference
        """

        self._created_by = created_by

    @property
    def date_created(self) -> datetime:
        """Gets the date_created of this QuoteDto.  # noqa: E501


        :return: The date_created of this QuoteDto.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this QuoteDto.


        :param date_created: The date_created of this QuoteDto.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def total_price(self) -> float:
        """Gets the total_price of this QuoteDto.  # noqa: E501


        :return: The total_price of this QuoteDto.  # noqa: E501
        :rtype: float
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this QuoteDto.


        :param total_price: The total_price of this QuoteDto.  # noqa: E501
        :type: float
        """

        self._total_price = total_price

    @property
    def net_rate_scheme(self) -> NetRateSchemeReference:
        """Gets the net_rate_scheme of this QuoteDto.  # noqa: E501


        :return: The net_rate_scheme of this QuoteDto.  # noqa: E501
        :rtype: NetRateSchemeReference
        """
        return self._net_rate_scheme

    @net_rate_scheme.setter
    def net_rate_scheme(self, net_rate_scheme):
        """Sets the net_rate_scheme of this QuoteDto.


        :param net_rate_scheme: The net_rate_scheme of this QuoteDto.  # noqa: E501
        :type: NetRateSchemeReference
        """

        self._net_rate_scheme = net_rate_scheme

    @property
    def price_list(self) -> PriceListReference:
        """Gets the price_list of this QuoteDto.  # noqa: E501


        :return: The price_list of this QuoteDto.  # noqa: E501
        :rtype: PriceListReference
        """
        return self._price_list

    @price_list.setter
    def price_list(self, price_list):
        """Sets the price_list of this QuoteDto.


        :param price_list: The price_list of this QuoteDto.  # noqa: E501
        :type: PriceListReference
        """

        self._price_list = price_list

    @property
    def workflow_step_list(self) -> list[WorkflowStepReference]:
        """Gets the workflow_step_list of this QuoteDto.  # noqa: E501


        :return: The workflow_step_list of this QuoteDto.  # noqa: E501
        :rtype: list[WorkflowStepReference]
        """
        return self._workflow_step_list

    @workflow_step_list.setter
    def workflow_step_list(self, workflow_step_list):
        """Sets the workflow_step_list of this QuoteDto.


        :param workflow_step_list: The workflow_step_list of this QuoteDto.  # noqa: E501
        :type: list[WorkflowStepReference]
        """

        self._workflow_step_list = workflow_step_list

    @property
    def provider(self) -> ProviderReference:
        """Gets the provider of this QuoteDto.  # noqa: E501


        :return: The provider of this QuoteDto.  # noqa: E501
        :rtype: ProviderReference
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this QuoteDto.


        :param provider: The provider of this QuoteDto.  # noqa: E501
        :type: ProviderReference
        """

        self._provider = provider

    @property
    def customer_email(self) -> str:
        """Gets the customer_email of this QuoteDto.  # noqa: E501


        :return: The customer_email of this QuoteDto.  # noqa: E501
        :rtype: str
        """
        return self._customer_email

    @customer_email.setter
    def customer_email(self, customer_email):
        """Sets the customer_email of this QuoteDto.


        :param customer_email: The customer_email of this QuoteDto.  # noqa: E501
        :type: str
        """

        self._customer_email = customer_email

    @property
    def quote_type(self) -> str:
        """Gets the quote_type of this QuoteDto.  # noqa: E501


        :return: The quote_type of this QuoteDto.  # noqa: E501
        :rtype: str
        """
        return self._quote_type

    @quote_type.setter
    def quote_type(self, quote_type):
        """Sets the quote_type of this QuoteDto.


        :param quote_type: The quote_type of this QuoteDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["BUYER", "PROVIDER"]  # noqa: E501
        if quote_type not in allowed_values:
            raise ValueError(
                "Invalid value for `quote_type` ({0}), must be one of {1}".format(  # noqa: E501
                    quote_type, allowed_values
                )
            )

        self._quote_type = quote_type

    @property
    def editable(self) -> bool:
        """Gets the editable of this QuoteDto.  # noqa: E501


        :return: The editable of this QuoteDto.  # noqa: E501
        :rtype: bool
        """
        return self._editable

    @editable.setter
    def editable(self, editable):
        """Sets the editable of this QuoteDto.


        :param editable: The editable of this QuoteDto.  # noqa: E501
        :type: bool
        """

        self._editable = editable

    @property
    def outdated(self) -> bool:
        """Gets the outdated of this QuoteDto.  # noqa: E501


        :return: The outdated of this QuoteDto.  # noqa: E501
        :rtype: bool
        """
        return self._outdated

    @outdated.setter
    def outdated(self, outdated):
        """Sets the outdated of this QuoteDto.


        :param outdated: The outdated of this QuoteDto.  # noqa: E501
        :type: bool
        """

        self._outdated = outdated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(QuoteDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuoteDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
