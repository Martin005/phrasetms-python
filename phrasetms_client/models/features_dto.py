# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FeaturesDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'icu_enabled': 'bool',
        'reject_jobs': 'bool',
        'qa_highlights_enabled': 'bool',
        'lqa_bulk_comments_creation': 'bool',
        'mt_for_tm_above100_enabled': 'bool'
    }

    attribute_map = {
        'icu_enabled': 'icuEnabled',
        'reject_jobs': 'rejectJobs',
        'qa_highlights_enabled': 'qaHighlightsEnabled',
        'lqa_bulk_comments_creation': 'lqaBulkCommentsCreation',
        'mt_for_tm_above100_enabled': 'mtForTMAbove100Enabled'
    }

    def __init__(self, icu_enabled=None, reject_jobs=None, qa_highlights_enabled=None, lqa_bulk_comments_creation=None, mt_for_tm_above100_enabled=None):  # noqa: E501
        """FeaturesDto - a model defined in Swagger"""  # noqa: E501
        self._icu_enabled = None
        self._reject_jobs = None
        self._qa_highlights_enabled = None
        self._lqa_bulk_comments_creation = None
        self._mt_for_tm_above100_enabled = None
        self.discriminator = None
        if icu_enabled is not None:
            self.icu_enabled = icu_enabled
        if reject_jobs is not None:
            self.reject_jobs = reject_jobs
        if qa_highlights_enabled is not None:
            self.qa_highlights_enabled = qa_highlights_enabled
        if lqa_bulk_comments_creation is not None:
            self.lqa_bulk_comments_creation = lqa_bulk_comments_creation
        if mt_for_tm_above100_enabled is not None:
            self.mt_for_tm_above100_enabled = mt_for_tm_above100_enabled

    @property
    def icu_enabled(self):
        """Gets the icu_enabled of this FeaturesDto.  # noqa: E501


        :return: The icu_enabled of this FeaturesDto.  # noqa: E501
        :rtype: bool
        """
        return self._icu_enabled

    @icu_enabled.setter
    def icu_enabled(self, icu_enabled):
        """Sets the icu_enabled of this FeaturesDto.


        :param icu_enabled: The icu_enabled of this FeaturesDto.  # noqa: E501
        :type: bool
        """

        self._icu_enabled = icu_enabled

    @property
    def reject_jobs(self):
        """Gets the reject_jobs of this FeaturesDto.  # noqa: E501


        :return: The reject_jobs of this FeaturesDto.  # noqa: E501
        :rtype: bool
        """
        return self._reject_jobs

    @reject_jobs.setter
    def reject_jobs(self, reject_jobs):
        """Sets the reject_jobs of this FeaturesDto.


        :param reject_jobs: The reject_jobs of this FeaturesDto.  # noqa: E501
        :type: bool
        """

        self._reject_jobs = reject_jobs

    @property
    def qa_highlights_enabled(self):
        """Gets the qa_highlights_enabled of this FeaturesDto.  # noqa: E501


        :return: The qa_highlights_enabled of this FeaturesDto.  # noqa: E501
        :rtype: bool
        """
        return self._qa_highlights_enabled

    @qa_highlights_enabled.setter
    def qa_highlights_enabled(self, qa_highlights_enabled):
        """Sets the qa_highlights_enabled of this FeaturesDto.


        :param qa_highlights_enabled: The qa_highlights_enabled of this FeaturesDto.  # noqa: E501
        :type: bool
        """

        self._qa_highlights_enabled = qa_highlights_enabled

    @property
    def lqa_bulk_comments_creation(self):
        """Gets the lqa_bulk_comments_creation of this FeaturesDto.  # noqa: E501


        :return: The lqa_bulk_comments_creation of this FeaturesDto.  # noqa: E501
        :rtype: bool
        """
        return self._lqa_bulk_comments_creation

    @lqa_bulk_comments_creation.setter
    def lqa_bulk_comments_creation(self, lqa_bulk_comments_creation):
        """Sets the lqa_bulk_comments_creation of this FeaturesDto.


        :param lqa_bulk_comments_creation: The lqa_bulk_comments_creation of this FeaturesDto.  # noqa: E501
        :type: bool
        """

        self._lqa_bulk_comments_creation = lqa_bulk_comments_creation

    @property
    def mt_for_tm_above100_enabled(self):
        """Gets the mt_for_tm_above100_enabled of this FeaturesDto.  # noqa: E501


        :return: The mt_for_tm_above100_enabled of this FeaturesDto.  # noqa: E501
        :rtype: bool
        """
        return self._mt_for_tm_above100_enabled

    @mt_for_tm_above100_enabled.setter
    def mt_for_tm_above100_enabled(self, mt_for_tm_above100_enabled):
        """Sets the mt_for_tm_above100_enabled of this FeaturesDto.


        :param mt_for_tm_above100_enabled: The mt_for_tm_above100_enabled of this FeaturesDto.  # noqa: E501
        :type: bool
        """

        self._mt_for_tm_above100_enabled = mt_for_tm_above100_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FeaturesDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeaturesDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
