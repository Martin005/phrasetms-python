# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, conint, validator
from phrasetms_client.models.id_reference import IdReference

class LQAReference(BaseModel):
    """
    LQAReference
    """
    error_category_id: conint(strict=True, ge=1) = Field(..., alias="errorCategoryId")
    severity_id: conint(strict=True, ge=1) = Field(..., alias="severityId")
    user: Optional[IdReference] = None
    repeated: Optional[StrictStr] = Field(None, description="Default: `NOT_REPEATED`")
    __properties = ["errorCategoryId", "severityId", "user", "repeated"]

    @validator('repeated')
    def repeated_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('REPEATED', 'NOT_REPEATED'):
            raise ValueError("must be one of enum values ('REPEATED', 'NOT_REPEATED')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LQAReference:
        """Create an instance of LQAReference from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LQAReference:
        """Create an instance of LQAReference from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LQAReference.parse_obj(obj)

        _obj = LQAReference.parse_obj({
            "error_category_id": obj.get("errorCategoryId"),
            "severity_id": obj.get("severityId"),
            "user": IdReference.from_dict(obj.get("user")) if obj.get("user") is not None else None,
            "repeated": obj.get("repeated")
        })
        return _obj

