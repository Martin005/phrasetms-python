# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConnectorErrorDetailDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'message': 'str',
        'message_code': 'str',
        'args': 'dict(str, object)',
        'skip_prefix': 'bool'
    }

    attribute_map = {
        'code': 'code',
        'message': 'message',
        'message_code': 'messageCode',
        'args': 'args',
        'skip_prefix': 'skipPrefix'
    }

    def __init__(self, code=None, message=None, message_code=None, args=None, skip_prefix=None):  # noqa: E501
        """ConnectorErrorDetailDto - a model defined in Swagger"""  # noqa: E501
        self._code = None
        self._message = None
        self._message_code = None
        self._args = None
        self._skip_prefix = None
        self.discriminator = None
        if code is not None:
            self.code = code
        if message is not None:
            self.message = message
        if message_code is not None:
            self.message_code = message_code
        if args is not None:
            self.args = args
        if skip_prefix is not None:
            self.skip_prefix = skip_prefix

    @property
    def code(self):
        """Gets the code of this ConnectorErrorDetailDto.  # noqa: E501


        :return: The code of this ConnectorErrorDetailDto.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ConnectorErrorDetailDto.


        :param code: The code of this ConnectorErrorDetailDto.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def message(self):
        """Gets the message of this ConnectorErrorDetailDto.  # noqa: E501


        :return: The message of this ConnectorErrorDetailDto.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ConnectorErrorDetailDto.


        :param message: The message of this ConnectorErrorDetailDto.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def message_code(self):
        """Gets the message_code of this ConnectorErrorDetailDto.  # noqa: E501


        :return: The message_code of this ConnectorErrorDetailDto.  # noqa: E501
        :rtype: str
        """
        return self._message_code

    @message_code.setter
    def message_code(self, message_code):
        """Sets the message_code of this ConnectorErrorDetailDto.


        :param message_code: The message_code of this ConnectorErrorDetailDto.  # noqa: E501
        :type: str
        """

        self._message_code = message_code

    @property
    def args(self):
        """Gets the args of this ConnectorErrorDetailDto.  # noqa: E501


        :return: The args of this ConnectorErrorDetailDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this ConnectorErrorDetailDto.


        :param args: The args of this ConnectorErrorDetailDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._args = args

    @property
    def skip_prefix(self):
        """Gets the skip_prefix of this ConnectorErrorDetailDto.  # noqa: E501


        :return: The skip_prefix of this ConnectorErrorDetailDto.  # noqa: E501
        :rtype: bool
        """
        return self._skip_prefix

    @skip_prefix.setter
    def skip_prefix(self, skip_prefix):
        """Sets the skip_prefix of this ConnectorErrorDetailDto.


        :param skip_prefix: The skip_prefix of this ConnectorErrorDetailDto.  # noqa: E501
        :type: bool
        """

        self._skip_prefix = skip_prefix

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectorErrorDetailDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectorErrorDetailDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
