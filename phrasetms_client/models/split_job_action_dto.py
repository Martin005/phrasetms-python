# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, conlist

class SplitJobActionDto(BaseModel):
    """
    SplitJobActionDto
    """
    segment_ordinals: Optional[conlist(StrictInt, max_items=2147483647, min_items=1)] = Field(None, alias="segmentOrdinals")
    part_count: Optional[StrictInt] = Field(None, alias="partCount")
    part_size: Optional[StrictInt] = Field(None, alias="partSize")
    word_count: Optional[StrictInt] = Field(None, alias="wordCount")
    by_document_part: Optional[StrictBool] = Field(None, alias="byDocumentPart", description="Can be used only for PowerPoint files")
    __properties = ["segmentOrdinals", "partCount", "partSize", "wordCount", "byDocumentPart"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SplitJobActionDto:
        """Create an instance of SplitJobActionDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SplitJobActionDto:
        """Create an instance of SplitJobActionDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SplitJobActionDto.parse_obj(obj)

        _obj = SplitJobActionDto.parse_obj({
            "segment_ordinals": obj.get("segmentOrdinals"),
            "part_count": obj.get("partCount"),
            "part_size": obj.get("partSize"),
            "word_count": obj.get("wordCount"),
            "by_document_part": obj.get("byDocumentPart")
        })
        return _obj

