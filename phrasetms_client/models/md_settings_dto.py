# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class MdSettingsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "hard_line_breaks_segments": "bool",
        "preserve_white_spaces": "bool",
        "tag_regexp": "str",
        "custom_elements": "str",
        "ignored_block_prefixes": "str",
        "flavor": "str",
        "process_jekyll_front_matter": "bool",
        "extract_code_blocks": "bool",
        "not_escaped_characters": "str",
        "exclude_code_elements": "bool",
    }

    attribute_map = {
        "hard_line_breaks_segments": "hardLineBreaksSegments",
        "preserve_white_spaces": "preserveWhiteSpaces",
        "tag_regexp": "tagRegexp",
        "custom_elements": "customElements",
        "ignored_block_prefixes": "ignoredBlockPrefixes",
        "flavor": "flavor",
        "process_jekyll_front_matter": "processJekyllFrontMatter",
        "extract_code_blocks": "extractCodeBlocks",
        "not_escaped_characters": "notEscapedCharacters",
        "exclude_code_elements": "excludeCodeElements",
    }

    def __init__(
        self,
        hard_line_breaks_segments=None,
        preserve_white_spaces=None,
        tag_regexp=None,
        custom_elements=None,
        ignored_block_prefixes=None,
        flavor=None,
        process_jekyll_front_matter=None,
        extract_code_blocks=None,
        not_escaped_characters=None,
        exclude_code_elements=None,
    ):  # noqa: E501
        """MdSettingsDto - a model defined in Swagger"""  # noqa: E501
        self._hard_line_breaks_segments = None
        self._preserve_white_spaces = None
        self._tag_regexp = None
        self._custom_elements = None
        self._ignored_block_prefixes = None
        self._flavor = None
        self._process_jekyll_front_matter = None
        self._extract_code_blocks = None
        self._not_escaped_characters = None
        self._exclude_code_elements = None
        self.discriminator = None
        if hard_line_breaks_segments is not None:
            self.hard_line_breaks_segments = hard_line_breaks_segments
        if preserve_white_spaces is not None:
            self.preserve_white_spaces = preserve_white_spaces
        if tag_regexp is not None:
            self.tag_regexp = tag_regexp
        if custom_elements is not None:
            self.custom_elements = custom_elements
        if ignored_block_prefixes is not None:
            self.ignored_block_prefixes = ignored_block_prefixes
        if flavor is not None:
            self.flavor = flavor
        if process_jekyll_front_matter is not None:
            self.process_jekyll_front_matter = process_jekyll_front_matter
        if extract_code_blocks is not None:
            self.extract_code_blocks = extract_code_blocks
        if not_escaped_characters is not None:
            self.not_escaped_characters = not_escaped_characters
        if exclude_code_elements is not None:
            self.exclude_code_elements = exclude_code_elements

    @property
    def hard_line_breaks_segments(self) -> bool:
        """Gets the hard_line_breaks_segments of this MdSettingsDto.  # noqa: E501

        Default: true  # noqa: E501

        :return: The hard_line_breaks_segments of this MdSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._hard_line_breaks_segments

    @hard_line_breaks_segments.setter
    def hard_line_breaks_segments(self, hard_line_breaks_segments):
        """Sets the hard_line_breaks_segments of this MdSettingsDto.

        Default: true  # noqa: E501

        :param hard_line_breaks_segments: The hard_line_breaks_segments of this MdSettingsDto.  # noqa: E501
        :type: bool
        """

        self._hard_line_breaks_segments = hard_line_breaks_segments

    @property
    def preserve_white_spaces(self) -> bool:
        """Gets the preserve_white_spaces of this MdSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The preserve_white_spaces of this MdSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._preserve_white_spaces

    @preserve_white_spaces.setter
    def preserve_white_spaces(self, preserve_white_spaces):
        """Sets the preserve_white_spaces of this MdSettingsDto.

        Default: false  # noqa: E501

        :param preserve_white_spaces: The preserve_white_spaces of this MdSettingsDto.  # noqa: E501
        :type: bool
        """

        self._preserve_white_spaces = preserve_white_spaces

    @property
    def tag_regexp(self) -> str:
        """Gets the tag_regexp of this MdSettingsDto.  # noqa: E501


        :return: The tag_regexp of this MdSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._tag_regexp

    @tag_regexp.setter
    def tag_regexp(self, tag_regexp):
        """Sets the tag_regexp of this MdSettingsDto.


        :param tag_regexp: The tag_regexp of this MdSettingsDto.  # noqa: E501
        :type: str
        """

        self._tag_regexp = tag_regexp

    @property
    def custom_elements(self) -> str:
        """Gets the custom_elements of this MdSettingsDto.  # noqa: E501


        :return: The custom_elements of this MdSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._custom_elements

    @custom_elements.setter
    def custom_elements(self, custom_elements):
        """Sets the custom_elements of this MdSettingsDto.


        :param custom_elements: The custom_elements of this MdSettingsDto.  # noqa: E501
        :type: str
        """

        self._custom_elements = custom_elements

    @property
    def ignored_block_prefixes(self) -> str:
        """Gets the ignored_block_prefixes of this MdSettingsDto.  # noqa: E501


        :return: The ignored_block_prefixes of this MdSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._ignored_block_prefixes

    @ignored_block_prefixes.setter
    def ignored_block_prefixes(self, ignored_block_prefixes):
        """Sets the ignored_block_prefixes of this MdSettingsDto.


        :param ignored_block_prefixes: The ignored_block_prefixes of this MdSettingsDto.  # noqa: E501
        :type: str
        """

        self._ignored_block_prefixes = ignored_block_prefixes

    @property
    def flavor(self) -> str:
        """Gets the flavor of this MdSettingsDto.  # noqa: E501

        Default: PLAIN  # noqa: E501

        :return: The flavor of this MdSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._flavor

    @flavor.setter
    def flavor(self, flavor):
        """Sets the flavor of this MdSettingsDto.

        Default: PLAIN  # noqa: E501

        :param flavor: The flavor of this MdSettingsDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["PLAIN", "PHP", "GITHUB"]  # noqa: E501
        if flavor not in allowed_values:
            raise ValueError(
                "Invalid value for `flavor` ({0}), must be one of {1}".format(  # noqa: E501
                    flavor, allowed_values
                )
            )

        self._flavor = flavor

    @property
    def process_jekyll_front_matter(self) -> bool:
        """Gets the process_jekyll_front_matter of this MdSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The process_jekyll_front_matter of this MdSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._process_jekyll_front_matter

    @process_jekyll_front_matter.setter
    def process_jekyll_front_matter(self, process_jekyll_front_matter):
        """Sets the process_jekyll_front_matter of this MdSettingsDto.

        Default: false  # noqa: E501

        :param process_jekyll_front_matter: The process_jekyll_front_matter of this MdSettingsDto.  # noqa: E501
        :type: bool
        """

        self._process_jekyll_front_matter = process_jekyll_front_matter

    @property
    def extract_code_blocks(self) -> bool:
        """Gets the extract_code_blocks of this MdSettingsDto.  # noqa: E501

        Default: true  # noqa: E501

        :return: The extract_code_blocks of this MdSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._extract_code_blocks

    @extract_code_blocks.setter
    def extract_code_blocks(self, extract_code_blocks):
        """Sets the extract_code_blocks of this MdSettingsDto.

        Default: true  # noqa: E501

        :param extract_code_blocks: The extract_code_blocks of this MdSettingsDto.  # noqa: E501
        :type: bool
        """

        self._extract_code_blocks = extract_code_blocks

    @property
    def not_escaped_characters(self) -> str:
        """Gets the not_escaped_characters of this MdSettingsDto.  # noqa: E501


        :return: The not_escaped_characters of this MdSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._not_escaped_characters

    @not_escaped_characters.setter
    def not_escaped_characters(self, not_escaped_characters):
        """Sets the not_escaped_characters of this MdSettingsDto.


        :param not_escaped_characters: The not_escaped_characters of this MdSettingsDto.  # noqa: E501
        :type: str
        """

        self._not_escaped_characters = not_escaped_characters

    @property
    def exclude_code_elements(self) -> bool:
        """Gets the exclude_code_elements of this MdSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The exclude_code_elements of this MdSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_code_elements

    @exclude_code_elements.setter
    def exclude_code_elements(self, exclude_code_elements):
        """Sets the exclude_code_elements of this MdSettingsDto.

        Default: false  # noqa: E501

        :param exclude_code_elements: The exclude_code_elements of this MdSettingsDto.  # noqa: E501
        :type: bool
        """

        self._exclude_code_elements = exclude_code_elements

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(MdSettingsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MdSettingsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
