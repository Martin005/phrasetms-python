# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from phrasetms_client.models.abstract_connector_dto import (
    AbstractConnectorDto,
)  # noqa: F401,E501


class Ftp(AbstractConnectorDto):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "user_name": "str",
        "password": "str",
        "host": "str",
        "port": "int",
        "encryption": "str",
    }
    if hasattr(AbstractConnectorDto, "swagger_types"):
        swagger_types.update(AbstractConnectorDto.swagger_types)

    attribute_map = {
        "user_name": "userName",
        "password": "password",
        "host": "host",
        "port": "port",
        "encryption": "encryption",
    }
    if hasattr(AbstractConnectorDto, "attribute_map"):
        attribute_map.update(AbstractConnectorDto.attribute_map)

    def __init__(
        self,
        user_name=None,
        password=None,
        host=None,
        port=None,
        encryption=None,
        *args,
        **kwargs
    ):  # noqa: E501
        """Ftp - a model defined in Swagger"""  # noqa: E501
        self._user_name = None
        self._password = None
        self._host = None
        self._port = None
        self._encryption = None
        self.discriminator = None
        self.user_name = user_name
        self.password = password
        self.host = host
        self.port = port
        if encryption is not None:
            self.encryption = encryption
        AbstractConnectorDto.__init__(self, *args, **kwargs)

    @property
    def user_name(self) -> str:
        """Gets the user_name of this Ftp.  # noqa: E501


        :return: The user_name of this Ftp.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this Ftp.


        :param user_name: The user_name of this Ftp.  # noqa: E501
        :type: str
        """
        if user_name is None:
            raise ValueError(
                "Invalid value for `user_name`, must not be `None`"
            )  # noqa: E501

        self._user_name = user_name

    @property
    def password(self) -> str:
        """Gets the password of this Ftp.  # noqa: E501


        :return: The password of this Ftp.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Ftp.


        :param password: The password of this Ftp.  # noqa: E501
        :type: str
        """
        if password is None:
            raise ValueError(
                "Invalid value for `password`, must not be `None`"
            )  # noqa: E501

        self._password = password

    @property
    def host(self) -> str:
        """Gets the host of this Ftp.  # noqa: E501


        :return: The host of this Ftp.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this Ftp.


        :param host: The host of this Ftp.  # noqa: E501
        :type: str
        """
        if host is None:
            raise ValueError(
                "Invalid value for `host`, must not be `None`"
            )  # noqa: E501

        self._host = host

    @property
    def port(self) -> int:
        """Gets the port of this Ftp.  # noqa: E501


        :return: The port of this Ftp.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this Ftp.


        :param port: The port of this Ftp.  # noqa: E501
        :type: int
        """
        if port is None:
            raise ValueError(
                "Invalid value for `port`, must not be `None`"
            )  # noqa: E501

        self._port = port

    @property
    def encryption(self) -> str:
        """Gets the encryption of this Ftp.  # noqa: E501

        Default TLS_IF_AVAILABLE  # noqa: E501

        :return: The encryption of this Ftp.  # noqa: E501
        :rtype: str
        """
        return self._encryption

    @encryption.setter
    def encryption(self, encryption):
        """Sets the encryption of this Ftp.

        Default TLS_IF_AVAILABLE  # noqa: E501

        :param encryption: The encryption of this Ftp.  # noqa: E501
        :type: str
        """

        self._encryption = encryption

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(Ftp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Ftp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
