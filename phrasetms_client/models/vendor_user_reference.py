# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class VendorUserReference(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "uid": "str",
        "vendor_uid": "str",
        "username": "str",
        "first_name": "str",
        "last_name": "str",
        "organization": "OrganizationReference",
    }

    attribute_map = {
        "uid": "uid",
        "vendor_uid": "vendorUid",
        "username": "username",
        "first_name": "firstName",
        "last_name": "lastName",
        "organization": "organization",
    }

    def __init__(
        self,
        uid=None,
        vendor_uid=None,
        username=None,
        first_name=None,
        last_name=None,
        organization=None,
    ):  # noqa: E501
        """VendorUserReference - a model defined in Swagger"""  # noqa: E501
        self._uid = None
        self._vendor_uid = None
        self._username = None
        self._first_name = None
        self._last_name = None
        self._organization = None
        self.discriminator = None
        if uid is not None:
            self.uid = uid
        if vendor_uid is not None:
            self.vendor_uid = vendor_uid
        if username is not None:
            self.username = username
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if organization is not None:
            self.organization = organization

    @property
    def uid(self) -> str:
        """Gets the uid of this VendorUserReference.  # noqa: E501


        :return: The uid of this VendorUserReference.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this VendorUserReference.


        :param uid: The uid of this VendorUserReference.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def vendor_uid(self) -> str:
        """Gets the vendor_uid of this VendorUserReference.  # noqa: E501


        :return: The vendor_uid of this VendorUserReference.  # noqa: E501
        :rtype: str
        """
        return self._vendor_uid

    @vendor_uid.setter
    def vendor_uid(self, vendor_uid):
        """Sets the vendor_uid of this VendorUserReference.


        :param vendor_uid: The vendor_uid of this VendorUserReference.  # noqa: E501
        :type: str
        """

        self._vendor_uid = vendor_uid

    @property
    def username(self) -> str:
        """Gets the username of this VendorUserReference.  # noqa: E501


        :return: The username of this VendorUserReference.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this VendorUserReference.


        :param username: The username of this VendorUserReference.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def first_name(self) -> str:
        """Gets the first_name of this VendorUserReference.  # noqa: E501


        :return: The first_name of this VendorUserReference.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this VendorUserReference.


        :param first_name: The first_name of this VendorUserReference.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self) -> str:
        """Gets the last_name of this VendorUserReference.  # noqa: E501


        :return: The last_name of this VendorUserReference.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this VendorUserReference.


        :param last_name: The last_name of this VendorUserReference.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def organization(self) -> OrganizationReference:
        """Gets the organization of this VendorUserReference.  # noqa: E501


        :return: The organization of this VendorUserReference.  # noqa: E501
        :rtype: OrganizationReference
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this VendorUserReference.


        :param organization: The organization of this VendorUserReference.  # noqa: E501
        :type: OrganizationReference
        """

        self._organization = organization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(VendorUserReference, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VendorUserReference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
