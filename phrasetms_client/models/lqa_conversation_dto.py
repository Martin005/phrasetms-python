# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LQAConversationDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'date_created': 'datetime',
        'date_modified': 'datetime',
        'date_edited': 'datetime',
        'created_by': 'MentionableUserDto',
        'comments': 'list[CommentDto]',
        'status': 'StatusDto',
        'deleted': 'bool',
        'references': 'LQAReferences',
        'lqa_description': 'str'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'date_created': 'dateCreated',
        'date_modified': 'dateModified',
        'date_edited': 'dateEdited',
        'created_by': 'createdBy',
        'comments': 'comments',
        'status': 'status',
        'deleted': 'deleted',
        'references': 'references',
        'lqa_description': 'lqaDescription'
    }

    def __init__(self, id=None, type=None, date_created=None, date_modified=None, date_edited=None, created_by=None, comments=None, status=None, deleted=None, references=None, lqa_description=None):  # noqa: E501
        """LQAConversationDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._type = None
        self._date_created = None
        self._date_modified = None
        self._date_edited = None
        self._created_by = None
        self._comments = None
        self._status = None
        self._deleted = None
        self._references = None
        self._lqa_description = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified
        if date_edited is not None:
            self.date_edited = date_edited
        if created_by is not None:
            self.created_by = created_by
        if comments is not None:
            self.comments = comments
        if status is not None:
            self.status = status
        if deleted is not None:
            self.deleted = deleted
        if references is not None:
            self.references = references
        if lqa_description is not None:
            self.lqa_description = lqa_description

    @property
    def id(self):
        """Gets the id of this LQAConversationDto.  # noqa: E501


        :return: The id of this LQAConversationDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LQAConversationDto.


        :param id: The id of this LQAConversationDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this LQAConversationDto.  # noqa: E501

        LQA  # noqa: E501

        :return: The type of this LQAConversationDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LQAConversationDto.

        LQA  # noqa: E501

        :param type: The type of this LQAConversationDto.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def date_created(self):
        """Gets the date_created of this LQAConversationDto.  # noqa: E501


        :return: The date_created of this LQAConversationDto.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this LQAConversationDto.


        :param date_created: The date_created of this LQAConversationDto.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this LQAConversationDto.  # noqa: E501


        :return: The date_modified of this LQAConversationDto.  # noqa: E501
        :rtype: datetime
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this LQAConversationDto.


        :param date_modified: The date_modified of this LQAConversationDto.  # noqa: E501
        :type: datetime
        """

        self._date_modified = date_modified

    @property
    def date_edited(self):
        """Gets the date_edited of this LQAConversationDto.  # noqa: E501


        :return: The date_edited of this LQAConversationDto.  # noqa: E501
        :rtype: datetime
        """
        return self._date_edited

    @date_edited.setter
    def date_edited(self, date_edited):
        """Sets the date_edited of this LQAConversationDto.


        :param date_edited: The date_edited of this LQAConversationDto.  # noqa: E501
        :type: datetime
        """

        self._date_edited = date_edited

    @property
    def created_by(self):
        """Gets the created_by of this LQAConversationDto.  # noqa: E501


        :return: The created_by of this LQAConversationDto.  # noqa: E501
        :rtype: MentionableUserDto
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this LQAConversationDto.


        :param created_by: The created_by of this LQAConversationDto.  # noqa: E501
        :type: MentionableUserDto
        """

        self._created_by = created_by

    @property
    def comments(self):
        """Gets the comments of this LQAConversationDto.  # noqa: E501


        :return: The comments of this LQAConversationDto.  # noqa: E501
        :rtype: list[CommentDto]
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this LQAConversationDto.


        :param comments: The comments of this LQAConversationDto.  # noqa: E501
        :type: list[CommentDto]
        """

        self._comments = comments

    @property
    def status(self):
        """Gets the status of this LQAConversationDto.  # noqa: E501


        :return: The status of this LQAConversationDto.  # noqa: E501
        :rtype: StatusDto
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LQAConversationDto.


        :param status: The status of this LQAConversationDto.  # noqa: E501
        :type: StatusDto
        """

        self._status = status

    @property
    def deleted(self):
        """Gets the deleted of this LQAConversationDto.  # noqa: E501


        :return: The deleted of this LQAConversationDto.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this LQAConversationDto.


        :param deleted: The deleted of this LQAConversationDto.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def references(self):
        """Gets the references of this LQAConversationDto.  # noqa: E501


        :return: The references of this LQAConversationDto.  # noqa: E501
        :rtype: LQAReferences
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this LQAConversationDto.


        :param references: The references of this LQAConversationDto.  # noqa: E501
        :type: LQAReferences
        """

        self._references = references

    @property
    def lqa_description(self):
        """Gets the lqa_description of this LQAConversationDto.  # noqa: E501


        :return: The lqa_description of this LQAConversationDto.  # noqa: E501
        :rtype: str
        """
        return self._lqa_description

    @lqa_description.setter
    def lqa_description(self, lqa_description):
        """Sets the lqa_description of this LQAConversationDto.


        :param lqa_description: The lqa_description of this LQAConversationDto.  # noqa: E501
        :type: str
        """

        self._lqa_description = lqa_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LQAConversationDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LQAConversationDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
