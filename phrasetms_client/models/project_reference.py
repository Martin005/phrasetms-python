# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from datetime import datetime

import six

from phrasetms_client.models import (
    MetadataReference,
    ProgressReference,
    VendorUserReference,
    UserReference,
    CostCenterReference,
    ClientReference,
    SubDomainReference,
    DomainReference,
    BusinessUnitReference,
)


class ProjectReference(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "uid": "str",
        "inner_id": "int",
        "name": "str",
        "business_unit": "BusinessUnitReference",
        "domain": "DomainReference",
        "sub_domain": "SubDomainReference",
        "client": "ClientReference",
        "cost_center": "CostCenterReference",
        "due_date": "datetime",
        "created_date": "datetime",
        "created_by": "UserReference",
        "owner": "UserReference",
        "vendor": "VendorUserReference",
        "purchase_order": "str",
        "source_lang": "str",
        "target_langs": "list[str]",
        "status": "str",
        "progress": "ProgressReference",
        "metadata": "list[MetadataReference]",
        "note": "str",
        "deleted": "bool",
        "archived": "bool",
    }

    attribute_map = {
        "uid": "uid",
        "inner_id": "innerId",
        "name": "name",
        "business_unit": "businessUnit",
        "domain": "domain",
        "sub_domain": "subDomain",
        "client": "client",
        "cost_center": "costCenter",
        "due_date": "dueDate",
        "created_date": "createdDate",
        "created_by": "createdBy",
        "owner": "owner",
        "vendor": "vendor",
        "purchase_order": "purchaseOrder",
        "source_lang": "sourceLang",
        "target_langs": "targetLangs",
        "status": "status",
        "progress": "progress",
        "metadata": "metadata",
        "note": "note",
        "deleted": "deleted",
        "archived": "archived",
    }

    def __init__(
        self,
        uid=None,
        inner_id=None,
        name=None,
        business_unit=None,
        domain=None,
        sub_domain=None,
        client=None,
        cost_center=None,
        due_date=None,
        created_date=None,
        created_by=None,
        owner=None,
        vendor=None,
        purchase_order=None,
        source_lang=None,
        target_langs=None,
        status=None,
        progress=None,
        metadata=None,
        note=None,
        deleted=None,
        archived=None,
    ):  # noqa: E501
        """ProjectReference - a model defined in Swagger"""  # noqa: E501
        self._uid = None
        self._inner_id = None
        self._name = None
        self._business_unit = None
        self._domain = None
        self._sub_domain = None
        self._client = None
        self._cost_center = None
        self._due_date = None
        self._created_date = None
        self._created_by = None
        self._owner = None
        self._vendor = None
        self._purchase_order = None
        self._source_lang = None
        self._target_langs = None
        self._status = None
        self._progress = None
        self._metadata = None
        self._note = None
        self._deleted = None
        self._archived = None
        self.discriminator = None
        if uid is not None:
            self.uid = uid
        if inner_id is not None:
            self.inner_id = inner_id
        if name is not None:
            self.name = name
        if business_unit is not None:
            self.business_unit = business_unit
        if domain is not None:
            self.domain = domain
        if sub_domain is not None:
            self.sub_domain = sub_domain
        if client is not None:
            self.client = client
        if cost_center is not None:
            self.cost_center = cost_center
        if due_date is not None:
            self.due_date = due_date
        if created_date is not None:
            self.created_date = created_date
        if created_by is not None:
            self.created_by = created_by
        if owner is not None:
            self.owner = owner
        if vendor is not None:
            self.vendor = vendor
        if purchase_order is not None:
            self.purchase_order = purchase_order
        if source_lang is not None:
            self.source_lang = source_lang
        if target_langs is not None:
            self.target_langs = target_langs
        if status is not None:
            self.status = status
        if progress is not None:
            self.progress = progress
        if metadata is not None:
            self.metadata = metadata
        if note is not None:
            self.note = note
        if deleted is not None:
            self.deleted = deleted
        if archived is not None:
            self.archived = archived

    @property
    def uid(self) -> str:
        """Gets the uid of this ProjectReference.  # noqa: E501


        :return: The uid of this ProjectReference.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this ProjectReference.


        :param uid: The uid of this ProjectReference.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def inner_id(self) -> int:
        """Gets the inner_id of this ProjectReference.  # noqa: E501


        :return: The inner_id of this ProjectReference.  # noqa: E501
        :rtype: int
        """
        return self._inner_id

    @inner_id.setter
    def inner_id(self, inner_id):
        """Sets the inner_id of this ProjectReference.


        :param inner_id: The inner_id of this ProjectReference.  # noqa: E501
        :type: int
        """

        self._inner_id = inner_id

    @property
    def name(self) -> str:
        """Gets the name of this ProjectReference.  # noqa: E501


        :return: The name of this ProjectReference.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectReference.


        :param name: The name of this ProjectReference.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def business_unit(self) -> BusinessUnitReference:
        """Gets the business_unit of this ProjectReference.  # noqa: E501


        :return: The business_unit of this ProjectReference.  # noqa: E501
        :rtype: BusinessUnitReference
        """
        return self._business_unit

    @business_unit.setter
    def business_unit(self, business_unit):
        """Sets the business_unit of this ProjectReference.


        :param business_unit: The business_unit of this ProjectReference.  # noqa: E501
        :type: BusinessUnitReference
        """

        self._business_unit = business_unit

    @property
    def domain(self) -> DomainReference:
        """Gets the domain of this ProjectReference.  # noqa: E501


        :return: The domain of this ProjectReference.  # noqa: E501
        :rtype: DomainReference
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ProjectReference.


        :param domain: The domain of this ProjectReference.  # noqa: E501
        :type: DomainReference
        """

        self._domain = domain

    @property
    def sub_domain(self) -> SubDomainReference:
        """Gets the sub_domain of this ProjectReference.  # noqa: E501


        :return: The sub_domain of this ProjectReference.  # noqa: E501
        :rtype: SubDomainReference
        """
        return self._sub_domain

    @sub_domain.setter
    def sub_domain(self, sub_domain):
        """Sets the sub_domain of this ProjectReference.


        :param sub_domain: The sub_domain of this ProjectReference.  # noqa: E501
        :type: SubDomainReference
        """

        self._sub_domain = sub_domain

    @property
    def client(self) -> ClientReference:
        """Gets the client of this ProjectReference.  # noqa: E501


        :return: The client of this ProjectReference.  # noqa: E501
        :rtype: ClientReference
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this ProjectReference.


        :param client: The client of this ProjectReference.  # noqa: E501
        :type: ClientReference
        """

        self._client = client

    @property
    def cost_center(self) -> CostCenterReference:
        """Gets the cost_center of this ProjectReference.  # noqa: E501


        :return: The cost_center of this ProjectReference.  # noqa: E501
        :rtype: CostCenterReference
        """
        return self._cost_center

    @cost_center.setter
    def cost_center(self, cost_center):
        """Sets the cost_center of this ProjectReference.


        :param cost_center: The cost_center of this ProjectReference.  # noqa: E501
        :type: CostCenterReference
        """

        self._cost_center = cost_center

    @property
    def due_date(self) -> datetime:
        """Gets the due_date of this ProjectReference.  # noqa: E501


        :return: The due_date of this ProjectReference.  # noqa: E501
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this ProjectReference.


        :param due_date: The due_date of this ProjectReference.  # noqa: E501
        :type: datetime
        """

        self._due_date = due_date

    @property
    def created_date(self) -> datetime:
        """Gets the created_date of this ProjectReference.  # noqa: E501


        :return: The created_date of this ProjectReference.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this ProjectReference.


        :param created_date: The created_date of this ProjectReference.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def created_by(self) -> UserReference:
        """Gets the created_by of this ProjectReference.  # noqa: E501


        :return: The created_by of this ProjectReference.  # noqa: E501
        :rtype: UserReference
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ProjectReference.


        :param created_by: The created_by of this ProjectReference.  # noqa: E501
        :type: UserReference
        """

        self._created_by = created_by

    @property
    def owner(self) -> UserReference:
        """Gets the owner of this ProjectReference.  # noqa: E501


        :return: The owner of this ProjectReference.  # noqa: E501
        :rtype: UserReference
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this ProjectReference.


        :param owner: The owner of this ProjectReference.  # noqa: E501
        :type: UserReference
        """

        self._owner = owner

    @property
    def vendor(self) -> VendorUserReference:
        """Gets the vendor of this ProjectReference.  # noqa: E501


        :return: The vendor of this ProjectReference.  # noqa: E501
        :rtype: VendorUserReference
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this ProjectReference.


        :param vendor: The vendor of this ProjectReference.  # noqa: E501
        :type: VendorUserReference
        """

        self._vendor = vendor

    @property
    def purchase_order(self) -> str:
        """Gets the purchase_order of this ProjectReference.  # noqa: E501


        :return: The purchase_order of this ProjectReference.  # noqa: E501
        :rtype: str
        """
        return self._purchase_order

    @purchase_order.setter
    def purchase_order(self, purchase_order):
        """Sets the purchase_order of this ProjectReference.


        :param purchase_order: The purchase_order of this ProjectReference.  # noqa: E501
        :type: str
        """

        self._purchase_order = purchase_order

    @property
    def source_lang(self) -> str:
        """Gets the source_lang of this ProjectReference.  # noqa: E501


        :return: The source_lang of this ProjectReference.  # noqa: E501
        :rtype: str
        """
        return self._source_lang

    @source_lang.setter
    def source_lang(self, source_lang):
        """Sets the source_lang of this ProjectReference.


        :param source_lang: The source_lang of this ProjectReference.  # noqa: E501
        :type: str
        """

        self._source_lang = source_lang

    @property
    def target_langs(self) -> list[str]:
        """Gets the target_langs of this ProjectReference.  # noqa: E501


        :return: The target_langs of this ProjectReference.  # noqa: E501
        :rtype: list[str]
        """
        return self._target_langs

    @target_langs.setter
    def target_langs(self, target_langs):
        """Sets the target_langs of this ProjectReference.


        :param target_langs: The target_langs of this ProjectReference.  # noqa: E501
        :type: list[str]
        """

        self._target_langs = target_langs

    @property
    def status(self) -> str:
        """Gets the status of this ProjectReference.  # noqa: E501


        :return: The status of this ProjectReference.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProjectReference.


        :param status: The status of this ProjectReference.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def progress(self) -> ProgressReference:
        """Gets the progress of this ProjectReference.  # noqa: E501


        :return: The progress of this ProjectReference.  # noqa: E501
        :rtype: ProgressReference
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this ProjectReference.


        :param progress: The progress of this ProjectReference.  # noqa: E501
        :type: ProgressReference
        """

        self._progress = progress

    @property
    def metadata(self) -> list[MetadataReference]:
        """Gets the metadata of this ProjectReference.  # noqa: E501


        :return: The metadata of this ProjectReference.  # noqa: E501
        :rtype: list[MetadataReference]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ProjectReference.


        :param metadata: The metadata of this ProjectReference.  # noqa: E501
        :type: list[MetadataReference]
        """

        self._metadata = metadata

    @property
    def note(self) -> str:
        """Gets the note of this ProjectReference.  # noqa: E501


        :return: The note of this ProjectReference.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this ProjectReference.


        :param note: The note of this ProjectReference.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def deleted(self) -> bool:
        """Gets the deleted of this ProjectReference.  # noqa: E501


        :return: The deleted of this ProjectReference.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this ProjectReference.


        :param deleted: The deleted of this ProjectReference.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def archived(self) -> bool:
        """Gets the archived of this ProjectReference.  # noqa: E501


        :return: The archived of this ProjectReference.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this ProjectReference.


        :param archived: The archived of this ProjectReference.  # noqa: E501
        :type: bool
        """

        self._archived = archived

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ProjectReference, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectReference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
