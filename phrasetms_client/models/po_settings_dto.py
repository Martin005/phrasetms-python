# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PoSettingsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "tag_regexp": "str",
        "export_multiline": "bool",
        "html_sub_filter": "bool",
        "segment": "bool",
        "markup_sub_filter_translatable": "str",
        "markup_sub_filter_non_translatable": "str",
        "save_confirmed_segments": "bool",
        "import_set_segment_confirmed_when": "str",
        "import_set_segment_locked_when": "str",
        "export_confirmed_locked": "str",
        "export_confirmed_not_locked": "str",
        "export_not_confirmed_locked": "str",
        "export_not_confirmed_not_locked": "str",
        "icu_sub_filter": "bool",
    }

    attribute_map = {
        "tag_regexp": "tagRegexp",
        "export_multiline": "exportMultiline",
        "html_sub_filter": "htmlSubFilter",
        "segment": "segment",
        "markup_sub_filter_translatable": "markupSubFilterTranslatable",
        "markup_sub_filter_non_translatable": "markupSubFilterNonTranslatable",
        "save_confirmed_segments": "saveConfirmedSegments",
        "import_set_segment_confirmed_when": "importSetSegmentConfirmedWhen",
        "import_set_segment_locked_when": "importSetSegmentLockedWhen",
        "export_confirmed_locked": "exportConfirmedLocked",
        "export_confirmed_not_locked": "exportConfirmedNotLocked",
        "export_not_confirmed_locked": "exportNotConfirmedLocked",
        "export_not_confirmed_not_locked": "exportNotConfirmedNotLocked",
        "icu_sub_filter": "icuSubFilter",
    }

    def __init__(
        self,
        tag_regexp=None,
        export_multiline=None,
        html_sub_filter=None,
        segment=None,
        markup_sub_filter_translatable=None,
        markup_sub_filter_non_translatable=None,
        save_confirmed_segments=None,
        import_set_segment_confirmed_when=None,
        import_set_segment_locked_when=None,
        export_confirmed_locked=None,
        export_confirmed_not_locked=None,
        export_not_confirmed_locked=None,
        export_not_confirmed_not_locked=None,
        icu_sub_filter=None,
    ):  # noqa: E501
        """PoSettingsDto - a model defined in Swagger"""  # noqa: E501
        self._tag_regexp = None
        self._export_multiline = None
        self._html_sub_filter = None
        self._segment = None
        self._markup_sub_filter_translatable = None
        self._markup_sub_filter_non_translatable = None
        self._save_confirmed_segments = None
        self._import_set_segment_confirmed_when = None
        self._import_set_segment_locked_when = None
        self._export_confirmed_locked = None
        self._export_confirmed_not_locked = None
        self._export_not_confirmed_locked = None
        self._export_not_confirmed_not_locked = None
        self._icu_sub_filter = None
        self.discriminator = None
        if tag_regexp is not None:
            self.tag_regexp = tag_regexp
        if export_multiline is not None:
            self.export_multiline = export_multiline
        if html_sub_filter is not None:
            self.html_sub_filter = html_sub_filter
        if segment is not None:
            self.segment = segment
        if markup_sub_filter_translatable is not None:
            self.markup_sub_filter_translatable = markup_sub_filter_translatable
        if markup_sub_filter_non_translatable is not None:
            self.markup_sub_filter_non_translatable = markup_sub_filter_non_translatable
        if save_confirmed_segments is not None:
            self.save_confirmed_segments = save_confirmed_segments
        if import_set_segment_confirmed_when is not None:
            self.import_set_segment_confirmed_when = import_set_segment_confirmed_when
        if import_set_segment_locked_when is not None:
            self.import_set_segment_locked_when = import_set_segment_locked_when
        if export_confirmed_locked is not None:
            self.export_confirmed_locked = export_confirmed_locked
        if export_confirmed_not_locked is not None:
            self.export_confirmed_not_locked = export_confirmed_not_locked
        if export_not_confirmed_locked is not None:
            self.export_not_confirmed_locked = export_not_confirmed_locked
        if export_not_confirmed_not_locked is not None:
            self.export_not_confirmed_not_locked = export_not_confirmed_not_locked
        if icu_sub_filter is not None:
            self.icu_sub_filter = icu_sub_filter

    @property
    def tag_regexp(self) -> str:
        """Gets the tag_regexp of this PoSettingsDto.  # noqa: E501


        :return: The tag_regexp of this PoSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._tag_regexp

    @tag_regexp.setter
    def tag_regexp(self, tag_regexp):
        """Sets the tag_regexp of this PoSettingsDto.


        :param tag_regexp: The tag_regexp of this PoSettingsDto.  # noqa: E501
        :type: str
        """

        self._tag_regexp = tag_regexp

    @property
    def export_multiline(self) -> bool:
        """Gets the export_multiline of this PoSettingsDto.  # noqa: E501

        Default: true  # noqa: E501

        :return: The export_multiline of this PoSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._export_multiline

    @export_multiline.setter
    def export_multiline(self, export_multiline):
        """Sets the export_multiline of this PoSettingsDto.

        Default: true  # noqa: E501

        :param export_multiline: The export_multiline of this PoSettingsDto.  # noqa: E501
        :type: bool
        """

        self._export_multiline = export_multiline

    @property
    def html_sub_filter(self) -> bool:
        """Gets the html_sub_filter of this PoSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The html_sub_filter of this PoSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._html_sub_filter

    @html_sub_filter.setter
    def html_sub_filter(self, html_sub_filter):
        """Sets the html_sub_filter of this PoSettingsDto.

        Default: false  # noqa: E501

        :param html_sub_filter: The html_sub_filter of this PoSettingsDto.  # noqa: E501
        :type: bool
        """

        self._html_sub_filter = html_sub_filter

    @property
    def segment(self) -> bool:
        """Gets the segment of this PoSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The segment of this PoSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._segment

    @segment.setter
    def segment(self, segment):
        """Sets the segment of this PoSettingsDto.

        Default: false  # noqa: E501

        :param segment: The segment of this PoSettingsDto.  # noqa: E501
        :type: bool
        """

        self._segment = segment

    @property
    def markup_sub_filter_translatable(self) -> str:
        """Gets the markup_sub_filter_translatable of this PoSettingsDto.  # noqa: E501


        :return: The markup_sub_filter_translatable of this PoSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._markup_sub_filter_translatable

    @markup_sub_filter_translatable.setter
    def markup_sub_filter_translatable(self, markup_sub_filter_translatable):
        """Sets the markup_sub_filter_translatable of this PoSettingsDto.


        :param markup_sub_filter_translatable: The markup_sub_filter_translatable of this PoSettingsDto.  # noqa: E501
        :type: str
        """

        self._markup_sub_filter_translatable = markup_sub_filter_translatable

    @property
    def markup_sub_filter_non_translatable(self) -> str:
        """Gets the markup_sub_filter_non_translatable of this PoSettingsDto.  # noqa: E501


        :return: The markup_sub_filter_non_translatable of this PoSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._markup_sub_filter_non_translatable

    @markup_sub_filter_non_translatable.setter
    def markup_sub_filter_non_translatable(self, markup_sub_filter_non_translatable):
        """Sets the markup_sub_filter_non_translatable of this PoSettingsDto.


        :param markup_sub_filter_non_translatable: The markup_sub_filter_non_translatable of this PoSettingsDto.  # noqa: E501
        :type: str
        """

        self._markup_sub_filter_non_translatable = markup_sub_filter_non_translatable

    @property
    def save_confirmed_segments(self) -> bool:
        """Gets the save_confirmed_segments of this PoSettingsDto.  # noqa: E501


        :return: The save_confirmed_segments of this PoSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._save_confirmed_segments

    @save_confirmed_segments.setter
    def save_confirmed_segments(self, save_confirmed_segments):
        """Sets the save_confirmed_segments of this PoSettingsDto.


        :param save_confirmed_segments: The save_confirmed_segments of this PoSettingsDto.  # noqa: E501
        :type: bool
        """

        self._save_confirmed_segments = save_confirmed_segments

    @property
    def import_set_segment_confirmed_when(self) -> str:
        """Gets the import_set_segment_confirmed_when of this PoSettingsDto.  # noqa: E501


        :return: The import_set_segment_confirmed_when of this PoSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._import_set_segment_confirmed_when

    @import_set_segment_confirmed_when.setter
    def import_set_segment_confirmed_when(self, import_set_segment_confirmed_when):
        """Sets the import_set_segment_confirmed_when of this PoSettingsDto.


        :param import_set_segment_confirmed_when: The import_set_segment_confirmed_when of this PoSettingsDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["FUZZY", "NONFUZZY"]  # noqa: E501
        if import_set_segment_confirmed_when not in allowed_values:
            raise ValueError(
                "Invalid value for `import_set_segment_confirmed_when` ({0}), must be one of {1}".format(  # noqa: E501
                    import_set_segment_confirmed_when, allowed_values
                )
            )

        self._import_set_segment_confirmed_when = import_set_segment_confirmed_when

    @property
    def import_set_segment_locked_when(self) -> str:
        """Gets the import_set_segment_locked_when of this PoSettingsDto.  # noqa: E501


        :return: The import_set_segment_locked_when of this PoSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._import_set_segment_locked_when

    @import_set_segment_locked_when.setter
    def import_set_segment_locked_when(self, import_set_segment_locked_when):
        """Sets the import_set_segment_locked_when of this PoSettingsDto.


        :param import_set_segment_locked_when: The import_set_segment_locked_when of this PoSettingsDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["FUZZY", "NONFUZZY"]  # noqa: E501
        if import_set_segment_locked_when not in allowed_values:
            raise ValueError(
                "Invalid value for `import_set_segment_locked_when` ({0}), must be one of {1}".format(  # noqa: E501
                    import_set_segment_locked_when, allowed_values
                )
            )

        self._import_set_segment_locked_when = import_set_segment_locked_when

    @property
    def export_confirmed_locked(self) -> str:
        """Gets the export_confirmed_locked of this PoSettingsDto.  # noqa: E501


        :return: The export_confirmed_locked of this PoSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._export_confirmed_locked

    @export_confirmed_locked.setter
    def export_confirmed_locked(self, export_confirmed_locked):
        """Sets the export_confirmed_locked of this PoSettingsDto.


        :param export_confirmed_locked: The export_confirmed_locked of this PoSettingsDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["FUZZY", "NONFUZZY"]  # noqa: E501
        if export_confirmed_locked not in allowed_values:
            raise ValueError(
                "Invalid value for `export_confirmed_locked` ({0}), must be one of {1}".format(  # noqa: E501
                    export_confirmed_locked, allowed_values
                )
            )

        self._export_confirmed_locked = export_confirmed_locked

    @property
    def export_confirmed_not_locked(self) -> str:
        """Gets the export_confirmed_not_locked of this PoSettingsDto.  # noqa: E501


        :return: The export_confirmed_not_locked of this PoSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._export_confirmed_not_locked

    @export_confirmed_not_locked.setter
    def export_confirmed_not_locked(self, export_confirmed_not_locked):
        """Sets the export_confirmed_not_locked of this PoSettingsDto.


        :param export_confirmed_not_locked: The export_confirmed_not_locked of this PoSettingsDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["FUZZY", "NONFUZZY"]  # noqa: E501
        if export_confirmed_not_locked not in allowed_values:
            raise ValueError(
                "Invalid value for `export_confirmed_not_locked` ({0}), must be one of {1}".format(  # noqa: E501
                    export_confirmed_not_locked, allowed_values
                )
            )

        self._export_confirmed_not_locked = export_confirmed_not_locked

    @property
    def export_not_confirmed_locked(self) -> str:
        """Gets the export_not_confirmed_locked of this PoSettingsDto.  # noqa: E501


        :return: The export_not_confirmed_locked of this PoSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._export_not_confirmed_locked

    @export_not_confirmed_locked.setter
    def export_not_confirmed_locked(self, export_not_confirmed_locked):
        """Sets the export_not_confirmed_locked of this PoSettingsDto.


        :param export_not_confirmed_locked: The export_not_confirmed_locked of this PoSettingsDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["FUZZY", "NONFUZZY"]  # noqa: E501
        if export_not_confirmed_locked not in allowed_values:
            raise ValueError(
                "Invalid value for `export_not_confirmed_locked` ({0}), must be one of {1}".format(  # noqa: E501
                    export_not_confirmed_locked, allowed_values
                )
            )

        self._export_not_confirmed_locked = export_not_confirmed_locked

    @property
    def export_not_confirmed_not_locked(self) -> str:
        """Gets the export_not_confirmed_not_locked of this PoSettingsDto.  # noqa: E501


        :return: The export_not_confirmed_not_locked of this PoSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._export_not_confirmed_not_locked

    @export_not_confirmed_not_locked.setter
    def export_not_confirmed_not_locked(self, export_not_confirmed_not_locked):
        """Sets the export_not_confirmed_not_locked of this PoSettingsDto.


        :param export_not_confirmed_not_locked: The export_not_confirmed_not_locked of this PoSettingsDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["FUZZY", "NONFUZZY"]  # noqa: E501
        if export_not_confirmed_not_locked not in allowed_values:
            raise ValueError(
                "Invalid value for `export_not_confirmed_not_locked` ({0}), must be one of {1}".format(  # noqa: E501
                    export_not_confirmed_not_locked, allowed_values
                )
            )

        self._export_not_confirmed_not_locked = export_not_confirmed_not_locked

    @property
    def icu_sub_filter(self) -> bool:
        """Gets the icu_sub_filter of this PoSettingsDto.  # noqa: E501

        Default: `false`  # noqa: E501

        :return: The icu_sub_filter of this PoSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._icu_sub_filter

    @icu_sub_filter.setter
    def icu_sub_filter(self, icu_sub_filter):
        """Sets the icu_sub_filter of this PoSettingsDto.

        Default: `false`  # noqa: E501

        :param icu_sub_filter: The icu_sub_filter of this PoSettingsDto.  # noqa: E501
        :type: bool
        """

        self._icu_sub_filter = icu_sub_filter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(PoSettingsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoSettingsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
