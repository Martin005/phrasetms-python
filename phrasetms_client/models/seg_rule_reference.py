# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SegRuleReference(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "uid": "str",
        "language": "str",
        "name": "str",
        "filename": "str",
        "primary": "bool",
    }

    attribute_map = {
        "id": "id",
        "uid": "uid",
        "language": "language",
        "name": "name",
        "filename": "filename",
        "primary": "primary",
    }

    def __init__(
        self, id=None, uid=None, language=None, name=None, filename=None, primary=None
    ):  # noqa: E501
        """SegRuleReference - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._uid = None
        self._language = None
        self._name = None
        self._filename = None
        self._primary = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if uid is not None:
            self.uid = uid
        if language is not None:
            self.language = language
        if name is not None:
            self.name = name
        if filename is not None:
            self.filename = filename
        if primary is not None:
            self.primary = primary

    @property
    def id(self) -> str:
        """Gets the id of this SegRuleReference.  # noqa: E501


        :return: The id of this SegRuleReference.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SegRuleReference.


        :param id: The id of this SegRuleReference.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def uid(self) -> str:
        """Gets the uid of this SegRuleReference.  # noqa: E501


        :return: The uid of this SegRuleReference.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this SegRuleReference.


        :param uid: The uid of this SegRuleReference.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def language(self) -> str:
        """Gets the language of this SegRuleReference.  # noqa: E501


        :return: The language of this SegRuleReference.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this SegRuleReference.


        :param language: The language of this SegRuleReference.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def name(self) -> str:
        """Gets the name of this SegRuleReference.  # noqa: E501


        :return: The name of this SegRuleReference.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SegRuleReference.


        :param name: The name of this SegRuleReference.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def filename(self) -> str:
        """Gets the filename of this SegRuleReference.  # noqa: E501


        :return: The filename of this SegRuleReference.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this SegRuleReference.


        :param filename: The filename of this SegRuleReference.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def primary(self) -> bool:
        """Gets the primary of this SegRuleReference.  # noqa: E501


        :return: The primary of this SegRuleReference.  # noqa: E501
        :rtype: bool
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this SegRuleReference.


        :param primary: The primary of this SegRuleReference.  # noqa: E501
        :type: bool
        """

        self._primary = primary

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(SegRuleReference, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SegRuleReference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
