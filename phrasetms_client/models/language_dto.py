# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class LanguageDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "code": "str",
        "name": "str",
        "rfc": "str",
        "android": "str",
        "android_bcp": "str",
    }

    attribute_map = {
        "code": "code",
        "name": "name",
        "rfc": "rfc",
        "android": "android",
        "android_bcp": "androidBcp",
    }

    def __init__(
        self, code=None, name=None, rfc=None, android=None, android_bcp=None
    ):  # noqa: E501
        """LanguageDto - a model defined in Swagger"""  # noqa: E501
        self._code = None
        self._name = None
        self._rfc = None
        self._android = None
        self._android_bcp = None
        self.discriminator = None
        if code is not None:
            self.code = code
        if name is not None:
            self.name = name
        if rfc is not None:
            self.rfc = rfc
        if android is not None:
            self.android = android
        if android_bcp is not None:
            self.android_bcp = android_bcp

    @property
    def code(self) -> str:
        """Gets the code of this LanguageDto.  # noqa: E501


        :return: The code of this LanguageDto.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this LanguageDto.


        :param code: The code of this LanguageDto.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def name(self) -> str:
        """Gets the name of this LanguageDto.  # noqa: E501


        :return: The name of this LanguageDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LanguageDto.


        :param name: The name of this LanguageDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def rfc(self) -> str:
        """Gets the rfc of this LanguageDto.  # noqa: E501


        :return: The rfc of this LanguageDto.  # noqa: E501
        :rtype: str
        """
        return self._rfc

    @rfc.setter
    def rfc(self, rfc):
        """Sets the rfc of this LanguageDto.


        :param rfc: The rfc of this LanguageDto.  # noqa: E501
        :type: str
        """

        self._rfc = rfc

    @property
    def android(self) -> str:
        """Gets the android of this LanguageDto.  # noqa: E501


        :return: The android of this LanguageDto.  # noqa: E501
        :rtype: str
        """
        return self._android

    @android.setter
    def android(self, android):
        """Sets the android of this LanguageDto.


        :param android: The android of this LanguageDto.  # noqa: E501
        :type: str
        """

        self._android = android

    @property
    def android_bcp(self) -> str:
        """Gets the android_bcp of this LanguageDto.  # noqa: E501


        :return: The android_bcp of this LanguageDto.  # noqa: E501
        :rtype: str
        """
        return self._android_bcp

    @android_bcp.setter
    def android_bcp(self, android_bcp):
        """Sets the android_bcp of this LanguageDto.


        :param android_bcp: The android_bcp of this LanguageDto.  # noqa: E501
        :type: str
        """

        self._android_bcp = android_bcp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(LanguageDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LanguageDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
