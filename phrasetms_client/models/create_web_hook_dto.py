# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CreateWebHookDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "name": "str",
        "url": "str",
        "events": "list[str]",
        "secret_token": "str",
        "hidden": "bool",
        "status": "str",
    }

    attribute_map = {
        "name": "name",
        "url": "url",
        "events": "events",
        "secret_token": "secretToken",
        "hidden": "hidden",
        "status": "status",
    }

    def __init__(
        self,
        name=None,
        url=None,
        events=None,
        secret_token=None,
        hidden=None,
        status=None,
    ):  # noqa: E501
        """CreateWebHookDto - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._url = None
        self._events = None
        self._secret_token = None
        self._hidden = None
        self._status = None
        self.discriminator = None
        if name is not None:
            self.name = name
        self.url = url
        self.events = events
        if secret_token is not None:
            self.secret_token = secret_token
        if hidden is not None:
            self.hidden = hidden
        if status is not None:
            self.status = status

    @property
    def name(self) -> str:
        """Gets the name of this CreateWebHookDto.  # noqa: E501


        :return: The name of this CreateWebHookDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateWebHookDto.


        :param name: The name of this CreateWebHookDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def url(self) -> str:
        """Gets the url of this CreateWebHookDto.  # noqa: E501


        :return: The url of this CreateWebHookDto.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CreateWebHookDto.


        :param url: The url of this CreateWebHookDto.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError(
                "Invalid value for `url`, must not be `None`"
            )  # noqa: E501

        self._url = url

    @property
    def events(self) -> list[str]:
        """Gets the events of this CreateWebHookDto.  # noqa: E501


        :return: The events of this CreateWebHookDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this CreateWebHookDto.


        :param events: The events of this CreateWebHookDto.  # noqa: E501
        :type: list[str]
        """
        if events is None:
            raise ValueError(
                "Invalid value for `events`, must not be `None`"
            )  # noqa: E501
        allowed_values = [
            "JOB_STATUS_CHANGED",
            "JOB_CREATED",
            "JOB_DELETED",
            "JOB_ASSIGNED",
            "JOB_DUE_DATE_CHANGED",
            "JOB_UPDATED",
            "JOB_TARGET_UPDATED",
            "JOB_EXPORTED",
            "JOB_UNEXPORTED",
            "PROJECT_CREATED",
            "PROJECT_DELETED",
            "PROJECT_STATUS_CHANGED",
            "PROJECT_DUE_DATE_CHANGED",
            "SHARED_PROJECT_ASSIGNED",
            "PROJECT_METADATA_UPDATED",
            "PRE_TRANSLATION_FINISHED",
            "ANALYSIS_CREATED",
            "CONTINUOUS_JOB_UPDATED",
            "PROJECT_TEMPLATE_CREATED",
            "PROJECT_TEMPLATE_UPDATED",
            "PROJECT_TEMPLATE_DELETED",
        ]  # noqa: E501
        if not set(events).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `events` [{0}], must be a subset of [{1}]".format(  # noqa: E501
                    ", ".join(
                        map(str, set(events) - set(allowed_values))
                    ),  # noqa: E501
                    ", ".join(map(str, allowed_values)),
                )
            )

        self._events = events

    @property
    def secret_token(self) -> str:
        """Gets the secret_token of this CreateWebHookDto.  # noqa: E501


        :return: The secret_token of this CreateWebHookDto.  # noqa: E501
        :rtype: str
        """
        return self._secret_token

    @secret_token.setter
    def secret_token(self, secret_token):
        """Sets the secret_token of this CreateWebHookDto.


        :param secret_token: The secret_token of this CreateWebHookDto.  # noqa: E501
        :type: str
        """

        self._secret_token = secret_token

    @property
    def hidden(self) -> bool:
        """Gets the hidden of this CreateWebHookDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The hidden of this CreateWebHookDto.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this CreateWebHookDto.

        Default: false  # noqa: E501

        :param hidden: The hidden of this CreateWebHookDto.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def status(self) -> str:
        """Gets the status of this CreateWebHookDto.  # noqa: E501

        Default: ENABLED  # noqa: E501

        :return: The status of this CreateWebHookDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateWebHookDto.

        Default: ENABLED  # noqa: E501

        :param status: The status of this CreateWebHookDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLED", "DISABLED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}".format(  # noqa: E501
                    status, allowed_values
                )
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(CreateWebHookDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateWebHookDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
