# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from phrasetms_client.models.abstract_analyse_settings_dto import AbstractAnalyseSettingsDto  # noqa: F401,E501

class PreAnalyse(AbstractAnalyseSettingsDto):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'include_fuzzy_repetitions': 'bool',
        'separate_fuzzy_repetitions': 'bool',
        'include_non_translatables': 'bool',
        'include_machine_translation_matches': 'bool'
    }
    if hasattr(AbstractAnalyseSettingsDto, "swagger_types"):
        swagger_types.update(AbstractAnalyseSettingsDto.swagger_types)

    attribute_map = {
        'include_fuzzy_repetitions': 'includeFuzzyRepetitions',
        'separate_fuzzy_repetitions': 'separateFuzzyRepetitions',
        'include_non_translatables': 'includeNonTranslatables',
        'include_machine_translation_matches': 'includeMachineTranslationMatches'
    }
    if hasattr(AbstractAnalyseSettingsDto, "attribute_map"):
        attribute_map.update(AbstractAnalyseSettingsDto.attribute_map)

    def __init__(self, include_fuzzy_repetitions=None, separate_fuzzy_repetitions=None, include_non_translatables=None, include_machine_translation_matches=None, *args, **kwargs):  # noqa: E501
        """PreAnalyse - a model defined in Swagger"""  # noqa: E501
        self._include_fuzzy_repetitions = None
        self._separate_fuzzy_repetitions = None
        self._include_non_translatables = None
        self._include_machine_translation_matches = None
        self.discriminator = None
        if include_fuzzy_repetitions is not None:
            self.include_fuzzy_repetitions = include_fuzzy_repetitions
        if separate_fuzzy_repetitions is not None:
            self.separate_fuzzy_repetitions = separate_fuzzy_repetitions
        if include_non_translatables is not None:
            self.include_non_translatables = include_non_translatables
        if include_machine_translation_matches is not None:
            self.include_machine_translation_matches = include_machine_translation_matches
        AbstractAnalyseSettingsDto.__init__(self, *args, **kwargs)

    @property
    def include_fuzzy_repetitions(self):
        """Gets the include_fuzzy_repetitions of this PreAnalyse.  # noqa: E501

        Default: false  # noqa: E501

        :return: The include_fuzzy_repetitions of this PreAnalyse.  # noqa: E501
        :rtype: bool
        """
        return self._include_fuzzy_repetitions

    @include_fuzzy_repetitions.setter
    def include_fuzzy_repetitions(self, include_fuzzy_repetitions):
        """Sets the include_fuzzy_repetitions of this PreAnalyse.

        Default: false  # noqa: E501

        :param include_fuzzy_repetitions: The include_fuzzy_repetitions of this PreAnalyse.  # noqa: E501
        :type: bool
        """

        self._include_fuzzy_repetitions = include_fuzzy_repetitions

    @property
    def separate_fuzzy_repetitions(self):
        """Gets the separate_fuzzy_repetitions of this PreAnalyse.  # noqa: E501

        Default: false  # noqa: E501

        :return: The separate_fuzzy_repetitions of this PreAnalyse.  # noqa: E501
        :rtype: bool
        """
        return self._separate_fuzzy_repetitions

    @separate_fuzzy_repetitions.setter
    def separate_fuzzy_repetitions(self, separate_fuzzy_repetitions):
        """Sets the separate_fuzzy_repetitions of this PreAnalyse.

        Default: false  # noqa: E501

        :param separate_fuzzy_repetitions: The separate_fuzzy_repetitions of this PreAnalyse.  # noqa: E501
        :type: bool
        """

        self._separate_fuzzy_repetitions = separate_fuzzy_repetitions

    @property
    def include_non_translatables(self):
        """Gets the include_non_translatables of this PreAnalyse.  # noqa: E501

        Default: false  # noqa: E501

        :return: The include_non_translatables of this PreAnalyse.  # noqa: E501
        :rtype: bool
        """
        return self._include_non_translatables

    @include_non_translatables.setter
    def include_non_translatables(self, include_non_translatables):
        """Sets the include_non_translatables of this PreAnalyse.

        Default: false  # noqa: E501

        :param include_non_translatables: The include_non_translatables of this PreAnalyse.  # noqa: E501
        :type: bool
        """

        self._include_non_translatables = include_non_translatables

    @property
    def include_machine_translation_matches(self):
        """Gets the include_machine_translation_matches of this PreAnalyse.  # noqa: E501

        Default: false  # noqa: E501

        :return: The include_machine_translation_matches of this PreAnalyse.  # noqa: E501
        :rtype: bool
        """
        return self._include_machine_translation_matches

    @include_machine_translation_matches.setter
    def include_machine_translation_matches(self, include_machine_translation_matches):
        """Sets the include_machine_translation_matches of this PreAnalyse.

        Default: false  # noqa: E501

        :param include_machine_translation_matches: The include_machine_translation_matches of this PreAnalyse.  # noqa: E501
        :type: bool
        """

        self._include_machine_translation_matches = include_machine_translation_matches

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PreAnalyse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PreAnalyse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
