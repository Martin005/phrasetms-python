# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from phrasetms_client.models import SubstituteDto


class PseudoTranslateActionDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "replacement": "str",
        "prefix": "str",
        "suffix": "str",
        "length": "float",
        "key_hash_prefix_len": "int",
        "substitution": "list[SubstituteDto]",
    }

    attribute_map = {
        "replacement": "replacement",
        "prefix": "prefix",
        "suffix": "suffix",
        "length": "length",
        "key_hash_prefix_len": "keyHashPrefixLen",
        "substitution": "substitution",
    }

    def __init__(
        self,
        replacement=None,
        prefix=None,
        suffix=None,
        length=None,
        key_hash_prefix_len=None,
        substitution=None,
    ):  # noqa: E501
        """PseudoTranslateActionDto - a model defined in Swagger"""  # noqa: E501
        self._replacement = None
        self._prefix = None
        self._suffix = None
        self._length = None
        self._key_hash_prefix_len = None
        self._substitution = None
        self.discriminator = None
        if replacement is not None:
            self.replacement = replacement
        if prefix is not None:
            self.prefix = prefix
        if suffix is not None:
            self.suffix = suffix
        if length is not None:
            self.length = length
        if key_hash_prefix_len is not None:
            self.key_hash_prefix_len = key_hash_prefix_len
        if substitution is not None:
            self.substitution = substitution

    @property
    def replacement(self) -> str:
        """Gets the replacement of this PseudoTranslateActionDto.  # noqa: E501


        :return: The replacement of this PseudoTranslateActionDto.  # noqa: E501
        :rtype: str
        """
        return self._replacement

    @replacement.setter
    def replacement(self, replacement):
        """Sets the replacement of this PseudoTranslateActionDto.


        :param replacement: The replacement of this PseudoTranslateActionDto.  # noqa: E501
        :type: str
        """

        self._replacement = replacement

    @property
    def prefix(self) -> str:
        """Gets the prefix of this PseudoTranslateActionDto.  # noqa: E501


        :return: The prefix of this PseudoTranslateActionDto.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this PseudoTranslateActionDto.


        :param prefix: The prefix of this PseudoTranslateActionDto.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def suffix(self) -> str:
        """Gets the suffix of this PseudoTranslateActionDto.  # noqa: E501


        :return: The suffix of this PseudoTranslateActionDto.  # noqa: E501
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this PseudoTranslateActionDto.


        :param suffix: The suffix of this PseudoTranslateActionDto.  # noqa: E501
        :type: str
        """

        self._suffix = suffix

    @property
    def length(self) -> float:
        """Gets the length of this PseudoTranslateActionDto.  # noqa: E501


        :return: The length of this PseudoTranslateActionDto.  # noqa: E501
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this PseudoTranslateActionDto.


        :param length: The length of this PseudoTranslateActionDto.  # noqa: E501
        :type: float
        """

        self._length = length

    @property
    def key_hash_prefix_len(self) -> int:
        """Gets the key_hash_prefix_len of this PseudoTranslateActionDto.  # noqa: E501


        :return: The key_hash_prefix_len of this PseudoTranslateActionDto.  # noqa: E501
        :rtype: int
        """
        return self._key_hash_prefix_len

    @key_hash_prefix_len.setter
    def key_hash_prefix_len(self, key_hash_prefix_len):
        """Sets the key_hash_prefix_len of this PseudoTranslateActionDto.


        :param key_hash_prefix_len: The key_hash_prefix_len of this PseudoTranslateActionDto.  # noqa: E501
        :type: int
        """

        self._key_hash_prefix_len = key_hash_prefix_len

    @property
    def substitution(self) -> list[SubstituteDto]:
        """Gets the substitution of this PseudoTranslateActionDto.  # noqa: E501


        :return: The substitution of this PseudoTranslateActionDto.  # noqa: E501
        :rtype: list[SubstituteDto]
        """
        return self._substitution

    @substitution.setter
    def substitution(self, substitution):
        """Sets the substitution of this PseudoTranslateActionDto.


        :param substitution: The substitution of this PseudoTranslateActionDto.  # noqa: E501
        :type: list[SubstituteDto]
        """

        self._substitution = substitution

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(PseudoTranslateActionDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PseudoTranslateActionDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
