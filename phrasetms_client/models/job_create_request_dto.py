# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class JobCreateRequestDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "target_langs": "list[str]",
        "due": "datetime",
        "workflow_settings": "list[WorkflowStepConfiguration]",
        "assignments": "list[ProvidersPerLanguage]",
        "import_settings": "UidReference",
        "use_project_file_import_settings": "bool",
        "pre_translate": "bool",
        "notify_provider": "NotifyProviderDto",
        "callback_url": "str",
        "path": "str",
        "remote_file": "JobCreateRemoteFileDto",
    }

    attribute_map = {
        "target_langs": "targetLangs",
        "due": "due",
        "workflow_settings": "workflowSettings",
        "assignments": "assignments",
        "import_settings": "importSettings",
        "use_project_file_import_settings": "useProjectFileImportSettings",
        "pre_translate": "preTranslate",
        "notify_provider": "notifyProvider",
        "callback_url": "callbackUrl",
        "path": "path",
        "remote_file": "remoteFile",
    }

    def __init__(
        self,
        target_langs=None,
        due=None,
        workflow_settings=None,
        assignments=None,
        import_settings=None,
        use_project_file_import_settings=None,
        pre_translate=None,
        notify_provider=None,
        callback_url=None,
        path=None,
        remote_file=None,
    ):  # noqa: E501
        """JobCreateRequestDto - a model defined in Swagger"""  # noqa: E501
        self._target_langs = None
        self._due = None
        self._workflow_settings = None
        self._assignments = None
        self._import_settings = None
        self._use_project_file_import_settings = None
        self._pre_translate = None
        self._notify_provider = None
        self._callback_url = None
        self._path = None
        self._remote_file = None
        self.discriminator = None
        self.target_langs = target_langs
        if due is not None:
            self.due = due
        if workflow_settings is not None:
            self.workflow_settings = workflow_settings
        if assignments is not None:
            self.assignments = assignments
        if import_settings is not None:
            self.import_settings = import_settings
        if use_project_file_import_settings is not None:
            self.use_project_file_import_settings = use_project_file_import_settings
        if pre_translate is not None:
            self.pre_translate = pre_translate
        if notify_provider is not None:
            self.notify_provider = notify_provider
        if callback_url is not None:
            self.callback_url = callback_url
        if path is not None:
            self.path = path
        if remote_file is not None:
            self.remote_file = remote_file

    @property
    def target_langs(self) -> list[str]:
        """Gets the target_langs of this JobCreateRequestDto.  # noqa: E501


        :return: The target_langs of this JobCreateRequestDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._target_langs

    @target_langs.setter
    def target_langs(self, target_langs):
        """Sets the target_langs of this JobCreateRequestDto.


        :param target_langs: The target_langs of this JobCreateRequestDto.  # noqa: E501
        :type: list[str]
        """
        if target_langs is None:
            raise ValueError(
                "Invalid value for `target_langs`, must not be `None`"
            )  # noqa: E501

        self._target_langs = target_langs

    @property
    def due(self) -> datetime:
        """Gets the due of this JobCreateRequestDto.  # noqa: E501

        only use for projects without workflows; otherwise specify in the workflowSettings object. Use ISO 8601 date format.  # noqa: E501

        :return: The due of this JobCreateRequestDto.  # noqa: E501
        :rtype: datetime
        """
        return self._due

    @due.setter
    def due(self, due):
        """Sets the due of this JobCreateRequestDto.

        only use for projects without workflows; otherwise specify in the workflowSettings object. Use ISO 8601 date format.  # noqa: E501

        :param due: The due of this JobCreateRequestDto.  # noqa: E501
        :type: datetime
        """

        self._due = due

    @property
    def workflow_settings(self) -> list[WorkflowStepConfiguration]:
        """Gets the workflow_settings of this JobCreateRequestDto.  # noqa: E501


        :return: The workflow_settings of this JobCreateRequestDto.  # noqa: E501
        :rtype: list[WorkflowStepConfiguration]
        """
        return self._workflow_settings

    @workflow_settings.setter
    def workflow_settings(self, workflow_settings):
        """Sets the workflow_settings of this JobCreateRequestDto.


        :param workflow_settings: The workflow_settings of this JobCreateRequestDto.  # noqa: E501
        :type: list[WorkflowStepConfiguration]
        """

        self._workflow_settings = workflow_settings

    @property
    def assignments(self) -> list[ProvidersPerLanguage]:
        """Gets the assignments of this JobCreateRequestDto.  # noqa: E501

        only use for projects without workflows; otherwise specify in the workflowSettings object  # noqa: E501

        :return: The assignments of this JobCreateRequestDto.  # noqa: E501
        :rtype: list[ProvidersPerLanguage]
        """
        return self._assignments

    @assignments.setter
    def assignments(self, assignments):
        """Sets the assignments of this JobCreateRequestDto.

        only use for projects without workflows; otherwise specify in the workflowSettings object  # noqa: E501

        :param assignments: The assignments of this JobCreateRequestDto.  # noqa: E501
        :type: list[ProvidersPerLanguage]
        """

        self._assignments = assignments

    @property
    def import_settings(self) -> UidReference:
        """Gets the import_settings of this JobCreateRequestDto.  # noqa: E501


        :return: The import_settings of this JobCreateRequestDto.  # noqa: E501
        :rtype: UidReference
        """
        return self._import_settings

    @import_settings.setter
    def import_settings(self, import_settings):
        """Sets the import_settings of this JobCreateRequestDto.


        :param import_settings: The import_settings of this JobCreateRequestDto.  # noqa: E501
        :type: UidReference
        """

        self._import_settings = import_settings

    @property
    def use_project_file_import_settings(self) -> bool:
        """Gets the use_project_file_import_settings of this JobCreateRequestDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The use_project_file_import_settings of this JobCreateRequestDto.  # noqa: E501
        :rtype: bool
        """
        return self._use_project_file_import_settings

    @use_project_file_import_settings.setter
    def use_project_file_import_settings(self, use_project_file_import_settings):
        """Sets the use_project_file_import_settings of this JobCreateRequestDto.

        Default: false  # noqa: E501

        :param use_project_file_import_settings: The use_project_file_import_settings of this JobCreateRequestDto.  # noqa: E501
        :type: bool
        """

        self._use_project_file_import_settings = use_project_file_import_settings

    @property
    def pre_translate(self) -> bool:
        """Gets the pre_translate of this JobCreateRequestDto.  # noqa: E501


        :return: The pre_translate of this JobCreateRequestDto.  # noqa: E501
        :rtype: bool
        """
        return self._pre_translate

    @pre_translate.setter
    def pre_translate(self, pre_translate):
        """Sets the pre_translate of this JobCreateRequestDto.


        :param pre_translate: The pre_translate of this JobCreateRequestDto.  # noqa: E501
        :type: bool
        """

        self._pre_translate = pre_translate

    @property
    def notify_provider(self) -> NotifyProviderDto:
        """Gets the notify_provider of this JobCreateRequestDto.  # noqa: E501


        :return: The notify_provider of this JobCreateRequestDto.  # noqa: E501
        :rtype: NotifyProviderDto
        """
        return self._notify_provider

    @notify_provider.setter
    def notify_provider(self, notify_provider):
        """Sets the notify_provider of this JobCreateRequestDto.


        :param notify_provider: The notify_provider of this JobCreateRequestDto.  # noqa: E501
        :type: NotifyProviderDto
        """

        self._notify_provider = notify_provider

    @property
    def callback_url(self) -> str:
        """Gets the callback_url of this JobCreateRequestDto.  # noqa: E501


        :return: The callback_url of this JobCreateRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this JobCreateRequestDto.


        :param callback_url: The callback_url of this JobCreateRequestDto.  # noqa: E501
        :type: str
        """

        self._callback_url = callback_url

    @property
    def path(self) -> str:
        """Gets the path of this JobCreateRequestDto.  # noqa: E501


        :return: The path of this JobCreateRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this JobCreateRequestDto.


        :param path: The path of this JobCreateRequestDto.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def remote_file(self) -> JobCreateRemoteFileDto:
        """Gets the remote_file of this JobCreateRequestDto.  # noqa: E501


        :return: The remote_file of this JobCreateRequestDto.  # noqa: E501
        :rtype: JobCreateRemoteFileDto
        """
        return self._remote_file

    @remote_file.setter
    def remote_file(self, remote_file):
        """Sets the remote_file of this JobCreateRequestDto.


        :param remote_file: The remote_file of this JobCreateRequestDto.  # noqa: E501
        :type: JobCreateRemoteFileDto
        """

        self._remote_file = remote_file

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(JobCreateRequestDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobCreateRequestDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
