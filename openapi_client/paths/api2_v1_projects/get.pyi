# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401

from openapi_client.model.page_dto_abstract_project_dto import PageDtoAbstractProjectDto

# Query params
NameSchema = schemas.StrSchema
ClientIdSchema = schemas.Int64Schema
ClientNameSchema = schemas.StrSchema
BusinessUnitIdSchema = schemas.Int64Schema
BusinessUnitNameSchema = schemas.StrSchema


class StatusesSchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.EnumBase,
            schemas.StrSchema
        ):
            
            @schemas.classproperty
            def NEW(cls):
                return cls("NEW")
            
            @schemas.classproperty
            def ASSIGNED(cls):
                return cls("ASSIGNED")
            
            @schemas.classproperty
            def COMPLETED(cls):
                return cls("COMPLETED")
            
            @schemas.classproperty
            def ACCEPTED_BY_VENDOR(cls):
                return cls("ACCEPTED_BY_VENDOR")
            
            @schemas.classproperty
            def DECLINED_BY_VENDOR(cls):
                return cls("DECLINED_BY_VENDOR")
            
            @schemas.classproperty
            def COMPLETED_BY_VENDOR(cls):
                return cls("COMPLETED_BY_VENDOR")
            
            @schemas.classproperty
            def CANCELLED(cls):
                return cls("CANCELLED")

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'StatusesSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class TargetLangsSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TargetLangsSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
DomainIdSchema = schemas.Int64Schema
DomainNameSchema = schemas.StrSchema
SubDomainIdSchema = schemas.Int64Schema
SubDomainNameSchema = schemas.StrSchema
CostCenterIdSchema = schemas.Int64Schema
CostCenterNameSchema = schemas.StrSchema


class DueInHoursSchema(
    schemas.Int32Schema
):
    pass


class CreatedInLastHoursSchema(
    schemas.Int32Schema
):
    pass


class SourceLangsSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SourceLangsSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
OwnerIdSchema = schemas.Int64Schema


class JobStatusesSchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.EnumBase,
            schemas.StrSchema
        ):
            
            @schemas.classproperty
            def NEW(cls):
                return cls("NEW")
            
            @schemas.classproperty
            def ACCEPTED(cls):
                return cls("ACCEPTED")
            
            @schemas.classproperty
            def DECLINED(cls):
                return cls("DECLINED")
            
            @schemas.classproperty
            def DELIVERED(cls):
                return cls("DELIVERED")
            
            @schemas.classproperty
            def EMAILED(cls):
                return cls("EMAILED")
            
            @schemas.classproperty
            def COMPLETED(cls):
                return cls("COMPLETED")
            
            @schemas.classproperty
            def CANCELLED(cls):
                return cls("CANCELLED")

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'JobStatusesSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class JobStatusGroupSchema(
    schemas.EnumBase,
    schemas.StrSchema
):
    
    @schemas.classproperty
    def NEW(cls):
        return cls("NEW")
    
    @schemas.classproperty
    def ACCEPTED(cls):
        return cls("ACCEPTED")
    
    @schemas.classproperty
    def COMPLETED(cls):
        return cls("COMPLETED")
BuyerIdSchema = schemas.Int64Schema


class PageNumberSchema(
    schemas.Int32Schema
):
    pass


class PageSizeSchema(
    schemas.Int32Schema
):
    pass
NameOrInternalIdSchema = schemas.StrSchema
IncludeArchivedSchema = schemas.BoolSchema
ArchivedOnlySchema = schemas.BoolSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'name': typing.Union[NameSchema, str, ],
        'clientId': typing.Union[ClientIdSchema, decimal.Decimal, int, ],
        'clientName': typing.Union[ClientNameSchema, str, ],
        'businessUnitId': typing.Union[BusinessUnitIdSchema, decimal.Decimal, int, ],
        'businessUnitName': typing.Union[BusinessUnitNameSchema, str, ],
        'statuses': typing.Union[StatusesSchema, list, tuple, ],
        'targetLangs': typing.Union[TargetLangsSchema, list, tuple, ],
        'domainId': typing.Union[DomainIdSchema, decimal.Decimal, int, ],
        'domainName': typing.Union[DomainNameSchema, str, ],
        'subDomainId': typing.Union[SubDomainIdSchema, decimal.Decimal, int, ],
        'subDomainName': typing.Union[SubDomainNameSchema, str, ],
        'costCenterId': typing.Union[CostCenterIdSchema, decimal.Decimal, int, ],
        'costCenterName': typing.Union[CostCenterNameSchema, str, ],
        'dueInHours': typing.Union[DueInHoursSchema, decimal.Decimal, int, ],
        'createdInLastHours': typing.Union[CreatedInLastHoursSchema, decimal.Decimal, int, ],
        'sourceLangs': typing.Union[SourceLangsSchema, list, tuple, ],
        'ownerId': typing.Union[OwnerIdSchema, decimal.Decimal, int, ],
        'jobStatuses': typing.Union[JobStatusesSchema, list, tuple, ],
        'jobStatusGroup': typing.Union[JobStatusGroupSchema, str, ],
        'buyerId': typing.Union[BuyerIdSchema, decimal.Decimal, int, ],
        'pageNumber': typing.Union[PageNumberSchema, decimal.Decimal, int, ],
        'pageSize': typing.Union[PageSizeSchema, decimal.Decimal, int, ],
        'nameOrInternalId': typing.Union[NameOrInternalIdSchema, str, ],
        'includeArchived': typing.Union[IncludeArchivedSchema, bool, ],
        'archivedOnly': typing.Union[ArchivedOnlySchema, bool, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_name = api_client.QueryParameter(
    name="name",
    style=api_client.ParameterStyle.FORM,
    schema=NameSchema,
    explode=True,
)
request_query_client_id = api_client.QueryParameter(
    name="clientId",
    style=api_client.ParameterStyle.FORM,
    schema=ClientIdSchema,
    explode=True,
)
request_query_client_name = api_client.QueryParameter(
    name="clientName",
    style=api_client.ParameterStyle.FORM,
    schema=ClientNameSchema,
    explode=True,
)
request_query_business_unit_id = api_client.QueryParameter(
    name="businessUnitId",
    style=api_client.ParameterStyle.FORM,
    schema=BusinessUnitIdSchema,
    explode=True,
)
request_query_business_unit_name = api_client.QueryParameter(
    name="businessUnitName",
    style=api_client.ParameterStyle.FORM,
    schema=BusinessUnitNameSchema,
    explode=True,
)
request_query_statuses = api_client.QueryParameter(
    name="statuses",
    style=api_client.ParameterStyle.FORM,
    schema=StatusesSchema,
    explode=True,
)
request_query_target_langs = api_client.QueryParameter(
    name="targetLangs",
    style=api_client.ParameterStyle.FORM,
    schema=TargetLangsSchema,
    explode=True,
)
request_query_domain_id = api_client.QueryParameter(
    name="domainId",
    style=api_client.ParameterStyle.FORM,
    schema=DomainIdSchema,
    explode=True,
)
request_query_domain_name = api_client.QueryParameter(
    name="domainName",
    style=api_client.ParameterStyle.FORM,
    schema=DomainNameSchema,
    explode=True,
)
request_query_sub_domain_id = api_client.QueryParameter(
    name="subDomainId",
    style=api_client.ParameterStyle.FORM,
    schema=SubDomainIdSchema,
    explode=True,
)
request_query_sub_domain_name = api_client.QueryParameter(
    name="subDomainName",
    style=api_client.ParameterStyle.FORM,
    schema=SubDomainNameSchema,
    explode=True,
)
request_query_cost_center_id = api_client.QueryParameter(
    name="costCenterId",
    style=api_client.ParameterStyle.FORM,
    schema=CostCenterIdSchema,
    explode=True,
)
request_query_cost_center_name = api_client.QueryParameter(
    name="costCenterName",
    style=api_client.ParameterStyle.FORM,
    schema=CostCenterNameSchema,
    explode=True,
)
request_query_due_in_hours = api_client.QueryParameter(
    name="dueInHours",
    style=api_client.ParameterStyle.FORM,
    schema=DueInHoursSchema,
    explode=True,
)
request_query_created_in_last_hours = api_client.QueryParameter(
    name="createdInLastHours",
    style=api_client.ParameterStyle.FORM,
    schema=CreatedInLastHoursSchema,
    explode=True,
)
request_query_source_langs = api_client.QueryParameter(
    name="sourceLangs",
    style=api_client.ParameterStyle.FORM,
    schema=SourceLangsSchema,
    explode=True,
)
request_query_owner_id = api_client.QueryParameter(
    name="ownerId",
    style=api_client.ParameterStyle.FORM,
    schema=OwnerIdSchema,
    explode=True,
)
request_query_job_statuses = api_client.QueryParameter(
    name="jobStatuses",
    style=api_client.ParameterStyle.FORM,
    schema=JobStatusesSchema,
    explode=True,
)
request_query_job_status_group = api_client.QueryParameter(
    name="jobStatusGroup",
    style=api_client.ParameterStyle.FORM,
    schema=JobStatusGroupSchema,
    explode=True,
)
request_query_buyer_id = api_client.QueryParameter(
    name="buyerId",
    style=api_client.ParameterStyle.FORM,
    schema=BuyerIdSchema,
    explode=True,
)
request_query_page_number = api_client.QueryParameter(
    name="pageNumber",
    style=api_client.ParameterStyle.FORM,
    schema=PageNumberSchema,
    explode=True,
)
request_query_page_size = api_client.QueryParameter(
    name="pageSize",
    style=api_client.ParameterStyle.FORM,
    schema=PageSizeSchema,
    explode=True,
)
request_query_name_or_internal_id = api_client.QueryParameter(
    name="nameOrInternalId",
    style=api_client.ParameterStyle.FORM,
    schema=NameOrInternalIdSchema,
    explode=True,
)
request_query_include_archived = api_client.QueryParameter(
    name="includeArchived",
    style=api_client.ParameterStyle.FORM,
    schema=IncludeArchivedSchema,
    explode=True,
)
request_query_archived_only = api_client.QueryParameter(
    name="archivedOnly",
    style=api_client.ParameterStyle.FORM,
    schema=ArchivedOnlySchema,
    explode=True,
)
SchemaFor200ResponseBodyApplicationJson = PageDtoAbstractProjectDto


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
    ]
    headers: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
)


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
    ]
    headers: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
)


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
    ]
    headers: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
)


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
    ]
    headers: schemas.Unset = schemas.unset


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
)


@dataclass
class ApiResponseFor405(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
    ]
    headers: schemas.Unset = schemas.unset


_response_for_405 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor405,
)


@dataclass
class ApiResponseFor408(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
    ]
    headers: schemas.Unset = schemas.unset


_response_for_408 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor408,
)


@dataclass
class ApiResponseFor410(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
    ]
    headers: schemas.Unset = schemas.unset


_response_for_410 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor410,
)


@dataclass
class ApiResponseFor415(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
    ]
    headers: schemas.Unset = schemas.unset


_response_for_415 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor415,
)


@dataclass
class ApiResponseFor429(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
    ]
    headers: schemas.Unset = schemas.unset


_response_for_429 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor429,
)


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
    ]
    headers: schemas.Unset = schemas.unset


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
)


@dataclass
class ApiResponseFor501(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
    ]
    headers: schemas.Unset = schemas.unset


_response_for_501 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor501,
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _list_projects_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _list_projects_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _list_projects_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _list_projects_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        List projects
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value

        prefix_separator_iterator = None
        for parameter in (
            request_query_name,
            request_query_client_id,
            request_query_client_name,
            request_query_business_unit_id,
            request_query_business_unit_name,
            request_query_statuses,
            request_query_target_langs,
            request_query_domain_id,
            request_query_domain_name,
            request_query_sub_domain_id,
            request_query_sub_domain_name,
            request_query_cost_center_id,
            request_query_cost_center_name,
            request_query_due_in_hours,
            request_query_created_in_last_hours,
            request_query_source_langs,
            request_query_owner_id,
            request_query_job_statuses,
            request_query_job_status_group,
            request_query_buyer_id,
            request_query_page_number,
            request_query_page_size,
            request_query_name_or_internal_id,
            request_query_include_archived,
            request_query_archived_only,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class ListProjects(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def list_projects(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def list_projects(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def list_projects(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def list_projects(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._list_projects_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._list_projects_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


