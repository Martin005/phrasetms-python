# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class JobSegmentDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            source = schemas.StrSchema
            translation = schemas.StrSchema
            createdAt = schemas.Int64Schema
            modifiedAt = schemas.Int64Schema
        
            @staticmethod
            def createdBy() -> typing.Type['UserReference']:
                return UserReference
        
            @staticmethod
            def modifiedBy() -> typing.Type['UserReference']:
                return UserReference
            workflowLevel = schemas.Int32Schema
        
            @staticmethod
            def workflowStep() -> typing.Type['WorkflowStepDto']:
                return WorkflowStepDto
            __annotations__ = {
                "id": id,
                "source": source,
                "translation": translation,
                "createdAt": createdAt,
                "modifiedAt": modifiedAt,
                "createdBy": createdBy,
                "modifiedBy": modifiedBy,
                "workflowLevel": workflowLevel,
                "workflowStep": workflowStep,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["translation"]) -> MetaOapg.properties.translation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modifiedAt"]) -> MetaOapg.properties.modifiedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdBy"]) -> 'UserReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modifiedBy"]) -> 'UserReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowLevel"]) -> MetaOapg.properties.workflowLevel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowStep"]) -> 'WorkflowStepDto': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "source", "translation", "createdAt", "modifiedAt", "createdBy", "modifiedBy", "workflowLevel", "workflowStep", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union[MetaOapg.properties.source, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["translation"]) -> typing.Union[MetaOapg.properties.translation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> typing.Union[MetaOapg.properties.createdAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modifiedAt"]) -> typing.Union[MetaOapg.properties.modifiedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdBy"]) -> typing.Union['UserReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modifiedBy"]) -> typing.Union['UserReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowLevel"]) -> typing.Union[MetaOapg.properties.workflowLevel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowStep"]) -> typing.Union['WorkflowStepDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "source", "translation", "createdAt", "modifiedAt", "createdBy", "modifiedBy", "workflowLevel", "workflowStep", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        source: typing.Union[MetaOapg.properties.source, str, schemas.Unset] = schemas.unset,
        translation: typing.Union[MetaOapg.properties.translation, str, schemas.Unset] = schemas.unset,
        createdAt: typing.Union[MetaOapg.properties.createdAt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        modifiedAt: typing.Union[MetaOapg.properties.modifiedAt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        createdBy: typing.Union['UserReference', schemas.Unset] = schemas.unset,
        modifiedBy: typing.Union['UserReference', schemas.Unset] = schemas.unset,
        workflowLevel: typing.Union[MetaOapg.properties.workflowLevel, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        workflowStep: typing.Union['WorkflowStepDto', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JobSegmentDto':
        return super().__new__(
            cls,
            *_args,
            id=id,
            source=source,
            translation=translation,
            createdAt=createdAt,
            modifiedAt=modifiedAt,
            createdBy=createdBy,
            modifiedBy=modifiedBy,
            workflowLevel=workflowLevel,
            workflowStep=workflowStep,
            _configuration=_configuration,
            **kwargs,
        )

from phrasetms_client.model.user_reference import UserReference
from phrasetms_client.model.workflow_step_dto import WorkflowStepDto
