# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class BackgroundTasksTbDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            status = schemas.StrSchema
            finishedDataText = schemas.StrSchema
        
            @staticmethod
            def asyncRequest() -> typing.Type['AsyncRequestDto']:
                return AsyncRequestDto
            lastTaskString = schemas.StrSchema
        
            @staticmethod
            def metadata() -> typing.Type['MetadataResponse']:
                return MetadataResponse
            lastTaskOk = schemas.StrSchema
            lastTaskError = schemas.StrSchema
            lastTaskErrorHtml = schemas.StrSchema
            __annotations__ = {
                "status": status,
                "finishedDataText": finishedDataText,
                "asyncRequest": asyncRequest,
                "lastTaskString": lastTaskString,
                "metadata": metadata,
                "lastTaskOk": lastTaskOk,
                "lastTaskError": lastTaskError,
                "lastTaskErrorHtml": lastTaskErrorHtml,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["finishedDataText"]) -> MetaOapg.properties.finishedDataText: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["asyncRequest"]) -> 'AsyncRequestDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastTaskString"]) -> MetaOapg.properties.lastTaskString: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'MetadataResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastTaskOk"]) -> MetaOapg.properties.lastTaskOk: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastTaskError"]) -> MetaOapg.properties.lastTaskError: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastTaskErrorHtml"]) -> MetaOapg.properties.lastTaskErrorHtml: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["status", "finishedDataText", "asyncRequest", "lastTaskString", "metadata", "lastTaskOk", "lastTaskError", "lastTaskErrorHtml", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["finishedDataText"]) -> typing.Union[MetaOapg.properties.finishedDataText, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["asyncRequest"]) -> typing.Union['AsyncRequestDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastTaskString"]) -> typing.Union[MetaOapg.properties.lastTaskString, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union['MetadataResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastTaskOk"]) -> typing.Union[MetaOapg.properties.lastTaskOk, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastTaskError"]) -> typing.Union[MetaOapg.properties.lastTaskError, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastTaskErrorHtml"]) -> typing.Union[MetaOapg.properties.lastTaskErrorHtml, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["status", "finishedDataText", "asyncRequest", "lastTaskString", "metadata", "lastTaskOk", "lastTaskError", "lastTaskErrorHtml", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        finishedDataText: typing.Union[MetaOapg.properties.finishedDataText, str, schemas.Unset] = schemas.unset,
        asyncRequest: typing.Union['AsyncRequestDto', schemas.Unset] = schemas.unset,
        lastTaskString: typing.Union[MetaOapg.properties.lastTaskString, str, schemas.Unset] = schemas.unset,
        metadata: typing.Union['MetadataResponse', schemas.Unset] = schemas.unset,
        lastTaskOk: typing.Union[MetaOapg.properties.lastTaskOk, str, schemas.Unset] = schemas.unset,
        lastTaskError: typing.Union[MetaOapg.properties.lastTaskError, str, schemas.Unset] = schemas.unset,
        lastTaskErrorHtml: typing.Union[MetaOapg.properties.lastTaskErrorHtml, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BackgroundTasksTbDto':
        return super().__new__(
            cls,
            *_args,
            status=status,
            finishedDataText=finishedDataText,
            asyncRequest=asyncRequest,
            lastTaskString=lastTaskString,
            metadata=metadata,
            lastTaskOk=lastTaskOk,
            lastTaskError=lastTaskError,
            lastTaskErrorHtml=lastTaskErrorHtml,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.async_request_dto import AsyncRequestDto
from openapi_client.model.metadata_response import MetadataResponse
