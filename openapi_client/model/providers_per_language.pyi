# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ProvidersPerLanguage(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            targetLang = schemas.StrSchema
            
            
            class providers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ProviderReference']:
                        return ProviderReference
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ProviderReference'], typing.List['ProviderReference']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'providers':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ProviderReference':
                    return super().__getitem__(i)
            
            
            class assignedUsers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['User']:
                        return User
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['User'], typing.List['User']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'assignedUsers':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'User':
                    return super().__getitem__(i)
            __annotations__ = {
                "targetLang": targetLang,
                "providers": providers,
                "assignedUsers": assignedUsers,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetLang"]) -> MetaOapg.properties.targetLang: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["providers"]) -> MetaOapg.properties.providers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assignedUsers"]) -> MetaOapg.properties.assignedUsers: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["targetLang", "providers", "assignedUsers", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetLang"]) -> typing.Union[MetaOapg.properties.targetLang, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["providers"]) -> typing.Union[MetaOapg.properties.providers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assignedUsers"]) -> typing.Union[MetaOapg.properties.assignedUsers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["targetLang", "providers", "assignedUsers", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        targetLang: typing.Union[MetaOapg.properties.targetLang, str, schemas.Unset] = schemas.unset,
        providers: typing.Union[MetaOapg.properties.providers, list, tuple, schemas.Unset] = schemas.unset,
        assignedUsers: typing.Union[MetaOapg.properties.assignedUsers, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProvidersPerLanguage':
        return super().__new__(
            cls,
            *_args,
            targetLang=targetLang,
            providers=providers,
            assignedUsers=assignedUsers,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.provider_reference import ProviderReference
from openapi_client.model.user import User
