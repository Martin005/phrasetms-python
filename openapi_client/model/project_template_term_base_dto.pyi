# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ProjectTemplateTermBaseDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            targetLocale = schemas.StrSchema
        
            @staticmethod
            def workflowStep() -> typing.Type['WorkflowStepReference']:
                return WorkflowStepReference
            readMode = schemas.BoolSchema
            writeMode = schemas.BoolSchema
        
            @staticmethod
            def termBase() -> typing.Type['TermBaseDto']:
                return TermBaseDto
            qualityAssurance = schemas.BoolSchema
            __annotations__ = {
                "targetLocale": targetLocale,
                "workflowStep": workflowStep,
                "readMode": readMode,
                "writeMode": writeMode,
                "termBase": termBase,
                "qualityAssurance": qualityAssurance,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetLocale"]) -> MetaOapg.properties.targetLocale: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowStep"]) -> 'WorkflowStepReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["readMode"]) -> MetaOapg.properties.readMode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["writeMode"]) -> MetaOapg.properties.writeMode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["termBase"]) -> 'TermBaseDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qualityAssurance"]) -> MetaOapg.properties.qualityAssurance: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["targetLocale", "workflowStep", "readMode", "writeMode", "termBase", "qualityAssurance", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetLocale"]) -> typing.Union[MetaOapg.properties.targetLocale, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowStep"]) -> typing.Union['WorkflowStepReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["readMode"]) -> typing.Union[MetaOapg.properties.readMode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["writeMode"]) -> typing.Union[MetaOapg.properties.writeMode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["termBase"]) -> typing.Union['TermBaseDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qualityAssurance"]) -> typing.Union[MetaOapg.properties.qualityAssurance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["targetLocale", "workflowStep", "readMode", "writeMode", "termBase", "qualityAssurance", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        targetLocale: typing.Union[MetaOapg.properties.targetLocale, str, schemas.Unset] = schemas.unset,
        workflowStep: typing.Union['WorkflowStepReference', schemas.Unset] = schemas.unset,
        readMode: typing.Union[MetaOapg.properties.readMode, bool, schemas.Unset] = schemas.unset,
        writeMode: typing.Union[MetaOapg.properties.writeMode, bool, schemas.Unset] = schemas.unset,
        termBase: typing.Union['TermBaseDto', schemas.Unset] = schemas.unset,
        qualityAssurance: typing.Union[MetaOapg.properties.qualityAssurance, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProjectTemplateTermBaseDto':
        return super().__new__(
            cls,
            *_args,
            targetLocale=targetLocale,
            workflowStep=workflowStep,
            readMode=readMode,
            writeMode=writeMode,
            termBase=termBase,
            qualityAssurance=qualityAssurance,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.term_base_dto import TermBaseDto
from openapi_client.model.workflow_step_reference import WorkflowStepReference
