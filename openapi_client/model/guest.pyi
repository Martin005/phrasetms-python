# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class GUEST(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "client",
                }
                
                class properties:
                
                    @staticmethod
                    def client() -> typing.Type['UidReference']:
                        return UidReference
                    enableMT = schemas.BoolSchema
                    projectViewOther = schemas.BoolSchema
                    projectViewOtherLinguist = schemas.BoolSchema
                    projectViewOtherEditor = schemas.BoolSchema
                    transMemoryViewOther = schemas.BoolSchema
                    transMemoryEditOther = schemas.BoolSchema
                    transMemoryExportOther = schemas.BoolSchema
                    transMemoryImportOther = schemas.BoolSchema
                    termBaseViewOther = schemas.BoolSchema
                    termBaseEditOther = schemas.BoolSchema
                    termBaseExportOther = schemas.BoolSchema
                    termBaseImportOther = schemas.BoolSchema
                    termBaseApproveOther = schemas.BoolSchema
                    __annotations__ = {
                        "client": client,
                        "enableMT": enableMT,
                        "projectViewOther": projectViewOther,
                        "projectViewOtherLinguist": projectViewOtherLinguist,
                        "projectViewOtherEditor": projectViewOtherEditor,
                        "transMemoryViewOther": transMemoryViewOther,
                        "transMemoryEditOther": transMemoryEditOther,
                        "transMemoryExportOther": transMemoryExportOther,
                        "transMemoryImportOther": transMemoryImportOther,
                        "termBaseViewOther": termBaseViewOther,
                        "termBaseEditOther": termBaseEditOther,
                        "termBaseExportOther": termBaseExportOther,
                        "termBaseImportOther": termBaseImportOther,
                        "termBaseApproveOther": termBaseApproveOther,
                    }
            
            client: 'UidReference'
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["client"]) -> 'UidReference': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["enableMT"]) -> MetaOapg.properties.enableMT: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["projectViewOther"]) -> MetaOapg.properties.projectViewOther: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["projectViewOtherLinguist"]) -> MetaOapg.properties.projectViewOtherLinguist: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["projectViewOtherEditor"]) -> MetaOapg.properties.projectViewOtherEditor: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["transMemoryViewOther"]) -> MetaOapg.properties.transMemoryViewOther: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["transMemoryEditOther"]) -> MetaOapg.properties.transMemoryEditOther: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["transMemoryExportOther"]) -> MetaOapg.properties.transMemoryExportOther: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["transMemoryImportOther"]) -> MetaOapg.properties.transMemoryImportOther: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["termBaseViewOther"]) -> MetaOapg.properties.termBaseViewOther: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["termBaseEditOther"]) -> MetaOapg.properties.termBaseEditOther: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["termBaseExportOther"]) -> MetaOapg.properties.termBaseExportOther: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["termBaseImportOther"]) -> MetaOapg.properties.termBaseImportOther: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["termBaseApproveOther"]) -> MetaOapg.properties.termBaseApproveOther: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["client", "enableMT", "projectViewOther", "projectViewOtherLinguist", "projectViewOtherEditor", "transMemoryViewOther", "transMemoryEditOther", "transMemoryExportOther", "transMemoryImportOther", "termBaseViewOther", "termBaseEditOther", "termBaseExportOther", "termBaseImportOther", "termBaseApproveOther", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["client"]) -> 'UidReference': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["enableMT"]) -> typing.Union[MetaOapg.properties.enableMT, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["projectViewOther"]) -> typing.Union[MetaOapg.properties.projectViewOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["projectViewOtherLinguist"]) -> typing.Union[MetaOapg.properties.projectViewOtherLinguist, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["projectViewOtherEditor"]) -> typing.Union[MetaOapg.properties.projectViewOtherEditor, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["transMemoryViewOther"]) -> typing.Union[MetaOapg.properties.transMemoryViewOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["transMemoryEditOther"]) -> typing.Union[MetaOapg.properties.transMemoryEditOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["transMemoryExportOther"]) -> typing.Union[MetaOapg.properties.transMemoryExportOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["transMemoryImportOther"]) -> typing.Union[MetaOapg.properties.transMemoryImportOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["termBaseViewOther"]) -> typing.Union[MetaOapg.properties.termBaseViewOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["termBaseEditOther"]) -> typing.Union[MetaOapg.properties.termBaseEditOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["termBaseExportOther"]) -> typing.Union[MetaOapg.properties.termBaseExportOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["termBaseImportOther"]) -> typing.Union[MetaOapg.properties.termBaseImportOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["termBaseApproveOther"]) -> typing.Union[MetaOapg.properties.termBaseApproveOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["client", "enableMT", "projectViewOther", "projectViewOtherLinguist", "projectViewOtherEditor", "transMemoryViewOther", "transMemoryEditOther", "transMemoryExportOther", "transMemoryImportOther", "termBaseViewOther", "termBaseEditOther", "termBaseExportOther", "termBaseImportOther", "termBaseApproveOther", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                client: 'UidReference',
                enableMT: typing.Union[MetaOapg.properties.enableMT, bool, schemas.Unset] = schemas.unset,
                projectViewOther: typing.Union[MetaOapg.properties.projectViewOther, bool, schemas.Unset] = schemas.unset,
                projectViewOtherLinguist: typing.Union[MetaOapg.properties.projectViewOtherLinguist, bool, schemas.Unset] = schemas.unset,
                projectViewOtherEditor: typing.Union[MetaOapg.properties.projectViewOtherEditor, bool, schemas.Unset] = schemas.unset,
                transMemoryViewOther: typing.Union[MetaOapg.properties.transMemoryViewOther, bool, schemas.Unset] = schemas.unset,
                transMemoryEditOther: typing.Union[MetaOapg.properties.transMemoryEditOther, bool, schemas.Unset] = schemas.unset,
                transMemoryExportOther: typing.Union[MetaOapg.properties.transMemoryExportOther, bool, schemas.Unset] = schemas.unset,
                transMemoryImportOther: typing.Union[MetaOapg.properties.transMemoryImportOther, bool, schemas.Unset] = schemas.unset,
                termBaseViewOther: typing.Union[MetaOapg.properties.termBaseViewOther, bool, schemas.Unset] = schemas.unset,
                termBaseEditOther: typing.Union[MetaOapg.properties.termBaseEditOther, bool, schemas.Unset] = schemas.unset,
                termBaseExportOther: typing.Union[MetaOapg.properties.termBaseExportOther, bool, schemas.Unset] = schemas.unset,
                termBaseImportOther: typing.Union[MetaOapg.properties.termBaseImportOther, bool, schemas.Unset] = schemas.unset,
                termBaseApproveOther: typing.Union[MetaOapg.properties.termBaseApproveOther, bool, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *_args,
                    client=client,
                    enableMT=enableMT,
                    projectViewOther=projectViewOther,
                    projectViewOtherLinguist=projectViewOtherLinguist,
                    projectViewOtherEditor=projectViewOtherEditor,
                    transMemoryViewOther=transMemoryViewOther,
                    transMemoryEditOther=transMemoryEditOther,
                    transMemoryExportOther=transMemoryExportOther,
                    transMemoryImportOther=transMemoryImportOther,
                    termBaseViewOther=termBaseViewOther,
                    termBaseEditOther=termBaseEditOther,
                    termBaseExportOther=termBaseExportOther,
                    termBaseImportOther=termBaseImportOther,
                    termBaseApproveOther=termBaseApproveOther,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                AbstractUserCreateDto,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GUEST':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.abstract_user_create_dto import AbstractUserCreateDto
from openapi_client.model.uid_reference import UidReference
