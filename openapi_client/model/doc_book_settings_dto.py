# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class DocBookSettingsDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            includeTags = schemas.StrSchema
            excludeTags = schemas.StrSchema
            inlineTags = schemas.StrSchema
            inlineTagsNonTranslatable = schemas.StrSchema
            tagRegexp = schemas.StrSchema
            __annotations__ = {
                "includeTags": includeTags,
                "excludeTags": excludeTags,
                "inlineTags": inlineTags,
                "inlineTagsNonTranslatable": inlineTagsNonTranslatable,
                "tagRegexp": tagRegexp,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includeTags"]) -> MetaOapg.properties.includeTags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["excludeTags"]) -> MetaOapg.properties.excludeTags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inlineTags"]) -> MetaOapg.properties.inlineTags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inlineTagsNonTranslatable"]) -> MetaOapg.properties.inlineTagsNonTranslatable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tagRegexp"]) -> MetaOapg.properties.tagRegexp: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["includeTags", "excludeTags", "inlineTags", "inlineTagsNonTranslatable", "tagRegexp", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includeTags"]) -> typing.Union[MetaOapg.properties.includeTags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["excludeTags"]) -> typing.Union[MetaOapg.properties.excludeTags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inlineTags"]) -> typing.Union[MetaOapg.properties.inlineTags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inlineTagsNonTranslatable"]) -> typing.Union[MetaOapg.properties.inlineTagsNonTranslatable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tagRegexp"]) -> typing.Union[MetaOapg.properties.tagRegexp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["includeTags", "excludeTags", "inlineTags", "inlineTagsNonTranslatable", "tagRegexp", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        includeTags: typing.Union[MetaOapg.properties.includeTags, str, schemas.Unset] = schemas.unset,
        excludeTags: typing.Union[MetaOapg.properties.excludeTags, str, schemas.Unset] = schemas.unset,
        inlineTags: typing.Union[MetaOapg.properties.inlineTags, str, schemas.Unset] = schemas.unset,
        inlineTagsNonTranslatable: typing.Union[MetaOapg.properties.inlineTagsNonTranslatable, str, schemas.Unset] = schemas.unset,
        tagRegexp: typing.Union[MetaOapg.properties.tagRegexp, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DocBookSettingsDto':
        return super().__new__(
            cls,
            *_args,
            includeTags=includeTags,
            excludeTags=excludeTags,
            inlineTags=inlineTags,
            inlineTagsNonTranslatable=inlineTagsNonTranslatable,
            tagRegexp=tagRegexp,
            _configuration=_configuration,
            **kwargs,
        )
