# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class MachineTranslateSettingsPbmDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            uid = schemas.StrSchema
            baseName = schemas.StrSchema
            name = schemas.StrSchema
            type = schemas.StrSchema
            default_ = schemas.BoolSchema
            includeTags = schemas.BoolSchema
            mtQualityEstimation = schemas.BoolSchema
            
            
            class args(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.StrSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                ) -> 'args':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            payForMtPossible = schemas.BoolSchema
            payForMtActive = schemas.BoolSchema
            charCount = schemas.Int32Schema
            sharingSettings = schemas.Int32Schema
        
            @staticmethod
            def langs() -> typing.Type['MachineTranslateSettingsLangsDto']:
                return MachineTranslateSettingsLangsDto
            __annotations__ = {
                "id": id,
                "uid": uid,
                "baseName": baseName,
                "name": name,
                "type": type,
                "default_": default_,
                "includeTags": includeTags,
                "mtQualityEstimation": mtQualityEstimation,
                "args": args,
                "payForMtPossible": payForMtPossible,
                "payForMtActive": payForMtActive,
                "charCount": charCount,
                "sharingSettings": sharingSettings,
                "langs": langs,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uid"]) -> MetaOapg.properties.uid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["baseName"]) -> MetaOapg.properties.baseName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_"]) -> MetaOapg.properties.default_: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includeTags"]) -> MetaOapg.properties.includeTags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mtQualityEstimation"]) -> MetaOapg.properties.mtQualityEstimation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["args"]) -> MetaOapg.properties.args: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payForMtPossible"]) -> MetaOapg.properties.payForMtPossible: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payForMtActive"]) -> MetaOapg.properties.payForMtActive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["charCount"]) -> MetaOapg.properties.charCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sharingSettings"]) -> MetaOapg.properties.sharingSettings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["langs"]) -> 'MachineTranslateSettingsLangsDto': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "uid", "baseName", "name", "type", "default_", "includeTags", "mtQualityEstimation", "args", "payForMtPossible", "payForMtActive", "charCount", "sharingSettings", "langs", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uid"]) -> typing.Union[MetaOapg.properties.uid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["baseName"]) -> typing.Union[MetaOapg.properties.baseName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_"]) -> typing.Union[MetaOapg.properties.default_, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includeTags"]) -> typing.Union[MetaOapg.properties.includeTags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mtQualityEstimation"]) -> typing.Union[MetaOapg.properties.mtQualityEstimation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["args"]) -> typing.Union[MetaOapg.properties.args, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payForMtPossible"]) -> typing.Union[MetaOapg.properties.payForMtPossible, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payForMtActive"]) -> typing.Union[MetaOapg.properties.payForMtActive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["charCount"]) -> typing.Union[MetaOapg.properties.charCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sharingSettings"]) -> typing.Union[MetaOapg.properties.sharingSettings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["langs"]) -> typing.Union['MachineTranslateSettingsLangsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "uid", "baseName", "name", "type", "default_", "includeTags", "mtQualityEstimation", "args", "payForMtPossible", "payForMtActive", "charCount", "sharingSettings", "langs", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        uid: typing.Union[MetaOapg.properties.uid, str, schemas.Unset] = schemas.unset,
        baseName: typing.Union[MetaOapg.properties.baseName, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        default_: typing.Union[MetaOapg.properties.default_, bool, schemas.Unset] = schemas.unset,
        includeTags: typing.Union[MetaOapg.properties.includeTags, bool, schemas.Unset] = schemas.unset,
        mtQualityEstimation: typing.Union[MetaOapg.properties.mtQualityEstimation, bool, schemas.Unset] = schemas.unset,
        args: typing.Union[MetaOapg.properties.args, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        payForMtPossible: typing.Union[MetaOapg.properties.payForMtPossible, bool, schemas.Unset] = schemas.unset,
        payForMtActive: typing.Union[MetaOapg.properties.payForMtActive, bool, schemas.Unset] = schemas.unset,
        charCount: typing.Union[MetaOapg.properties.charCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        sharingSettings: typing.Union[MetaOapg.properties.sharingSettings, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        langs: typing.Union['MachineTranslateSettingsLangsDto', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MachineTranslateSettingsPbmDto':
        return super().__new__(
            cls,
            *_args,
            id=id,
            uid=uid,
            baseName=baseName,
            name=name,
            type=type,
            default_=default_,
            includeTags=includeTags,
            mtQualityEstimation=mtQualityEstimation,
            args=args,
            payForMtPossible=payForMtPossible,
            payForMtActive=payForMtActive,
            charCount=charCount,
            sharingSettings=sharingSettings,
            langs=langs,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.machine_translate_settings_langs_dto import MachineTranslateSettingsLangsDto
