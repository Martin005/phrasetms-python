# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class EditLqaConversationDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "lqa",
        }
        
        class properties:
            
            
            class lqa(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['LQAReference']:
                        return LQAReference
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['LQAReference'], typing.List['LQAReference']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'lqa':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'LQAReference':
                    return super().__getitem__(i)
            lqaDescription = schemas.StrSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def RESOLVED(cls):
                    return cls("resolved")
                
                @schemas.classproperty
                def UNRESOLVED(cls):
                    return cls("unresolved")
        
            @staticmethod
            def correlation() -> typing.Type['ReferenceCorrelation']:
                return ReferenceCorrelation
            __annotations__ = {
                "lqa": lqa,
                "lqaDescription": lqaDescription,
                "status": status,
                "correlation": correlation,
            }
    
    lqa: MetaOapg.properties.lqa
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lqa"]) -> MetaOapg.properties.lqa: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lqaDescription"]) -> MetaOapg.properties.lqaDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["correlation"]) -> 'ReferenceCorrelation': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["lqa", "lqaDescription", "status", "correlation", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lqa"]) -> MetaOapg.properties.lqa: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lqaDescription"]) -> typing.Union[MetaOapg.properties.lqaDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["correlation"]) -> typing.Union['ReferenceCorrelation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["lqa", "lqaDescription", "status", "correlation", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        lqa: typing.Union[MetaOapg.properties.lqa, list, tuple, ],
        lqaDescription: typing.Union[MetaOapg.properties.lqaDescription, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        correlation: typing.Union['ReferenceCorrelation', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EditLqaConversationDto':
        return super().__new__(
            cls,
            *_args,
            lqa=lqa,
            lqaDescription=lqaDescription,
            status=status,
            correlation=correlation,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.lqa_reference import LQAReference
from openapi_client.model.reference_correlation import ReferenceCorrelation
