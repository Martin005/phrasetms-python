# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class AbstractAnalyseSettingsDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Base analyseSettingsDto
    """


    class MetaOapg:
        
        @staticmethod
        def discriminator():
            return {
                'type': {
                    'PostAnalyse': PostAnalyse,
                    'PreAnalyse': PreAnalyse,
                    'PreAnalyseTarget, Compare': PreAnalyseTargetCompare,
                }
            }
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "PreAnalyse": "PRE_ANALYSE",
                        "PostAnalyse": "POST_ANALYSE",
                        "PreAnalyseTarget": "PRE_ANALYSE_TARGET",
                        "Compare": "COMPARE",
                    }
                
                @schemas.classproperty
                def PRE_ANALYSE(cls):
                    return cls("PreAnalyse")
                
                @schemas.classproperty
                def POST_ANALYSE(cls):
                    return cls("PostAnalyse")
                
                @schemas.classproperty
                def PRE_ANALYSE_TARGET(cls):
                    return cls("PreAnalyseTarget")
                
                @schemas.classproperty
                def COMPARE(cls):
                    return cls("Compare")
            includeConfirmedSegments = schemas.BoolSchema
            includeNumbers = schemas.BoolSchema
            includeLockedSegments = schemas.BoolSchema
            countSourceUnits = schemas.BoolSchema
            includeTransMemory = schemas.BoolSchema
            namingPattern = schemas.StrSchema
            analyzeByLanguage = schemas.BoolSchema
            analyzeByProvider = schemas.BoolSchema
            allowAutomaticPostAnalysis = schemas.BoolSchema
            __annotations__ = {
                "type": type,
                "includeConfirmedSegments": includeConfirmedSegments,
                "includeNumbers": includeNumbers,
                "includeLockedSegments": includeLockedSegments,
                "countSourceUnits": countSourceUnits,
                "includeTransMemory": includeTransMemory,
                "namingPattern": namingPattern,
                "analyzeByLanguage": analyzeByLanguage,
                "analyzeByProvider": analyzeByProvider,
                "allowAutomaticPostAnalysis": allowAutomaticPostAnalysis,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includeConfirmedSegments"]) -> MetaOapg.properties.includeConfirmedSegments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includeNumbers"]) -> MetaOapg.properties.includeNumbers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includeLockedSegments"]) -> MetaOapg.properties.includeLockedSegments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countSourceUnits"]) -> MetaOapg.properties.countSourceUnits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includeTransMemory"]) -> MetaOapg.properties.includeTransMemory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["namingPattern"]) -> MetaOapg.properties.namingPattern: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["analyzeByLanguage"]) -> MetaOapg.properties.analyzeByLanguage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["analyzeByProvider"]) -> MetaOapg.properties.analyzeByProvider: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowAutomaticPostAnalysis"]) -> MetaOapg.properties.allowAutomaticPostAnalysis: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "includeConfirmedSegments", "includeNumbers", "includeLockedSegments", "countSourceUnits", "includeTransMemory", "namingPattern", "analyzeByLanguage", "analyzeByProvider", "allowAutomaticPostAnalysis", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includeConfirmedSegments"]) -> typing.Union[MetaOapg.properties.includeConfirmedSegments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includeNumbers"]) -> typing.Union[MetaOapg.properties.includeNumbers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includeLockedSegments"]) -> typing.Union[MetaOapg.properties.includeLockedSegments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countSourceUnits"]) -> typing.Union[MetaOapg.properties.countSourceUnits, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includeTransMemory"]) -> typing.Union[MetaOapg.properties.includeTransMemory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["namingPattern"]) -> typing.Union[MetaOapg.properties.namingPattern, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["analyzeByLanguage"]) -> typing.Union[MetaOapg.properties.analyzeByLanguage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["analyzeByProvider"]) -> typing.Union[MetaOapg.properties.analyzeByProvider, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowAutomaticPostAnalysis"]) -> typing.Union[MetaOapg.properties.allowAutomaticPostAnalysis, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "includeConfirmedSegments", "includeNumbers", "includeLockedSegments", "countSourceUnits", "includeTransMemory", "namingPattern", "analyzeByLanguage", "analyzeByProvider", "allowAutomaticPostAnalysis", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        includeConfirmedSegments: typing.Union[MetaOapg.properties.includeConfirmedSegments, bool, schemas.Unset] = schemas.unset,
        includeNumbers: typing.Union[MetaOapg.properties.includeNumbers, bool, schemas.Unset] = schemas.unset,
        includeLockedSegments: typing.Union[MetaOapg.properties.includeLockedSegments, bool, schemas.Unset] = schemas.unset,
        countSourceUnits: typing.Union[MetaOapg.properties.countSourceUnits, bool, schemas.Unset] = schemas.unset,
        includeTransMemory: typing.Union[MetaOapg.properties.includeTransMemory, bool, schemas.Unset] = schemas.unset,
        namingPattern: typing.Union[MetaOapg.properties.namingPattern, str, schemas.Unset] = schemas.unset,
        analyzeByLanguage: typing.Union[MetaOapg.properties.analyzeByLanguage, bool, schemas.Unset] = schemas.unset,
        analyzeByProvider: typing.Union[MetaOapg.properties.analyzeByProvider, bool, schemas.Unset] = schemas.unset,
        allowAutomaticPostAnalysis: typing.Union[MetaOapg.properties.allowAutomaticPostAnalysis, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AbstractAnalyseSettingsDto':
        return super().__new__(
            cls,
            *_args,
            type=type,
            includeConfirmedSegments=includeConfirmedSegments,
            includeNumbers=includeNumbers,
            includeLockedSegments=includeLockedSegments,
            countSourceUnits=countSourceUnits,
            includeTransMemory=includeTransMemory,
            namingPattern=namingPattern,
            analyzeByLanguage=analyzeByLanguage,
            analyzeByProvider=analyzeByProvider,
            allowAutomaticPostAnalysis=allowAutomaticPostAnalysis,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.post_analyse import PostAnalyse
from openapi_client.model.pre_analyse import PreAnalyse
from openapi_client.model.pre_analyse_target_compare import PreAnalyseTargetCompare
