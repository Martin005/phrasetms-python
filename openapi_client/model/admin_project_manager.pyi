# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class AdminProjectManager(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    shared = schemas.BoolSchema
                
                    @staticmethod
                    def progress() -> typing.Type['ProgressDto']:
                        return ProgressDto
                
                    @staticmethod
                    def client() -> typing.Type['ClientReference']:
                        return ClientReference
                
                    @staticmethod
                    def costCenter() -> typing.Type['CostCenterReference']:
                        return CostCenterReference
                
                    @staticmethod
                    def businessUnit() -> typing.Type['BusinessUnitReference']:
                        return BusinessUnitReference
                    dateDue = schemas.DateTimeSchema
                    
                    
                    class status(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def NEW(cls):
                            return cls("NEW")
                        
                        @schemas.classproperty
                        def ASSIGNED(cls):
                            return cls("ASSIGNED")
                        
                        @schemas.classproperty
                        def COMPLETED(cls):
                            return cls("COMPLETED")
                        
                        @schemas.classproperty
                        def ACCEPTED_BY_VENDOR(cls):
                            return cls("ACCEPTED_BY_VENDOR")
                        
                        @schemas.classproperty
                        def DECLINED_BY_VENDOR(cls):
                            return cls("DECLINED_BY_VENDOR")
                        
                        @schemas.classproperty
                        def COMPLETED_BY_VENDOR(cls):
                            return cls("COMPLETED_BY_VENDOR")
                        
                        @schemas.classproperty
                        def CANCELLED(cls):
                            return cls("CANCELLED")
                    purchaseOrder = schemas.StrSchema
                    isPublishedOnJobBoard = schemas.BoolSchema
                    note = schemas.StrSchema
                
                    @staticmethod
                    def createdBy() -> typing.Type['UserReference']:
                        return UserReference
                    qualityAssuranceSettings = schemas.DictSchema
                    
                    
                    class workflowSteps(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['ProjectWorkflowStepDto']:
                                return ProjectWorkflowStepDto
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple['ProjectWorkflowStepDto'], typing.List['ProjectWorkflowStepDto']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'workflowSteps':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'ProjectWorkflowStepDto':
                            return super().__getitem__(i)
                    analyseSettings = schemas.DictSchema
                    accessSettings = schemas.DictSchema
                    financialSettings = schemas.DictSchema
                    archived = schemas.BoolSchema
                    __annotations__ = {
                        "shared": shared,
                        "progress": progress,
                        "client": client,
                        "costCenter": costCenter,
                        "businessUnit": businessUnit,
                        "dateDue": dateDue,
                        "status": status,
                        "purchaseOrder": purchaseOrder,
                        "isPublishedOnJobBoard": isPublishedOnJobBoard,
                        "note": note,
                        "createdBy": createdBy,
                        "qualityAssuranceSettings": qualityAssuranceSettings,
                        "workflowSteps": workflowSteps,
                        "analyseSettings": analyseSettings,
                        "accessSettings": accessSettings,
                        "financialSettings": financialSettings,
                        "archived": archived,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["shared"]) -> MetaOapg.properties.shared: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["progress"]) -> 'ProgressDto': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["client"]) -> 'ClientReference': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["costCenter"]) -> 'CostCenterReference': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["businessUnit"]) -> 'BusinessUnitReference': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["dateDue"]) -> MetaOapg.properties.dateDue: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["purchaseOrder"]) -> MetaOapg.properties.purchaseOrder: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["isPublishedOnJobBoard"]) -> MetaOapg.properties.isPublishedOnJobBoard: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["createdBy"]) -> 'UserReference': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["qualityAssuranceSettings"]) -> MetaOapg.properties.qualityAssuranceSettings: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["workflowSteps"]) -> MetaOapg.properties.workflowSteps: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["analyseSettings"]) -> MetaOapg.properties.analyseSettings: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["accessSettings"]) -> MetaOapg.properties.accessSettings: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["financialSettings"]) -> MetaOapg.properties.financialSettings: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["archived"]) -> MetaOapg.properties.archived: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["shared", "progress", "client", "costCenter", "businessUnit", "dateDue", "status", "purchaseOrder", "isPublishedOnJobBoard", "note", "createdBy", "qualityAssuranceSettings", "workflowSteps", "analyseSettings", "accessSettings", "financialSettings", "archived", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["shared"]) -> typing.Union[MetaOapg.properties.shared, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["progress"]) -> typing.Union['ProgressDto', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["client"]) -> typing.Union['ClientReference', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["costCenter"]) -> typing.Union['CostCenterReference', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["businessUnit"]) -> typing.Union['BusinessUnitReference', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["dateDue"]) -> typing.Union[MetaOapg.properties.dateDue, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["purchaseOrder"]) -> typing.Union[MetaOapg.properties.purchaseOrder, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["isPublishedOnJobBoard"]) -> typing.Union[MetaOapg.properties.isPublishedOnJobBoard, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["createdBy"]) -> typing.Union['UserReference', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["qualityAssuranceSettings"]) -> typing.Union[MetaOapg.properties.qualityAssuranceSettings, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["workflowSteps"]) -> typing.Union[MetaOapg.properties.workflowSteps, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["analyseSettings"]) -> typing.Union[MetaOapg.properties.analyseSettings, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["accessSettings"]) -> typing.Union[MetaOapg.properties.accessSettings, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["financialSettings"]) -> typing.Union[MetaOapg.properties.financialSettings, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["archived"]) -> typing.Union[MetaOapg.properties.archived, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["shared", "progress", "client", "costCenter", "businessUnit", "dateDue", "status", "purchaseOrder", "isPublishedOnJobBoard", "note", "createdBy", "qualityAssuranceSettings", "workflowSteps", "analyseSettings", "accessSettings", "financialSettings", "archived", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                shared: typing.Union[MetaOapg.properties.shared, bool, schemas.Unset] = schemas.unset,
                progress: typing.Union['ProgressDto', schemas.Unset] = schemas.unset,
                client: typing.Union['ClientReference', schemas.Unset] = schemas.unset,
                costCenter: typing.Union['CostCenterReference', schemas.Unset] = schemas.unset,
                businessUnit: typing.Union['BusinessUnitReference', schemas.Unset] = schemas.unset,
                dateDue: typing.Union[MetaOapg.properties.dateDue, str, datetime, schemas.Unset] = schemas.unset,
                status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
                purchaseOrder: typing.Union[MetaOapg.properties.purchaseOrder, str, schemas.Unset] = schemas.unset,
                isPublishedOnJobBoard: typing.Union[MetaOapg.properties.isPublishedOnJobBoard, bool, schemas.Unset] = schemas.unset,
                note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
                createdBy: typing.Union['UserReference', schemas.Unset] = schemas.unset,
                qualityAssuranceSettings: typing.Union[MetaOapg.properties.qualityAssuranceSettings, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                workflowSteps: typing.Union[MetaOapg.properties.workflowSteps, list, tuple, schemas.Unset] = schemas.unset,
                analyseSettings: typing.Union[MetaOapg.properties.analyseSettings, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                accessSettings: typing.Union[MetaOapg.properties.accessSettings, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                financialSettings: typing.Union[MetaOapg.properties.financialSettings, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                archived: typing.Union[MetaOapg.properties.archived, bool, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *_args,
                    shared=shared,
                    progress=progress,
                    client=client,
                    costCenter=costCenter,
                    businessUnit=businessUnit,
                    dateDue=dateDue,
                    status=status,
                    purchaseOrder=purchaseOrder,
                    isPublishedOnJobBoard=isPublishedOnJobBoard,
                    note=note,
                    createdBy=createdBy,
                    qualityAssuranceSettings=qualityAssuranceSettings,
                    workflowSteps=workflowSteps,
                    analyseSettings=analyseSettings,
                    accessSettings=accessSettings,
                    financialSettings=financialSettings,
                    archived=archived,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                AbstractProjectDto,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AdminProjectManager':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.abstract_project_dto import AbstractProjectDto
from openapi_client.model.business_unit_reference import BusinessUnitReference
from openapi_client.model.client_reference import ClientReference
from openapi_client.model.cost_center_reference import CostCenterReference
from openapi_client.model.progress_dto import ProgressDto
from openapi_client.model.project_workflow_step_dto import ProjectWorkflowStepDto
from openapi_client.model.user_reference import UserReference
