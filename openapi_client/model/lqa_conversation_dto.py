# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class LQAConversationDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            type = schemas.StrSchema
            dateCreated = schemas.DateTimeSchema
            dateModified = schemas.DateTimeSchema
            dateEdited = schemas.DateTimeSchema
        
            @staticmethod
            def createdBy() -> typing.Type['MentionableUserDto']:
                return MentionableUserDto
            
            
            class comments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CommentDto']:
                        return CommentDto
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['CommentDto'], typing.List['CommentDto']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'comments':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CommentDto':
                    return super().__getitem__(i)
        
            @staticmethod
            def status() -> typing.Type['StatusDto']:
                return StatusDto
            deleted = schemas.BoolSchema
        
            @staticmethod
            def references() -> typing.Type['LQAReferences']:
                return LQAReferences
            lqaDescription = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "type": type,
                "dateCreated": dateCreated,
                "dateModified": dateModified,
                "dateEdited": dateEdited,
                "createdBy": createdBy,
                "comments": comments,
                "status": status,
                "deleted": deleted,
                "references": references,
                "lqaDescription": lqaDescription,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateModified"]) -> MetaOapg.properties.dateModified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateEdited"]) -> MetaOapg.properties.dateEdited: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdBy"]) -> 'MentionableUserDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comments"]) -> MetaOapg.properties.comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'StatusDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleted"]) -> MetaOapg.properties.deleted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["references"]) -> 'LQAReferences': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lqaDescription"]) -> MetaOapg.properties.lqaDescription: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "type", "dateCreated", "dateModified", "dateEdited", "createdBy", "comments", "status", "deleted", "references", "lqaDescription", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> typing.Union[MetaOapg.properties.dateCreated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateModified"]) -> typing.Union[MetaOapg.properties.dateModified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateEdited"]) -> typing.Union[MetaOapg.properties.dateEdited, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdBy"]) -> typing.Union['MentionableUserDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comments"]) -> typing.Union[MetaOapg.properties.comments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['StatusDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleted"]) -> typing.Union[MetaOapg.properties.deleted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["references"]) -> typing.Union['LQAReferences', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lqaDescription"]) -> typing.Union[MetaOapg.properties.lqaDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "type", "dateCreated", "dateModified", "dateEdited", "createdBy", "comments", "status", "deleted", "references", "lqaDescription", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        dateCreated: typing.Union[MetaOapg.properties.dateCreated, str, datetime, schemas.Unset] = schemas.unset,
        dateModified: typing.Union[MetaOapg.properties.dateModified, str, datetime, schemas.Unset] = schemas.unset,
        dateEdited: typing.Union[MetaOapg.properties.dateEdited, str, datetime, schemas.Unset] = schemas.unset,
        createdBy: typing.Union['MentionableUserDto', schemas.Unset] = schemas.unset,
        comments: typing.Union[MetaOapg.properties.comments, list, tuple, schemas.Unset] = schemas.unset,
        status: typing.Union['StatusDto', schemas.Unset] = schemas.unset,
        deleted: typing.Union[MetaOapg.properties.deleted, bool, schemas.Unset] = schemas.unset,
        references: typing.Union['LQAReferences', schemas.Unset] = schemas.unset,
        lqaDescription: typing.Union[MetaOapg.properties.lqaDescription, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LQAConversationDto':
        return super().__new__(
            cls,
            *_args,
            id=id,
            type=type,
            dateCreated=dateCreated,
            dateModified=dateModified,
            dateEdited=dateEdited,
            createdBy=createdBy,
            comments=comments,
            status=status,
            deleted=deleted,
            references=references,
            lqaDescription=lqaDescription,
            _configuration=_configuration,
            **kwargs,
        )

from phrasetms_client.model.comment_dto import CommentDto
from phrasetms_client.model.lqa_references import LQAReferences
from phrasetms_client.model.mentionable_user_dto import MentionableUserDto
from phrasetms_client.model.status_dto import StatusDto
