# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class TermCreateByJobDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "text",
        }
        
        class properties:
            text = schemas.StrSchema
            caseSensitive = schemas.BoolSchema
            exactMatch = schemas.BoolSchema
            forbidden = schemas.BoolSchema
            preferred = schemas.BoolSchema
            usage = schemas.StrSchema
            note = schemas.StrSchema
            shortTranslation = schemas.StrSchema
            
            
            class termType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "FULL_FORM": "FULL_FORM",
                        "SHORT_FORM": "SHORT_FORM",
                        "ACRONYM": "ACRONYM",
                        "ABBREVIATION": "ABBREVIATION",
                        "PHRASE": "PHRASE",
                        "VARIANT": "VARIANT",
                    }
                
                @schemas.classproperty
                def FULL_FORM(cls):
                    return cls("FULL_FORM")
                
                @schemas.classproperty
                def SHORT_FORM(cls):
                    return cls("SHORT_FORM")
                
                @schemas.classproperty
                def ACRONYM(cls):
                    return cls("ACRONYM")
                
                @schemas.classproperty
                def ABBREVIATION(cls):
                    return cls("ABBREVIATION")
                
                @schemas.classproperty
                def PHRASE(cls):
                    return cls("PHRASE")
                
                @schemas.classproperty
                def VARIANT(cls):
                    return cls("VARIANT")
            
            
            class partOfSpeech(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ADJECTIVE": "ADJECTIVE",
                        "NOUN": "NOUN",
                        "VERB": "VERB",
                        "ADVERB": "ADVERB",
                    }
                
                @schemas.classproperty
                def ADJECTIVE(cls):
                    return cls("ADJECTIVE")
                
                @schemas.classproperty
                def NOUN(cls):
                    return cls("NOUN")
                
                @schemas.classproperty
                def VERB(cls):
                    return cls("VERB")
                
                @schemas.classproperty
                def ADVERB(cls):
                    return cls("ADVERB")
            
            
            class gender(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "MASCULINE": "MASCULINE",
                        "FEMININE": "FEMININE",
                        "NEUTRAL": "NEUTRAL",
                    }
                
                @schemas.classproperty
                def MASCULINE(cls):
                    return cls("MASCULINE")
                
                @schemas.classproperty
                def FEMININE(cls):
                    return cls("FEMININE")
                
                @schemas.classproperty
                def NEUTRAL(cls):
                    return cls("NEUTRAL")
            
            
            class number(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "SINGULAR": "SINGULAR",
                        "PLURAL": "PLURAL",
                        "UNCOUNTABLE": "UNCOUNTABLE",
                    }
                
                @schemas.classproperty
                def SINGULAR(cls):
                    return cls("SINGULAR")
                
                @schemas.classproperty
                def PLURAL(cls):
                    return cls("PLURAL")
                
                @schemas.classproperty
                def UNCOUNTABLE(cls):
                    return cls("UNCOUNTABLE")
            __annotations__ = {
                "text": text,
                "caseSensitive": caseSensitive,
                "exactMatch": exactMatch,
                "forbidden": forbidden,
                "preferred": preferred,
                "usage": usage,
                "note": note,
                "shortTranslation": shortTranslation,
                "termType": termType,
                "partOfSpeech": partOfSpeech,
                "gender": gender,
                "number": number,
            }
    
    text: MetaOapg.properties.text
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseSensitive"]) -> MetaOapg.properties.caseSensitive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exactMatch"]) -> MetaOapg.properties.exactMatch: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["forbidden"]) -> MetaOapg.properties.forbidden: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preferred"]) -> MetaOapg.properties.preferred: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usage"]) -> MetaOapg.properties.usage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shortTranslation"]) -> MetaOapg.properties.shortTranslation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["termType"]) -> MetaOapg.properties.termType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partOfSpeech"]) -> MetaOapg.properties.partOfSpeech: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gender"]) -> MetaOapg.properties.gender: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["number"]) -> MetaOapg.properties.number: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["text", "caseSensitive", "exactMatch", "forbidden", "preferred", "usage", "note", "shortTranslation", "termType", "partOfSpeech", "gender", "number", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseSensitive"]) -> typing.Union[MetaOapg.properties.caseSensitive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exactMatch"]) -> typing.Union[MetaOapg.properties.exactMatch, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["forbidden"]) -> typing.Union[MetaOapg.properties.forbidden, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preferred"]) -> typing.Union[MetaOapg.properties.preferred, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usage"]) -> typing.Union[MetaOapg.properties.usage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shortTranslation"]) -> typing.Union[MetaOapg.properties.shortTranslation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["termType"]) -> typing.Union[MetaOapg.properties.termType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partOfSpeech"]) -> typing.Union[MetaOapg.properties.partOfSpeech, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gender"]) -> typing.Union[MetaOapg.properties.gender, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["number"]) -> typing.Union[MetaOapg.properties.number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["text", "caseSensitive", "exactMatch", "forbidden", "preferred", "usage", "note", "shortTranslation", "termType", "partOfSpeech", "gender", "number", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        text: typing.Union[MetaOapg.properties.text, str, ],
        caseSensitive: typing.Union[MetaOapg.properties.caseSensitive, bool, schemas.Unset] = schemas.unset,
        exactMatch: typing.Union[MetaOapg.properties.exactMatch, bool, schemas.Unset] = schemas.unset,
        forbidden: typing.Union[MetaOapg.properties.forbidden, bool, schemas.Unset] = schemas.unset,
        preferred: typing.Union[MetaOapg.properties.preferred, bool, schemas.Unset] = schemas.unset,
        usage: typing.Union[MetaOapg.properties.usage, str, schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        shortTranslation: typing.Union[MetaOapg.properties.shortTranslation, str, schemas.Unset] = schemas.unset,
        termType: typing.Union[MetaOapg.properties.termType, str, schemas.Unset] = schemas.unset,
        partOfSpeech: typing.Union[MetaOapg.properties.partOfSpeech, str, schemas.Unset] = schemas.unset,
        gender: typing.Union[MetaOapg.properties.gender, str, schemas.Unset] = schemas.unset,
        number: typing.Union[MetaOapg.properties.number, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TermCreateByJobDto':
        return super().__new__(
            cls,
            *_args,
            text=text,
            caseSensitive=caseSensitive,
            exactMatch=exactMatch,
            forbidden=forbidden,
            preferred=preferred,
            usage=usage,
            note=note,
            shortTranslation=shortTranslation,
            termType=termType,
            partOfSpeech=partOfSpeech,
            gender=gender,
            number=number,
            _configuration=_configuration,
            **kwargs,
        )
