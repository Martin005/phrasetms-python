# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class AsyncFileOpResponseDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
        
            @staticmethod
            def createdBy() -> typing.Type['UserReference']:
                return UserReference
            dateCreated = schemas.DateTimeSchema
            fileName = schemas.StrSchema
            
            
            class action(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "GUI_UPLOAD": "GUI_UPLOAD",
                        "GUI_DOWNLOAD": "GUI_DOWNLOAD",
                        "GUI_REIMPORT": "GUI_REIMPORT",
                        "GUI_REIMPORT_TARGET": "GUI_REIMPORT_TARGET",
                        "CJ_UPLOAD": "CJ_UPLOAD",
                        "CJ_DOWNLOAD": "CJ_DOWNLOAD",
                        "APC_UPLOAD": "APC_UPLOAD",
                        "APC_DOWNLOAD": "APC_DOWNLOAD",
                        "API_UPLOAD": "API_UPLOAD",
                        "API_DOWNLOAD": "API_DOWNLOAD",
                        "SUBMITTER_PORTAL_DOWNLOAD": "SUBMITTER_PORTAL_DOWNLOAD",
                    }
                
                @schemas.classproperty
                def GUI_UPLOAD(cls):
                    return cls("GUI_UPLOAD")
                
                @schemas.classproperty
                def GUI_DOWNLOAD(cls):
                    return cls("GUI_DOWNLOAD")
                
                @schemas.classproperty
                def GUI_REIMPORT(cls):
                    return cls("GUI_REIMPORT")
                
                @schemas.classproperty
                def GUI_REIMPORT_TARGET(cls):
                    return cls("GUI_REIMPORT_TARGET")
                
                @schemas.classproperty
                def CJ_UPLOAD(cls):
                    return cls("CJ_UPLOAD")
                
                @schemas.classproperty
                def CJ_DOWNLOAD(cls):
                    return cls("CJ_DOWNLOAD")
                
                @schemas.classproperty
                def APC_UPLOAD(cls):
                    return cls("APC_UPLOAD")
                
                @schemas.classproperty
                def APC_DOWNLOAD(cls):
                    return cls("APC_DOWNLOAD")
                
                @schemas.classproperty
                def API_UPLOAD(cls):
                    return cls("API_UPLOAD")
                
                @schemas.classproperty
                def API_DOWNLOAD(cls):
                    return cls("API_DOWNLOAD")
                
                @schemas.classproperty
                def SUBMITTER_PORTAL_DOWNLOAD(cls):
                    return cls("SUBMITTER_PORTAL_DOWNLOAD")
            __annotations__ = {
                "id": id,
                "createdBy": createdBy,
                "dateCreated": dateCreated,
                "fileName": fileName,
                "action": action,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdBy"]) -> 'UserReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fileName"]) -> MetaOapg.properties.fileName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["action"]) -> MetaOapg.properties.action: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "createdBy", "dateCreated", "fileName", "action", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdBy"]) -> typing.Union['UserReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> typing.Union[MetaOapg.properties.dateCreated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fileName"]) -> typing.Union[MetaOapg.properties.fileName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["action"]) -> typing.Union[MetaOapg.properties.action, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "createdBy", "dateCreated", "fileName", "action", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        createdBy: typing.Union['UserReference', schemas.Unset] = schemas.unset,
        dateCreated: typing.Union[MetaOapg.properties.dateCreated, str, datetime, schemas.Unset] = schemas.unset,
        fileName: typing.Union[MetaOapg.properties.fileName, str, schemas.Unset] = schemas.unset,
        action: typing.Union[MetaOapg.properties.action, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AsyncFileOpResponseDto':
        return super().__new__(
            cls,
            *_args,
            id=id,
            createdBy=createdBy,
            dateCreated=dateCreated,
            fileName=fileName,
            action=action,
            _configuration=_configuration,
            **kwargs,
        )

from phrasetms_client.model.user_reference import UserReference
