# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class AbstractConnectorDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "name",
            "type",
        }
        
        @staticmethod
        def discriminator():
            return {
                'type': {
                    'AdobeExperienceManager': AdobeExperienceManager,
                    'AmazonS3': AmazonS3,
                    'BitbucketServer': BitbucketServer,
                    'Contentstack': Contentstack,
                    'Ftp': Ftp,
                    'Git': Git,
                    'GitLab': GitLab,
                    'Joomla': Joomla,
                    'Kentico': Kentico,
                    'Magento': Magento,
                    'Marketo': Marketo,
                    'MicrosoftAzure': MicrosoftAzure,
                    'Sftp': Sftp,
                    'Sitecore': Sitecore,
                    'Tridion': Tridion,
                    'Typo3': Typo3,
                    'Wordpress': Wordpress,
                }
            }
        
        class properties:
            
            
            class name(
                schemas.StrSchema
            ):
                pass
            type = schemas.StrSchema
            __annotations__ = {
                "name": name,
                "type": type,
            }
    
    name: MetaOapg.properties.name
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AbstractConnectorDto':
        return super().__new__(
            cls,
            *_args,
            name=name,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )

from phrasetms_client.model.adobe_experience_manager import AdobeExperienceManager
from phrasetms_client.model.amazon_s3 import AmazonS3
from phrasetms_client.model.bitbucket_server import BitbucketServer
from phrasetms_client.model.contentstack import Contentstack
from phrasetms_client.model.ftp import Ftp
from phrasetms_client.model.git import Git
from phrasetms_client.model.git_lab import GitLab
from phrasetms_client.model.joomla import Joomla
from phrasetms_client.model.kentico import Kentico
from phrasetms_client.model.magento import Magento
from phrasetms_client.model.marketo import Marketo
from phrasetms_client.model.microsoft_azure import MicrosoftAzure
from phrasetms_client.model.sftp import Sftp
from phrasetms_client.model.sitecore import Sitecore
from phrasetms_client.model.tridion import Tridion
from phrasetms_client.model.typo3 import Typo3
from phrasetms_client.model.wordpress import Wordpress
