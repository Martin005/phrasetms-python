# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class CustomFieldInstanceDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            uid = schemas.StrSchema
        
            @staticmethod
            def customField() -> typing.Type['CustomFieldDto']:
                return CustomFieldDto
            
            
            class selectedOptions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CustomFieldOptionDto']:
                        return CustomFieldOptionDto
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['CustomFieldOptionDto'], typing.List['CustomFieldOptionDto']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'selectedOptions':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CustomFieldOptionDto':
                    return super().__getitem__(i)
            value = schemas.StrSchema
            createdAt = schemas.DateTimeSchema
        
            @staticmethod
            def createdBy() -> typing.Type['UidReference']:
                return UidReference
            updatedAt = schemas.DateTimeSchema
        
            @staticmethod
            def updatedBy() -> typing.Type['UidReference']:
                return UidReference
            __annotations__ = {
                "uid": uid,
                "customField": customField,
                "selectedOptions": selectedOptions,
                "value": value,
                "createdAt": createdAt,
                "createdBy": createdBy,
                "updatedAt": updatedAt,
                "updatedBy": updatedBy,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uid"]) -> MetaOapg.properties.uid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customField"]) -> 'CustomFieldDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["selectedOptions"]) -> MetaOapg.properties.selectedOptions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdBy"]) -> 'UidReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedAt"]) -> MetaOapg.properties.updatedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedBy"]) -> 'UidReference': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["uid", "customField", "selectedOptions", "value", "createdAt", "createdBy", "updatedAt", "updatedBy", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uid"]) -> typing.Union[MetaOapg.properties.uid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customField"]) -> typing.Union['CustomFieldDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["selectedOptions"]) -> typing.Union[MetaOapg.properties.selectedOptions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> typing.Union[MetaOapg.properties.createdAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdBy"]) -> typing.Union['UidReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedAt"]) -> typing.Union[MetaOapg.properties.updatedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedBy"]) -> typing.Union['UidReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["uid", "customField", "selectedOptions", "value", "createdAt", "createdBy", "updatedAt", "updatedBy", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        uid: typing.Union[MetaOapg.properties.uid, str, schemas.Unset] = schemas.unset,
        customField: typing.Union['CustomFieldDto', schemas.Unset] = schemas.unset,
        selectedOptions: typing.Union[MetaOapg.properties.selectedOptions, list, tuple, schemas.Unset] = schemas.unset,
        value: typing.Union[MetaOapg.properties.value, str, schemas.Unset] = schemas.unset,
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, datetime, schemas.Unset] = schemas.unset,
        createdBy: typing.Union['UidReference', schemas.Unset] = schemas.unset,
        updatedAt: typing.Union[MetaOapg.properties.updatedAt, str, datetime, schemas.Unset] = schemas.unset,
        updatedBy: typing.Union['UidReference', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CustomFieldInstanceDto':
        return super().__new__(
            cls,
            *_args,
            uid=uid,
            customField=customField,
            selectedOptions=selectedOptions,
            value=value,
            createdAt=createdAt,
            createdBy=createdBy,
            updatedAt=updatedAt,
            updatedBy=updatedBy,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.custom_field_dto import CustomFieldDto
from openapi_client.model.custom_field_option_dto import CustomFieldOptionDto
from openapi_client.model.uid_reference import UidReference
