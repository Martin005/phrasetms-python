# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class QACheckDtoV2(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "name",
            "type",
        }
        
        @staticmethod
        def discriminator():
            return {
                'type': {
                    'MORAVIA': MORAVIA,
                    'NUMBER': NUMBER,
                    'REGEX': REGEX,
                    'STRING': STRING,
                    'VOID': VOID,
                }
            }
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "VOID": "VOID",
                        "NUMBER": "NUMBER",
                        "STRING": "STRING",
                        "REGEX": "REGEX",
                        "MORAVIA": "MORAVIA",
                    }
                
                @schemas.classproperty
                def VOID(cls):
                    return cls("VOID")
                
                @schemas.classproperty
                def NUMBER(cls):
                    return cls("NUMBER")
                
                @schemas.classproperty
                def STRING(cls):
                    return cls("STRING")
                
                @schemas.classproperty
                def REGEX(cls):
                    return cls("REGEX")
                
                @schemas.classproperty
                def MORAVIA(cls):
                    return cls("MORAVIA")
            
            
            class name(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "emptyTarget": "EMPTY_TARGET",
                        "inconsistentTranslation": "INCONSISTENT_TRANSLATION",
                        "joinMarksInconsistency": "JOIN_MARKS_INCONSISTENCY",
                        "missingNumber": "MISSING_NUMBER",
                        "segmentNotConfirmed": "SEGMENT_NOT_CONFIRMED",
                        "nonConformingTerms": "NON_CONFORMING_TERMS",
                        "multipleSpaces": "MULTIPLE_SPACES",
                        "endPunctuation": "END_PUNCTUATION",
                        "targetLength": "TARGET_LENGTH",
                        "absoluteTargetLength": "ABSOLUTE_TARGET_LENGTH",
                        "relativeTargetLength": "RELATIVE_TARGET_LENGTH",
                        "inconsistentFormatting": "INCONSISTENT_FORMATTING",
                        "unresolvedComment": "UNRESOLVED_COMMENT",
                        "emptyPairTags": "EMPTY_PAIR_TAGS",
                        "strictJobStatus": "STRICT_JOB_STATUS",
                        "forbiddenStringsEnabled": "FORBIDDEN_STRINGS_ENABLED",
                        "excludeLockedSegments": "EXCLUDE_LOCKED_SEGMENTS",
                        "ignoreNotApprovedTerms": "IGNORE_NOT_APPROVED_TERMS",
                        "spellCheck": "SPELL_CHECK",
                        "repeatedWords": "REPEATED_WORDS",
                        "inconsistentTagContent": "INCONSISTENT_TAG_CONTENT",
                        "emptyTagContent": "EMPTY_TAG_CONTENT",
                        "malformed": "MALFORMED",
                        "forbiddenTerms": "FORBIDDEN_TERMS",
                        "targetLengthPercent": "TARGET_LENGTH_PERCENT",
                        "targetLengthPerSegment": "TARGET_LENGTH_PER_SEGMENT",
                        "newerAtLowerLevel": "NEWER_AT_LOWER_LEVEL",
                        "leadingAndTrailingSpaces": "LEADING_AND_TRAILING_SPACES",
                        "targetSourceIdentical": "TARGET_SOURCE_IDENTICAL",
                        "ignoreInAllWorkflowSteps": "IGNORE_IN_ALL_WORKFLOW_STEPS",
                        "regexp": "REGEXP",
                        "unmodifiedFuzzyTranslation": "UNMODIFIED_FUZZY_TRANSLATION",
                        "unmodifiedFuzzyTranslationTM": "UNMODIFIED_FUZZY_TRANSLATION_TM",
                        "unmodifiedFuzzyTranslationMTNT": "UNMODIFIED_FUZZY_TRANSLATION_MTNT",
                        "moravia": "MORAVIA",
                        "extraNumbers": "EXTRA_NUMBERS",
                        "nestedTags": "NESTED_TAGS",
                    }
                
                @schemas.classproperty
                def EMPTY_TARGET(cls):
                    return cls("emptyTarget")
                
                @schemas.classproperty
                def INCONSISTENT_TRANSLATION(cls):
                    return cls("inconsistentTranslation")
                
                @schemas.classproperty
                def JOIN_MARKS_INCONSISTENCY(cls):
                    return cls("joinMarksInconsistency")
                
                @schemas.classproperty
                def MISSING_NUMBER(cls):
                    return cls("missingNumber")
                
                @schemas.classproperty
                def SEGMENT_NOT_CONFIRMED(cls):
                    return cls("segmentNotConfirmed")
                
                @schemas.classproperty
                def NON_CONFORMING_TERMS(cls):
                    return cls("nonConformingTerms")
                
                @schemas.classproperty
                def MULTIPLE_SPACES(cls):
                    return cls("multipleSpaces")
                
                @schemas.classproperty
                def END_PUNCTUATION(cls):
                    return cls("endPunctuation")
                
                @schemas.classproperty
                def TARGET_LENGTH(cls):
                    return cls("targetLength")
                
                @schemas.classproperty
                def ABSOLUTE_TARGET_LENGTH(cls):
                    return cls("absoluteTargetLength")
                
                @schemas.classproperty
                def RELATIVE_TARGET_LENGTH(cls):
                    return cls("relativeTargetLength")
                
                @schemas.classproperty
                def INCONSISTENT_FORMATTING(cls):
                    return cls("inconsistentFormatting")
                
                @schemas.classproperty
                def UNRESOLVED_COMMENT(cls):
                    return cls("unresolvedComment")
                
                @schemas.classproperty
                def EMPTY_PAIR_TAGS(cls):
                    return cls("emptyPairTags")
                
                @schemas.classproperty
                def STRICT_JOB_STATUS(cls):
                    return cls("strictJobStatus")
                
                @schemas.classproperty
                def FORBIDDEN_STRINGS_ENABLED(cls):
                    return cls("forbiddenStringsEnabled")
                
                @schemas.classproperty
                def EXCLUDE_LOCKED_SEGMENTS(cls):
                    return cls("excludeLockedSegments")
                
                @schemas.classproperty
                def IGNORE_NOT_APPROVED_TERMS(cls):
                    return cls("ignoreNotApprovedTerms")
                
                @schemas.classproperty
                def SPELL_CHECK(cls):
                    return cls("spellCheck")
                
                @schemas.classproperty
                def REPEATED_WORDS(cls):
                    return cls("repeatedWords")
                
                @schemas.classproperty
                def INCONSISTENT_TAG_CONTENT(cls):
                    return cls("inconsistentTagContent")
                
                @schemas.classproperty
                def EMPTY_TAG_CONTENT(cls):
                    return cls("emptyTagContent")
                
                @schemas.classproperty
                def MALFORMED(cls):
                    return cls("malformed")
                
                @schemas.classproperty
                def FORBIDDEN_TERMS(cls):
                    return cls("forbiddenTerms")
                
                @schemas.classproperty
                def TARGET_LENGTH_PERCENT(cls):
                    return cls("targetLengthPercent")
                
                @schemas.classproperty
                def TARGET_LENGTH_PER_SEGMENT(cls):
                    return cls("targetLengthPerSegment")
                
                @schemas.classproperty
                def NEWER_AT_LOWER_LEVEL(cls):
                    return cls("newerAtLowerLevel")
                
                @schemas.classproperty
                def LEADING_AND_TRAILING_SPACES(cls):
                    return cls("leadingAndTrailingSpaces")
                
                @schemas.classproperty
                def TARGET_SOURCE_IDENTICAL(cls):
                    return cls("targetSourceIdentical")
                
                @schemas.classproperty
                def IGNORE_IN_ALL_WORKFLOW_STEPS(cls):
                    return cls("ignoreInAllWorkflowSteps")
                
                @schemas.classproperty
                def REGEXP(cls):
                    return cls("regexp")
                
                @schemas.classproperty
                def UNMODIFIED_FUZZY_TRANSLATION(cls):
                    return cls("unmodifiedFuzzyTranslation")
                
                @schemas.classproperty
                def UNMODIFIED_FUZZY_TRANSLATION_TM(cls):
                    return cls("unmodifiedFuzzyTranslationTM")
                
                @schemas.classproperty
                def UNMODIFIED_FUZZY_TRANSLATION_MTNT(cls):
                    return cls("unmodifiedFuzzyTranslationMTNT")
                
                @schemas.classproperty
                def MORAVIA(cls):
                    return cls("moravia")
                
                @schemas.classproperty
                def EXTRA_NUMBERS(cls):
                    return cls("extraNumbers")
                
                @schemas.classproperty
                def NESTED_TAGS(cls):
                    return cls("nestedTags")
            __annotations__ = {
                "type": type,
                "name": name,
            }
    
    name: MetaOapg.properties.name
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "name", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "name", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'QACheckDtoV2':
        return super().__new__(
            cls,
            *_args,
            name=name,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.moravia import MORAVIA
from openapi_client.model.number import NUMBER
from openapi_client.model.regex import REGEX
from openapi_client.model.string import STRING
from openapi_client.model.void import VOID
