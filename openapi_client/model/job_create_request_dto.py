# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class JobCreateRequestDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "targetLangs",
        }
        
        class properties:
            
            
            class targetLangs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'targetLangs':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            due = schemas.DateTimeSchema
            
            
            class workflowSettings(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['WorkflowStepConfiguration']:
                        return WorkflowStepConfiguration
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['WorkflowStepConfiguration'], typing.List['WorkflowStepConfiguration']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'workflowSettings':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'WorkflowStepConfiguration':
                    return super().__getitem__(i)
            
            
            class assignments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ProvidersPerLanguage']:
                        return ProvidersPerLanguage
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ProvidersPerLanguage'], typing.List['ProvidersPerLanguage']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'assignments':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ProvidersPerLanguage':
                    return super().__getitem__(i)
        
            @staticmethod
            def importSettings() -> typing.Type['UidReference']:
                return UidReference
            useProjectFileImportSettings = schemas.BoolSchema
            preTranslate = schemas.BoolSchema
        
            @staticmethod
            def notifyProvider() -> typing.Type['NotifyProviderDto']:
                return NotifyProviderDto
            callbackUrl = schemas.StrSchema
            
            
            class path(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 0
        
            @staticmethod
            def remoteFile() -> typing.Type['JobCreateRemoteFileDto']:
                return JobCreateRemoteFileDto
            __annotations__ = {
                "targetLangs": targetLangs,
                "due": due,
                "workflowSettings": workflowSettings,
                "assignments": assignments,
                "importSettings": importSettings,
                "useProjectFileImportSettings": useProjectFileImportSettings,
                "preTranslate": preTranslate,
                "notifyProvider": notifyProvider,
                "callbackUrl": callbackUrl,
                "path": path,
                "remoteFile": remoteFile,
            }
    
    targetLangs: MetaOapg.properties.targetLangs
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetLangs"]) -> MetaOapg.properties.targetLangs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["due"]) -> MetaOapg.properties.due: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowSettings"]) -> MetaOapg.properties.workflowSettings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assignments"]) -> MetaOapg.properties.assignments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["importSettings"]) -> 'UidReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["useProjectFileImportSettings"]) -> MetaOapg.properties.useProjectFileImportSettings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preTranslate"]) -> MetaOapg.properties.preTranslate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notifyProvider"]) -> 'NotifyProviderDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["callbackUrl"]) -> MetaOapg.properties.callbackUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remoteFile"]) -> 'JobCreateRemoteFileDto': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["targetLangs", "due", "workflowSettings", "assignments", "importSettings", "useProjectFileImportSettings", "preTranslate", "notifyProvider", "callbackUrl", "path", "remoteFile", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetLangs"]) -> MetaOapg.properties.targetLangs: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["due"]) -> typing.Union[MetaOapg.properties.due, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowSettings"]) -> typing.Union[MetaOapg.properties.workflowSettings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assignments"]) -> typing.Union[MetaOapg.properties.assignments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["importSettings"]) -> typing.Union['UidReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["useProjectFileImportSettings"]) -> typing.Union[MetaOapg.properties.useProjectFileImportSettings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preTranslate"]) -> typing.Union[MetaOapg.properties.preTranslate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notifyProvider"]) -> typing.Union['NotifyProviderDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["callbackUrl"]) -> typing.Union[MetaOapg.properties.callbackUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["path"]) -> typing.Union[MetaOapg.properties.path, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remoteFile"]) -> typing.Union['JobCreateRemoteFileDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["targetLangs", "due", "workflowSettings", "assignments", "importSettings", "useProjectFileImportSettings", "preTranslate", "notifyProvider", "callbackUrl", "path", "remoteFile", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        targetLangs: typing.Union[MetaOapg.properties.targetLangs, list, tuple, ],
        due: typing.Union[MetaOapg.properties.due, str, datetime, schemas.Unset] = schemas.unset,
        workflowSettings: typing.Union[MetaOapg.properties.workflowSettings, list, tuple, schemas.Unset] = schemas.unset,
        assignments: typing.Union[MetaOapg.properties.assignments, list, tuple, schemas.Unset] = schemas.unset,
        importSettings: typing.Union['UidReference', schemas.Unset] = schemas.unset,
        useProjectFileImportSettings: typing.Union[MetaOapg.properties.useProjectFileImportSettings, bool, schemas.Unset] = schemas.unset,
        preTranslate: typing.Union[MetaOapg.properties.preTranslate, bool, schemas.Unset] = schemas.unset,
        notifyProvider: typing.Union['NotifyProviderDto', schemas.Unset] = schemas.unset,
        callbackUrl: typing.Union[MetaOapg.properties.callbackUrl, str, schemas.Unset] = schemas.unset,
        path: typing.Union[MetaOapg.properties.path, str, schemas.Unset] = schemas.unset,
        remoteFile: typing.Union['JobCreateRemoteFileDto', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JobCreateRequestDto':
        return super().__new__(
            cls,
            *_args,
            targetLangs=targetLangs,
            due=due,
            workflowSettings=workflowSettings,
            assignments=assignments,
            importSettings=importSettings,
            useProjectFileImportSettings=useProjectFileImportSettings,
            preTranslate=preTranslate,
            notifyProvider=notifyProvider,
            callbackUrl=callbackUrl,
            path=path,
            remoteFile=remoteFile,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.job_create_remote_file_dto import JobCreateRemoteFileDto
from openapi_client.model.notify_provider_dto import NotifyProviderDto
from openapi_client.model.providers_per_language import ProvidersPerLanguage
from openapi_client.model.uid_reference import UidReference
from openapi_client.model.workflow_step_configuration import WorkflowStepConfiguration
