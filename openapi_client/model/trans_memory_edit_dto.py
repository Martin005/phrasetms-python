# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class TransMemoryEditDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "name",
            "targetLangs",
        }
        
        class properties:
            
            
            class name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 0
            
            
            class targetLangs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'targetLangs':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def client() -> typing.Type['IdReference']:
                return IdReference
        
            @staticmethod
            def businessUnit() -> typing.Type['IdReference']:
                return IdReference
        
            @staticmethod
            def domain() -> typing.Type['IdReference']:
                return IdReference
        
            @staticmethod
            def subDomain() -> typing.Type['IdReference']:
                return IdReference
        
            @staticmethod
            def owner() -> typing.Type['IdReference']:
                return IdReference
            
            
            class note(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 4096
                    min_length = 0
            __annotations__ = {
                "name": name,
                "targetLangs": targetLangs,
                "client": client,
                "businessUnit": businessUnit,
                "domain": domain,
                "subDomain": subDomain,
                "owner": owner,
                "note": note,
            }
    
    name: MetaOapg.properties.name
    targetLangs: MetaOapg.properties.targetLangs
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetLangs"]) -> MetaOapg.properties.targetLangs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client"]) -> 'IdReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["businessUnit"]) -> 'IdReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain"]) -> 'IdReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subDomain"]) -> 'IdReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> 'IdReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "targetLangs", "client", "businessUnit", "domain", "subDomain", "owner", "note", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetLangs"]) -> MetaOapg.properties.targetLangs: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client"]) -> typing.Union['IdReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["businessUnit"]) -> typing.Union['IdReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domain"]) -> typing.Union['IdReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subDomain"]) -> typing.Union['IdReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union['IdReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "targetLangs", "client", "businessUnit", "domain", "subDomain", "owner", "note", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        targetLangs: typing.Union[MetaOapg.properties.targetLangs, list, tuple, ],
        client: typing.Union['IdReference', schemas.Unset] = schemas.unset,
        businessUnit: typing.Union['IdReference', schemas.Unset] = schemas.unset,
        domain: typing.Union['IdReference', schemas.Unset] = schemas.unset,
        subDomain: typing.Union['IdReference', schemas.Unset] = schemas.unset,
        owner: typing.Union['IdReference', schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TransMemoryEditDto':
        return super().__new__(
            cls,
            *_args,
            name=name,
            targetLangs=targetLangs,
            client=client,
            businessUnit=businessUnit,
            domain=domain,
            subDomain=subDomain,
            owner=owner,
            note=note,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.id_reference import IdReference
