# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class XlfSettingsDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            icuSubFilter = schemas.BoolSchema
            importNotes = schemas.BoolSchema
            segmentation = schemas.BoolSchema
            skipImportRules = schemas.StrSchema
            importAsConfirmedRules = schemas.StrSchema
            importAsLockedRules = schemas.StrSchema
            exportAttrsWhenConfirmedAndLocked = schemas.StrSchema
            exportAttrsWhenConfirmedAndNotLocked = schemas.StrSchema
            exportAttrsWhenNotConfirmedAndLocked = schemas.StrSchema
            exportAttrsWhenNotConfirmedAndNotLocked = schemas.StrSchema
            saveConfirmedSegments = schemas.BoolSchema
            lineBreakTags = schemas.BoolSchema
            preserveWhitespace = schemas.BoolSchema
            contextType = schemas.StrSchema
            preserveCharEntities = schemas.StrSchema
            copySourceToTargetIfNotImported = schemas.BoolSchema
            importXPath = schemas.StrSchema
            importAsConfirmedXPath = schemas.StrSchema
            importAsLockedXPath = schemas.StrSchema
            xslUrl = schemas.StrSchema
            xslFile = schemas.StrSchema
            tagRegexp = schemas.StrSchema
            __annotations__ = {
                "icuSubFilter": icuSubFilter,
                "importNotes": importNotes,
                "segmentation": segmentation,
                "skipImportRules": skipImportRules,
                "importAsConfirmedRules": importAsConfirmedRules,
                "importAsLockedRules": importAsLockedRules,
                "exportAttrsWhenConfirmedAndLocked": exportAttrsWhenConfirmedAndLocked,
                "exportAttrsWhenConfirmedAndNotLocked": exportAttrsWhenConfirmedAndNotLocked,
                "exportAttrsWhenNotConfirmedAndLocked": exportAttrsWhenNotConfirmedAndLocked,
                "exportAttrsWhenNotConfirmedAndNotLocked": exportAttrsWhenNotConfirmedAndNotLocked,
                "saveConfirmedSegments": saveConfirmedSegments,
                "lineBreakTags": lineBreakTags,
                "preserveWhitespace": preserveWhitespace,
                "contextType": contextType,
                "preserveCharEntities": preserveCharEntities,
                "copySourceToTargetIfNotImported": copySourceToTargetIfNotImported,
                "importXPath": importXPath,
                "importAsConfirmedXPath": importAsConfirmedXPath,
                "importAsLockedXPath": importAsLockedXPath,
                "xslUrl": xslUrl,
                "xslFile": xslFile,
                "tagRegexp": tagRegexp,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["icuSubFilter"]) -> MetaOapg.properties.icuSubFilter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["importNotes"]) -> MetaOapg.properties.importNotes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["segmentation"]) -> MetaOapg.properties.segmentation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skipImportRules"]) -> MetaOapg.properties.skipImportRules: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["importAsConfirmedRules"]) -> MetaOapg.properties.importAsConfirmedRules: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["importAsLockedRules"]) -> MetaOapg.properties.importAsLockedRules: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exportAttrsWhenConfirmedAndLocked"]) -> MetaOapg.properties.exportAttrsWhenConfirmedAndLocked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exportAttrsWhenConfirmedAndNotLocked"]) -> MetaOapg.properties.exportAttrsWhenConfirmedAndNotLocked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exportAttrsWhenNotConfirmedAndLocked"]) -> MetaOapg.properties.exportAttrsWhenNotConfirmedAndLocked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exportAttrsWhenNotConfirmedAndNotLocked"]) -> MetaOapg.properties.exportAttrsWhenNotConfirmedAndNotLocked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["saveConfirmedSegments"]) -> MetaOapg.properties.saveConfirmedSegments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lineBreakTags"]) -> MetaOapg.properties.lineBreakTags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preserveWhitespace"]) -> MetaOapg.properties.preserveWhitespace: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contextType"]) -> MetaOapg.properties.contextType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preserveCharEntities"]) -> MetaOapg.properties.preserveCharEntities: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["copySourceToTargetIfNotImported"]) -> MetaOapg.properties.copySourceToTargetIfNotImported: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["importXPath"]) -> MetaOapg.properties.importXPath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["importAsConfirmedXPath"]) -> MetaOapg.properties.importAsConfirmedXPath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["importAsLockedXPath"]) -> MetaOapg.properties.importAsLockedXPath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["xslUrl"]) -> MetaOapg.properties.xslUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["xslFile"]) -> MetaOapg.properties.xslFile: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tagRegexp"]) -> MetaOapg.properties.tagRegexp: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["icuSubFilter", "importNotes", "segmentation", "skipImportRules", "importAsConfirmedRules", "importAsLockedRules", "exportAttrsWhenConfirmedAndLocked", "exportAttrsWhenConfirmedAndNotLocked", "exportAttrsWhenNotConfirmedAndLocked", "exportAttrsWhenNotConfirmedAndNotLocked", "saveConfirmedSegments", "lineBreakTags", "preserveWhitespace", "contextType", "preserveCharEntities", "copySourceToTargetIfNotImported", "importXPath", "importAsConfirmedXPath", "importAsLockedXPath", "xslUrl", "xslFile", "tagRegexp", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["icuSubFilter"]) -> typing.Union[MetaOapg.properties.icuSubFilter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["importNotes"]) -> typing.Union[MetaOapg.properties.importNotes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["segmentation"]) -> typing.Union[MetaOapg.properties.segmentation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skipImportRules"]) -> typing.Union[MetaOapg.properties.skipImportRules, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["importAsConfirmedRules"]) -> typing.Union[MetaOapg.properties.importAsConfirmedRules, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["importAsLockedRules"]) -> typing.Union[MetaOapg.properties.importAsLockedRules, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exportAttrsWhenConfirmedAndLocked"]) -> typing.Union[MetaOapg.properties.exportAttrsWhenConfirmedAndLocked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exportAttrsWhenConfirmedAndNotLocked"]) -> typing.Union[MetaOapg.properties.exportAttrsWhenConfirmedAndNotLocked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exportAttrsWhenNotConfirmedAndLocked"]) -> typing.Union[MetaOapg.properties.exportAttrsWhenNotConfirmedAndLocked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exportAttrsWhenNotConfirmedAndNotLocked"]) -> typing.Union[MetaOapg.properties.exportAttrsWhenNotConfirmedAndNotLocked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["saveConfirmedSegments"]) -> typing.Union[MetaOapg.properties.saveConfirmedSegments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lineBreakTags"]) -> typing.Union[MetaOapg.properties.lineBreakTags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preserveWhitespace"]) -> typing.Union[MetaOapg.properties.preserveWhitespace, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contextType"]) -> typing.Union[MetaOapg.properties.contextType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preserveCharEntities"]) -> typing.Union[MetaOapg.properties.preserveCharEntities, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["copySourceToTargetIfNotImported"]) -> typing.Union[MetaOapg.properties.copySourceToTargetIfNotImported, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["importXPath"]) -> typing.Union[MetaOapg.properties.importXPath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["importAsConfirmedXPath"]) -> typing.Union[MetaOapg.properties.importAsConfirmedXPath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["importAsLockedXPath"]) -> typing.Union[MetaOapg.properties.importAsLockedXPath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["xslUrl"]) -> typing.Union[MetaOapg.properties.xslUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["xslFile"]) -> typing.Union[MetaOapg.properties.xslFile, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tagRegexp"]) -> typing.Union[MetaOapg.properties.tagRegexp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["icuSubFilter", "importNotes", "segmentation", "skipImportRules", "importAsConfirmedRules", "importAsLockedRules", "exportAttrsWhenConfirmedAndLocked", "exportAttrsWhenConfirmedAndNotLocked", "exportAttrsWhenNotConfirmedAndLocked", "exportAttrsWhenNotConfirmedAndNotLocked", "saveConfirmedSegments", "lineBreakTags", "preserveWhitespace", "contextType", "preserveCharEntities", "copySourceToTargetIfNotImported", "importXPath", "importAsConfirmedXPath", "importAsLockedXPath", "xslUrl", "xslFile", "tagRegexp", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        icuSubFilter: typing.Union[MetaOapg.properties.icuSubFilter, bool, schemas.Unset] = schemas.unset,
        importNotes: typing.Union[MetaOapg.properties.importNotes, bool, schemas.Unset] = schemas.unset,
        segmentation: typing.Union[MetaOapg.properties.segmentation, bool, schemas.Unset] = schemas.unset,
        skipImportRules: typing.Union[MetaOapg.properties.skipImportRules, str, schemas.Unset] = schemas.unset,
        importAsConfirmedRules: typing.Union[MetaOapg.properties.importAsConfirmedRules, str, schemas.Unset] = schemas.unset,
        importAsLockedRules: typing.Union[MetaOapg.properties.importAsLockedRules, str, schemas.Unset] = schemas.unset,
        exportAttrsWhenConfirmedAndLocked: typing.Union[MetaOapg.properties.exportAttrsWhenConfirmedAndLocked, str, schemas.Unset] = schemas.unset,
        exportAttrsWhenConfirmedAndNotLocked: typing.Union[MetaOapg.properties.exportAttrsWhenConfirmedAndNotLocked, str, schemas.Unset] = schemas.unset,
        exportAttrsWhenNotConfirmedAndLocked: typing.Union[MetaOapg.properties.exportAttrsWhenNotConfirmedAndLocked, str, schemas.Unset] = schemas.unset,
        exportAttrsWhenNotConfirmedAndNotLocked: typing.Union[MetaOapg.properties.exportAttrsWhenNotConfirmedAndNotLocked, str, schemas.Unset] = schemas.unset,
        saveConfirmedSegments: typing.Union[MetaOapg.properties.saveConfirmedSegments, bool, schemas.Unset] = schemas.unset,
        lineBreakTags: typing.Union[MetaOapg.properties.lineBreakTags, bool, schemas.Unset] = schemas.unset,
        preserveWhitespace: typing.Union[MetaOapg.properties.preserveWhitespace, bool, schemas.Unset] = schemas.unset,
        contextType: typing.Union[MetaOapg.properties.contextType, str, schemas.Unset] = schemas.unset,
        preserveCharEntities: typing.Union[MetaOapg.properties.preserveCharEntities, str, schemas.Unset] = schemas.unset,
        copySourceToTargetIfNotImported: typing.Union[MetaOapg.properties.copySourceToTargetIfNotImported, bool, schemas.Unset] = schemas.unset,
        importXPath: typing.Union[MetaOapg.properties.importXPath, str, schemas.Unset] = schemas.unset,
        importAsConfirmedXPath: typing.Union[MetaOapg.properties.importAsConfirmedXPath, str, schemas.Unset] = schemas.unset,
        importAsLockedXPath: typing.Union[MetaOapg.properties.importAsLockedXPath, str, schemas.Unset] = schemas.unset,
        xslUrl: typing.Union[MetaOapg.properties.xslUrl, str, schemas.Unset] = schemas.unset,
        xslFile: typing.Union[MetaOapg.properties.xslFile, str, schemas.Unset] = schemas.unset,
        tagRegexp: typing.Union[MetaOapg.properties.tagRegexp, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XlfSettingsDto':
        return super().__new__(
            cls,
            *_args,
            icuSubFilter=icuSubFilter,
            importNotes=importNotes,
            segmentation=segmentation,
            skipImportRules=skipImportRules,
            importAsConfirmedRules=importAsConfirmedRules,
            importAsLockedRules=importAsLockedRules,
            exportAttrsWhenConfirmedAndLocked=exportAttrsWhenConfirmedAndLocked,
            exportAttrsWhenConfirmedAndNotLocked=exportAttrsWhenConfirmedAndNotLocked,
            exportAttrsWhenNotConfirmedAndLocked=exportAttrsWhenNotConfirmedAndLocked,
            exportAttrsWhenNotConfirmedAndNotLocked=exportAttrsWhenNotConfirmedAndNotLocked,
            saveConfirmedSegments=saveConfirmedSegments,
            lineBreakTags=lineBreakTags,
            preserveWhitespace=preserveWhitespace,
            contextType=contextType,
            preserveCharEntities=preserveCharEntities,
            copySourceToTargetIfNotImported=copySourceToTargetIfNotImported,
            importXPath=importXPath,
            importAsConfirmedXPath=importAsConfirmedXPath,
            importAsLockedXPath=importAsLockedXPath,
            xslUrl=xslUrl,
            xslFile=xslFile,
            tagRegexp=tagRegexp,
            _configuration=_configuration,
            **kwargs,
        )
