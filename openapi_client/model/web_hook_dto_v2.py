# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class WebHookDtoV2(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "url",
        }
        
        class properties:
            url = schemas.StrSchema
            name = schemas.StrSchema
            id = schemas.StrSchema
            uid = schemas.StrSchema
            
            
            class events(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "JOB_STATUS_CHANGED": "JOB_STATUS_CHANGED",
                                "JOB_CREATED": "JOB_CREATED",
                                "JOB_DELETED": "JOB_DELETED",
                                "JOB_ASSIGNED": "JOB_ASSIGNED",
                                "JOB_DUE_DATE_CHANGED": "JOB_DUE_DATE_CHANGED",
                                "JOB_UPDATED": "JOB_UPDATED",
                                "JOB_TARGET_UPDATED": "JOB_TARGET_UPDATED",
                                "JOB_EXPORTED": "JOB_EXPORTED",
                                "JOB_UNEXPORTED": "JOB_UNEXPORTED",
                                "PROJECT_CREATED": "PROJECT_CREATED",
                                "PROJECT_DELETED": "PROJECT_DELETED",
                                "PROJECT_STATUS_CHANGED": "PROJECT_STATUS_CHANGED",
                                "PROJECT_DUE_DATE_CHANGED": "PROJECT_DUE_DATE_CHANGED",
                                "SHARED_PROJECT_ASSIGNED": "SHARED_PROJECT_ASSIGNED",
                                "PROJECT_METADATA_UPDATED": "PROJECT_METADATA_UPDATED",
                                "PRE_TRANSLATION_FINISHED": "PRE_TRANSLATION_FINISHED",
                                "ANALYSIS_CREATED": "ANALYSIS_CREATED",
                                "CONTINUOUS_JOB_UPDATED": "CONTINUOUS_JOB_UPDATED",
                                "PROJECT_TEMPLATE_CREATED": "PROJECT_TEMPLATE_CREATED",
                                "PROJECT_TEMPLATE_UPDATED": "PROJECT_TEMPLATE_UPDATED",
                                "PROJECT_TEMPLATE_DELETED": "PROJECT_TEMPLATE_DELETED",
                            }
                        
                        @schemas.classproperty
                        def JOB_STATUS_CHANGED(cls):
                            return cls("JOB_STATUS_CHANGED")
                        
                        @schemas.classproperty
                        def JOB_CREATED(cls):
                            return cls("JOB_CREATED")
                        
                        @schemas.classproperty
                        def JOB_DELETED(cls):
                            return cls("JOB_DELETED")
                        
                        @schemas.classproperty
                        def JOB_ASSIGNED(cls):
                            return cls("JOB_ASSIGNED")
                        
                        @schemas.classproperty
                        def JOB_DUE_DATE_CHANGED(cls):
                            return cls("JOB_DUE_DATE_CHANGED")
                        
                        @schemas.classproperty
                        def JOB_UPDATED(cls):
                            return cls("JOB_UPDATED")
                        
                        @schemas.classproperty
                        def JOB_TARGET_UPDATED(cls):
                            return cls("JOB_TARGET_UPDATED")
                        
                        @schemas.classproperty
                        def JOB_EXPORTED(cls):
                            return cls("JOB_EXPORTED")
                        
                        @schemas.classproperty
                        def JOB_UNEXPORTED(cls):
                            return cls("JOB_UNEXPORTED")
                        
                        @schemas.classproperty
                        def PROJECT_CREATED(cls):
                            return cls("PROJECT_CREATED")
                        
                        @schemas.classproperty
                        def PROJECT_DELETED(cls):
                            return cls("PROJECT_DELETED")
                        
                        @schemas.classproperty
                        def PROJECT_STATUS_CHANGED(cls):
                            return cls("PROJECT_STATUS_CHANGED")
                        
                        @schemas.classproperty
                        def PROJECT_DUE_DATE_CHANGED(cls):
                            return cls("PROJECT_DUE_DATE_CHANGED")
                        
                        @schemas.classproperty
                        def SHARED_PROJECT_ASSIGNED(cls):
                            return cls("SHARED_PROJECT_ASSIGNED")
                        
                        @schemas.classproperty
                        def PROJECT_METADATA_UPDATED(cls):
                            return cls("PROJECT_METADATA_UPDATED")
                        
                        @schemas.classproperty
                        def PRE_TRANSLATION_FINISHED(cls):
                            return cls("PRE_TRANSLATION_FINISHED")
                        
                        @schemas.classproperty
                        def ANALYSIS_CREATED(cls):
                            return cls("ANALYSIS_CREATED")
                        
                        @schemas.classproperty
                        def CONTINUOUS_JOB_UPDATED(cls):
                            return cls("CONTINUOUS_JOB_UPDATED")
                        
                        @schemas.classproperty
                        def PROJECT_TEMPLATE_CREATED(cls):
                            return cls("PROJECT_TEMPLATE_CREATED")
                        
                        @schemas.classproperty
                        def PROJECT_TEMPLATE_UPDATED(cls):
                            return cls("PROJECT_TEMPLATE_UPDATED")
                        
                        @schemas.classproperty
                        def PROJECT_TEMPLATE_DELETED(cls):
                            return cls("PROJECT_TEMPLATE_DELETED")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'events':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class secretToken(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 1
            hidden = schemas.BoolSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ENABLED": "ENABLED",
                        "DISABLED": "DISABLED",
                    }
                
                @schemas.classproperty
                def ENABLED(cls):
                    return cls("ENABLED")
                
                @schemas.classproperty
                def DISABLED(cls):
                    return cls("DISABLED")
            failedAttempts = schemas.Int32Schema
            created = schemas.DateTimeSchema
        
            @staticmethod
            def createdBy() -> typing.Type['UserReference']:
                return UserReference
            lastModified = schemas.DateTimeSchema
        
            @staticmethod
            def lastModifiedBy() -> typing.Type['UserReference']:
                return UserReference
            __annotations__ = {
                "url": url,
                "name": name,
                "id": id,
                "uid": uid,
                "events": events,
                "secretToken": secretToken,
                "hidden": hidden,
                "status": status,
                "failedAttempts": failedAttempts,
                "created": created,
                "createdBy": createdBy,
                "lastModified": lastModified,
                "lastModifiedBy": lastModifiedBy,
            }
    
    url: MetaOapg.properties.url
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uid"]) -> MetaOapg.properties.uid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["events"]) -> MetaOapg.properties.events: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secretToken"]) -> MetaOapg.properties.secretToken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hidden"]) -> MetaOapg.properties.hidden: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["failedAttempts"]) -> MetaOapg.properties.failedAttempts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdBy"]) -> 'UserReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastModified"]) -> MetaOapg.properties.lastModified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastModifiedBy"]) -> 'UserReference': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["url", "name", "id", "uid", "events", "secretToken", "hidden", "status", "failedAttempts", "created", "createdBy", "lastModified", "lastModifiedBy", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uid"]) -> typing.Union[MetaOapg.properties.uid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["events"]) -> typing.Union[MetaOapg.properties.events, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secretToken"]) -> typing.Union[MetaOapg.properties.secretToken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hidden"]) -> typing.Union[MetaOapg.properties.hidden, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["failedAttempts"]) -> typing.Union[MetaOapg.properties.failedAttempts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdBy"]) -> typing.Union['UserReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastModified"]) -> typing.Union[MetaOapg.properties.lastModified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastModifiedBy"]) -> typing.Union['UserReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["url", "name", "id", "uid", "events", "secretToken", "hidden", "status", "failedAttempts", "created", "createdBy", "lastModified", "lastModifiedBy", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        url: typing.Union[MetaOapg.properties.url, str, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        uid: typing.Union[MetaOapg.properties.uid, str, schemas.Unset] = schemas.unset,
        events: typing.Union[MetaOapg.properties.events, list, tuple, schemas.Unset] = schemas.unset,
        secretToken: typing.Union[MetaOapg.properties.secretToken, str, schemas.Unset] = schemas.unset,
        hidden: typing.Union[MetaOapg.properties.hidden, bool, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        failedAttempts: typing.Union[MetaOapg.properties.failedAttempts, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        created: typing.Union[MetaOapg.properties.created, str, datetime, schemas.Unset] = schemas.unset,
        createdBy: typing.Union['UserReference', schemas.Unset] = schemas.unset,
        lastModified: typing.Union[MetaOapg.properties.lastModified, str, datetime, schemas.Unset] = schemas.unset,
        lastModifiedBy: typing.Union['UserReference', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WebHookDtoV2':
        return super().__new__(
            cls,
            *_args,
            url=url,
            name=name,
            id=id,
            uid=uid,
            events=events,
            secretToken=secretToken,
            hidden=hidden,
            status=status,
            failedAttempts=failedAttempts,
            created=created,
            createdBy=createdBy,
            lastModified=lastModified,
            lastModifiedBy=lastModifiedBy,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.user_reference import UserReference
