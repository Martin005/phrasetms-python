# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class JobRoleDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "type",
        }
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def PROJECT_OWNER(cls):
                    return cls("PROJECT_OWNER")
                
                @schemas.classproperty
                def JOB_OWNER(cls):
                    return cls("JOB_OWNER")
                
                @schemas.classproperty
                def PROVIDER(cls):
                    return cls("PROVIDER")
                
                @schemas.classproperty
                def GUEST(cls):
                    return cls("GUEST")
        
            @staticmethod
            def workflowStep() -> typing.Type['ProjectWorkflowStepDtoV2']:
                return ProjectWorkflowStepDtoV2
            
            
            class organizationType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def VENDOR(cls):
                    return cls("VENDOR")
                
                @schemas.classproperty
                def BUYER(cls):
                    return cls("BUYER")
            __annotations__ = {
                "type": type,
                "workflowStep": workflowStep,
                "organizationType": organizationType,
            }
    
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowStep"]) -> 'ProjectWorkflowStepDtoV2': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organizationType"]) -> MetaOapg.properties.organizationType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "workflowStep", "organizationType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowStep"]) -> typing.Union['ProjectWorkflowStepDtoV2', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organizationType"]) -> typing.Union[MetaOapg.properties.organizationType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "workflowStep", "organizationType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        workflowStep: typing.Union['ProjectWorkflowStepDtoV2', schemas.Unset] = schemas.unset,
        organizationType: typing.Union[MetaOapg.properties.organizationType, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JobRoleDto':
        return super().__new__(
            cls,
            *_args,
            type=type,
            workflowStep=workflowStep,
            organizationType=organizationType,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.project_workflow_step_dto_v2 import ProjectWorkflowStepDtoV2
