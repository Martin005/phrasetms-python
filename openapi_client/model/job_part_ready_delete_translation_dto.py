# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class JobPartReadyDeleteTranslationDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class jobs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    max_items = 100
                    min_items = 1
                    
                    @staticmethod
                    def items() -> typing.Type['UidReference']:
                        return UidReference
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['UidReference'], typing.List['UidReference']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'jobs':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'UidReference':
                    return super().__getitem__(i)
        
            @staticmethod
            def deleteSettings() -> typing.Type['TranslationSegmentsReferenceV2']:
                return TranslationSegmentsReferenceV2
            forAllJobs = schemas.BoolSchema
            workflowLevel = schemas.Int32Schema
        
            @staticmethod
            def filter() -> typing.Type['JobPartReadyDeleteTranslationFilterDto']:
                return JobPartReadyDeleteTranslationFilterDto
            getParts = schemas.DictSchema
            __annotations__ = {
                "jobs": jobs,
                "deleteSettings": deleteSettings,
                "forAllJobs": forAllJobs,
                "workflowLevel": workflowLevel,
                "filter": filter,
                "getParts": getParts,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobs"]) -> MetaOapg.properties.jobs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleteSettings"]) -> 'TranslationSegmentsReferenceV2': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["forAllJobs"]) -> MetaOapg.properties.forAllJobs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowLevel"]) -> MetaOapg.properties.workflowLevel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filter"]) -> 'JobPartReadyDeleteTranslationFilterDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["getParts"]) -> MetaOapg.properties.getParts: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["jobs", "deleteSettings", "forAllJobs", "workflowLevel", "filter", "getParts", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobs"]) -> typing.Union[MetaOapg.properties.jobs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleteSettings"]) -> typing.Union['TranslationSegmentsReferenceV2', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["forAllJobs"]) -> typing.Union[MetaOapg.properties.forAllJobs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowLevel"]) -> typing.Union[MetaOapg.properties.workflowLevel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filter"]) -> typing.Union['JobPartReadyDeleteTranslationFilterDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["getParts"]) -> typing.Union[MetaOapg.properties.getParts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["jobs", "deleteSettings", "forAllJobs", "workflowLevel", "filter", "getParts", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        jobs: typing.Union[MetaOapg.properties.jobs, list, tuple, schemas.Unset] = schemas.unset,
        deleteSettings: typing.Union['TranslationSegmentsReferenceV2', schemas.Unset] = schemas.unset,
        forAllJobs: typing.Union[MetaOapg.properties.forAllJobs, bool, schemas.Unset] = schemas.unset,
        workflowLevel: typing.Union[MetaOapg.properties.workflowLevel, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        filter: typing.Union['JobPartReadyDeleteTranslationFilterDto', schemas.Unset] = schemas.unset,
        getParts: typing.Union[MetaOapg.properties.getParts, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JobPartReadyDeleteTranslationDto':
        return super().__new__(
            cls,
            *_args,
            jobs=jobs,
            deleteSettings=deleteSettings,
            forAllJobs=forAllJobs,
            workflowLevel=workflowLevel,
            filter=filter,
            getParts=getParts,
            _configuration=_configuration,
            **kwargs,
        )

from phrasetms_client.model.job_part_ready_delete_translation_filter_dto import JobPartReadyDeleteTranslationFilterDto
from phrasetms_client.model.translation_segments_reference_v2 import TranslationSegmentsReferenceV2
from phrasetms_client.model.uid_reference import UidReference
