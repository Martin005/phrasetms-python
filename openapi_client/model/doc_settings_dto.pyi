# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class DocSettingsDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            comments = schemas.BoolSchema
            index = schemas.BoolSchema
            other = schemas.BoolSchema
            tagRegexp = schemas.StrSchema
            hyperlinkTarget = schemas.BoolSchema
            joinSimilarRuns = schemas.BoolSchema
            targetFont = schemas.StrSchema
            properties = schemas.BoolSchema
            hidden = schemas.BoolSchema
            headerFooter = schemas.BoolSchema
            __annotations__ = {
                "comments": comments,
                "index": index,
                "other": other,
                "tagRegexp": tagRegexp,
                "hyperlinkTarget": hyperlinkTarget,
                "joinSimilarRuns": joinSimilarRuns,
                "targetFont": targetFont,
                "properties": properties,
                "hidden": hidden,
                "headerFooter": headerFooter,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comments"]) -> MetaOapg.properties.comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["index"]) -> MetaOapg.properties.index: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["other"]) -> MetaOapg.properties.other: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tagRegexp"]) -> MetaOapg.properties.tagRegexp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hyperlinkTarget"]) -> MetaOapg.properties.hyperlinkTarget: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["joinSimilarRuns"]) -> MetaOapg.properties.joinSimilarRuns: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetFont"]) -> MetaOapg.properties.targetFont: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["properties"]) -> MetaOapg.properties.properties: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hidden"]) -> MetaOapg.properties.hidden: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["headerFooter"]) -> MetaOapg.properties.headerFooter: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["comments", "index", "other", "tagRegexp", "hyperlinkTarget", "joinSimilarRuns", "targetFont", "properties", "hidden", "headerFooter", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comments"]) -> typing.Union[MetaOapg.properties.comments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["index"]) -> typing.Union[MetaOapg.properties.index, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["other"]) -> typing.Union[MetaOapg.properties.other, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tagRegexp"]) -> typing.Union[MetaOapg.properties.tagRegexp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hyperlinkTarget"]) -> typing.Union[MetaOapg.properties.hyperlinkTarget, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["joinSimilarRuns"]) -> typing.Union[MetaOapg.properties.joinSimilarRuns, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetFont"]) -> typing.Union[MetaOapg.properties.targetFont, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["properties"]) -> typing.Union[MetaOapg.properties.properties, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hidden"]) -> typing.Union[MetaOapg.properties.hidden, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["headerFooter"]) -> typing.Union[MetaOapg.properties.headerFooter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["comments", "index", "other", "tagRegexp", "hyperlinkTarget", "joinSimilarRuns", "targetFont", "properties", "hidden", "headerFooter", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        comments: typing.Union[MetaOapg.properties.comments, bool, schemas.Unset] = schemas.unset,
        index: typing.Union[MetaOapg.properties.index, bool, schemas.Unset] = schemas.unset,
        other: typing.Union[MetaOapg.properties.other, bool, schemas.Unset] = schemas.unset,
        tagRegexp: typing.Union[MetaOapg.properties.tagRegexp, str, schemas.Unset] = schemas.unset,
        hyperlinkTarget: typing.Union[MetaOapg.properties.hyperlinkTarget, bool, schemas.Unset] = schemas.unset,
        joinSimilarRuns: typing.Union[MetaOapg.properties.joinSimilarRuns, bool, schemas.Unset] = schemas.unset,
        targetFont: typing.Union[MetaOapg.properties.targetFont, str, schemas.Unset] = schemas.unset,
        properties: typing.Union[MetaOapg.properties.properties, bool, schemas.Unset] = schemas.unset,
        hidden: typing.Union[MetaOapg.properties.hidden, bool, schemas.Unset] = schemas.unset,
        headerFooter: typing.Union[MetaOapg.properties.headerFooter, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DocSettingsDto':
        return super().__new__(
            cls,
            *_args,
            comments=comments,
            index=index,
            other=other,
            tagRegexp=tagRegexp,
            hyperlinkTarget=hyperlinkTarget,
            joinSimilarRuns=joinSimilarRuns,
            targetFont=targetFont,
            properties=properties,
            hidden=hidden,
            headerFooter=headerFooter,
            _configuration=_configuration,
            **kwargs,
        )
