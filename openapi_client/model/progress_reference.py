# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ProgressReference(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            totalCount = schemas.Int32Schema
            finishedCount = schemas.Int32Schema
            overdueCount = schemas.Int32Schema
            finishedRatio = schemas.Float64Schema
            overdueRatio = schemas.Float64Schema
            __annotations__ = {
                "totalCount": totalCount,
                "finishedCount": finishedCount,
                "overdueCount": overdueCount,
                "finishedRatio": finishedRatio,
                "overdueRatio": overdueRatio,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalCount"]) -> MetaOapg.properties.totalCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["finishedCount"]) -> MetaOapg.properties.finishedCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["overdueCount"]) -> MetaOapg.properties.overdueCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["finishedRatio"]) -> MetaOapg.properties.finishedRatio: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["overdueRatio"]) -> MetaOapg.properties.overdueRatio: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["totalCount", "finishedCount", "overdueCount", "finishedRatio", "overdueRatio", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalCount"]) -> typing.Union[MetaOapg.properties.totalCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["finishedCount"]) -> typing.Union[MetaOapg.properties.finishedCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["overdueCount"]) -> typing.Union[MetaOapg.properties.overdueCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["finishedRatio"]) -> typing.Union[MetaOapg.properties.finishedRatio, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["overdueRatio"]) -> typing.Union[MetaOapg.properties.overdueRatio, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["totalCount", "finishedCount", "overdueCount", "finishedRatio", "overdueRatio", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        totalCount: typing.Union[MetaOapg.properties.totalCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        finishedCount: typing.Union[MetaOapg.properties.finishedCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        overdueCount: typing.Union[MetaOapg.properties.overdueCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        finishedRatio: typing.Union[MetaOapg.properties.finishedRatio, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        overdueRatio: typing.Union[MetaOapg.properties.overdueRatio, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProgressReference':
        return super().__new__(
            cls,
            *_args,
            totalCount=totalCount,
            finishedCount=finishedCount,
            overdueCount=overdueCount,
            finishedRatio=finishedRatio,
            overdueRatio=overdueRatio,
            _configuration=_configuration,
            **kwargs,
        )
