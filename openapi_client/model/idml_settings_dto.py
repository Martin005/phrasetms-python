# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class IdmlSettingsDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            extractNotes = schemas.BoolSchema
            simplifyCodes = schemas.BoolSchema
            extractMasterSpreads = schemas.BoolSchema
            extractLockedLayers = schemas.BoolSchema
            extractInvisibleLayers = schemas.BoolSchema
            extractHiddenConditionalText = schemas.BoolSchema
            extractHyperlinks = schemas.BoolSchema
            keepKerning = schemas.BoolSchema
            keepTracking = schemas.BoolSchema
            targetFont = schemas.StrSchema
            replaceFont = schemas.BoolSchema
            removeXmlElements = schemas.BoolSchema
            tagRegexp = schemas.StrSchema
            extractCrossReferenceFormats = schemas.BoolSchema
            extractVariables = schemas.BoolSchema
            __annotations__ = {
                "extractNotes": extractNotes,
                "simplifyCodes": simplifyCodes,
                "extractMasterSpreads": extractMasterSpreads,
                "extractLockedLayers": extractLockedLayers,
                "extractInvisibleLayers": extractInvisibleLayers,
                "extractHiddenConditionalText": extractHiddenConditionalText,
                "extractHyperlinks": extractHyperlinks,
                "keepKerning": keepKerning,
                "keepTracking": keepTracking,
                "targetFont": targetFont,
                "replaceFont": replaceFont,
                "removeXmlElements": removeXmlElements,
                "tagRegexp": tagRegexp,
                "extractCrossReferenceFormats": extractCrossReferenceFormats,
                "extractVariables": extractVariables,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extractNotes"]) -> MetaOapg.properties.extractNotes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["simplifyCodes"]) -> MetaOapg.properties.simplifyCodes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extractMasterSpreads"]) -> MetaOapg.properties.extractMasterSpreads: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extractLockedLayers"]) -> MetaOapg.properties.extractLockedLayers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extractInvisibleLayers"]) -> MetaOapg.properties.extractInvisibleLayers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extractHiddenConditionalText"]) -> MetaOapg.properties.extractHiddenConditionalText: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extractHyperlinks"]) -> MetaOapg.properties.extractHyperlinks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["keepKerning"]) -> MetaOapg.properties.keepKerning: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["keepTracking"]) -> MetaOapg.properties.keepTracking: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetFont"]) -> MetaOapg.properties.targetFont: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["replaceFont"]) -> MetaOapg.properties.replaceFont: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["removeXmlElements"]) -> MetaOapg.properties.removeXmlElements: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tagRegexp"]) -> MetaOapg.properties.tagRegexp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extractCrossReferenceFormats"]) -> MetaOapg.properties.extractCrossReferenceFormats: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extractVariables"]) -> MetaOapg.properties.extractVariables: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["extractNotes", "simplifyCodes", "extractMasterSpreads", "extractLockedLayers", "extractInvisibleLayers", "extractHiddenConditionalText", "extractHyperlinks", "keepKerning", "keepTracking", "targetFont", "replaceFont", "removeXmlElements", "tagRegexp", "extractCrossReferenceFormats", "extractVariables", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extractNotes"]) -> typing.Union[MetaOapg.properties.extractNotes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["simplifyCodes"]) -> typing.Union[MetaOapg.properties.simplifyCodes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extractMasterSpreads"]) -> typing.Union[MetaOapg.properties.extractMasterSpreads, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extractLockedLayers"]) -> typing.Union[MetaOapg.properties.extractLockedLayers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extractInvisibleLayers"]) -> typing.Union[MetaOapg.properties.extractInvisibleLayers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extractHiddenConditionalText"]) -> typing.Union[MetaOapg.properties.extractHiddenConditionalText, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extractHyperlinks"]) -> typing.Union[MetaOapg.properties.extractHyperlinks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["keepKerning"]) -> typing.Union[MetaOapg.properties.keepKerning, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["keepTracking"]) -> typing.Union[MetaOapg.properties.keepTracking, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetFont"]) -> typing.Union[MetaOapg.properties.targetFont, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["replaceFont"]) -> typing.Union[MetaOapg.properties.replaceFont, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["removeXmlElements"]) -> typing.Union[MetaOapg.properties.removeXmlElements, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tagRegexp"]) -> typing.Union[MetaOapg.properties.tagRegexp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extractCrossReferenceFormats"]) -> typing.Union[MetaOapg.properties.extractCrossReferenceFormats, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extractVariables"]) -> typing.Union[MetaOapg.properties.extractVariables, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["extractNotes", "simplifyCodes", "extractMasterSpreads", "extractLockedLayers", "extractInvisibleLayers", "extractHiddenConditionalText", "extractHyperlinks", "keepKerning", "keepTracking", "targetFont", "replaceFont", "removeXmlElements", "tagRegexp", "extractCrossReferenceFormats", "extractVariables", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        extractNotes: typing.Union[MetaOapg.properties.extractNotes, bool, schemas.Unset] = schemas.unset,
        simplifyCodes: typing.Union[MetaOapg.properties.simplifyCodes, bool, schemas.Unset] = schemas.unset,
        extractMasterSpreads: typing.Union[MetaOapg.properties.extractMasterSpreads, bool, schemas.Unset] = schemas.unset,
        extractLockedLayers: typing.Union[MetaOapg.properties.extractLockedLayers, bool, schemas.Unset] = schemas.unset,
        extractInvisibleLayers: typing.Union[MetaOapg.properties.extractInvisibleLayers, bool, schemas.Unset] = schemas.unset,
        extractHiddenConditionalText: typing.Union[MetaOapg.properties.extractHiddenConditionalText, bool, schemas.Unset] = schemas.unset,
        extractHyperlinks: typing.Union[MetaOapg.properties.extractHyperlinks, bool, schemas.Unset] = schemas.unset,
        keepKerning: typing.Union[MetaOapg.properties.keepKerning, bool, schemas.Unset] = schemas.unset,
        keepTracking: typing.Union[MetaOapg.properties.keepTracking, bool, schemas.Unset] = schemas.unset,
        targetFont: typing.Union[MetaOapg.properties.targetFont, str, schemas.Unset] = schemas.unset,
        replaceFont: typing.Union[MetaOapg.properties.replaceFont, bool, schemas.Unset] = schemas.unset,
        removeXmlElements: typing.Union[MetaOapg.properties.removeXmlElements, bool, schemas.Unset] = schemas.unset,
        tagRegexp: typing.Union[MetaOapg.properties.tagRegexp, str, schemas.Unset] = schemas.unset,
        extractCrossReferenceFormats: typing.Union[MetaOapg.properties.extractCrossReferenceFormats, bool, schemas.Unset] = schemas.unset,
        extractVariables: typing.Union[MetaOapg.properties.extractVariables, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'IdmlSettingsDto':
        return super().__new__(
            cls,
            *_args,
            extractNotes=extractNotes,
            simplifyCodes=simplifyCodes,
            extractMasterSpreads=extractMasterSpreads,
            extractLockedLayers=extractLockedLayers,
            extractInvisibleLayers=extractInvisibleLayers,
            extractHiddenConditionalText=extractHiddenConditionalText,
            extractHyperlinks=extractHyperlinks,
            keepKerning=keepKerning,
            keepTracking=keepTracking,
            targetFont=targetFont,
            replaceFont=replaceFont,
            removeXmlElements=removeXmlElements,
            tagRegexp=tagRegexp,
            extractCrossReferenceFormats=extractCrossReferenceFormats,
            extractVariables=extractVariables,
            _configuration=_configuration,
            **kwargs,
        )
