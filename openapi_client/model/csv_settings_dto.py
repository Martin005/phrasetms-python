# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class CsvSettingsDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            delimiter = schemas.StrSchema
            
            
            class delimiterType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "TAB": "TAB",
                        "COMMA": "COMMA",
                        "SEMICOLON": "SEMICOLON",
                        "OTHER": "OTHER",
                    }
                
                @schemas.classproperty
                def TAB(cls):
                    return cls("TAB")
                
                @schemas.classproperty
                def COMMA(cls):
                    return cls("COMMA")
                
                @schemas.classproperty
                def SEMICOLON(cls):
                    return cls("SEMICOLON")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("OTHER")
            htmlSubFilter = schemas.BoolSchema
            tagRegexp = schemas.StrSchema
            importColumns = schemas.StrSchema
            contextNoteColumns = schemas.StrSchema
            contextKeyColumn = schemas.StrSchema
            maxLenColumn = schemas.StrSchema
            importRows = schemas.StrSchema
            __annotations__ = {
                "delimiter": delimiter,
                "delimiterType": delimiterType,
                "htmlSubFilter": htmlSubFilter,
                "tagRegexp": tagRegexp,
                "importColumns": importColumns,
                "contextNoteColumns": contextNoteColumns,
                "contextKeyColumn": contextKeyColumn,
                "maxLenColumn": maxLenColumn,
                "importRows": importRows,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delimiter"]) -> MetaOapg.properties.delimiter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delimiterType"]) -> MetaOapg.properties.delimiterType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["htmlSubFilter"]) -> MetaOapg.properties.htmlSubFilter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tagRegexp"]) -> MetaOapg.properties.tagRegexp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["importColumns"]) -> MetaOapg.properties.importColumns: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contextNoteColumns"]) -> MetaOapg.properties.contextNoteColumns: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contextKeyColumn"]) -> MetaOapg.properties.contextKeyColumn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxLenColumn"]) -> MetaOapg.properties.maxLenColumn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["importRows"]) -> MetaOapg.properties.importRows: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["delimiter", "delimiterType", "htmlSubFilter", "tagRegexp", "importColumns", "contextNoteColumns", "contextKeyColumn", "maxLenColumn", "importRows", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delimiter"]) -> typing.Union[MetaOapg.properties.delimiter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delimiterType"]) -> typing.Union[MetaOapg.properties.delimiterType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["htmlSubFilter"]) -> typing.Union[MetaOapg.properties.htmlSubFilter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tagRegexp"]) -> typing.Union[MetaOapg.properties.tagRegexp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["importColumns"]) -> typing.Union[MetaOapg.properties.importColumns, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contextNoteColumns"]) -> typing.Union[MetaOapg.properties.contextNoteColumns, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contextKeyColumn"]) -> typing.Union[MetaOapg.properties.contextKeyColumn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxLenColumn"]) -> typing.Union[MetaOapg.properties.maxLenColumn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["importRows"]) -> typing.Union[MetaOapg.properties.importRows, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["delimiter", "delimiterType", "htmlSubFilter", "tagRegexp", "importColumns", "contextNoteColumns", "contextKeyColumn", "maxLenColumn", "importRows", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        delimiter: typing.Union[MetaOapg.properties.delimiter, str, schemas.Unset] = schemas.unset,
        delimiterType: typing.Union[MetaOapg.properties.delimiterType, str, schemas.Unset] = schemas.unset,
        htmlSubFilter: typing.Union[MetaOapg.properties.htmlSubFilter, bool, schemas.Unset] = schemas.unset,
        tagRegexp: typing.Union[MetaOapg.properties.tagRegexp, str, schemas.Unset] = schemas.unset,
        importColumns: typing.Union[MetaOapg.properties.importColumns, str, schemas.Unset] = schemas.unset,
        contextNoteColumns: typing.Union[MetaOapg.properties.contextNoteColumns, str, schemas.Unset] = schemas.unset,
        contextKeyColumn: typing.Union[MetaOapg.properties.contextKeyColumn, str, schemas.Unset] = schemas.unset,
        maxLenColumn: typing.Union[MetaOapg.properties.maxLenColumn, str, schemas.Unset] = schemas.unset,
        importRows: typing.Union[MetaOapg.properties.importRows, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CsvSettingsDto':
        return super().__new__(
            cls,
            *_args,
            delimiter=delimiter,
            delimiterType=delimiterType,
            htmlSubFilter=htmlSubFilter,
            tagRegexp=tagRegexp,
            importColumns=importColumns,
            contextNoteColumns=contextNoteColumns,
            contextKeyColumn=contextKeyColumn,
            maxLenColumn=maxLenColumn,
            importRows=importRows,
            _configuration=_configuration,
            **kwargs,
        )
