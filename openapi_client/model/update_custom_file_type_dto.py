# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class UpdateCustomFileTypeDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            name = schemas.StrSchema
            filenamePattern = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "html": "HTML",
                        "json": "JSON",
                        "xml": "XML",
                        "multiling_xml": "MULTILING_XML",
                        "txt": "TXT",
                    }
                
                @schemas.classproperty
                def HTML(cls):
                    return cls("html")
                
                @schemas.classproperty
                def JSON(cls):
                    return cls("json")
                
                @schemas.classproperty
                def XML(cls):
                    return cls("xml")
                
                @schemas.classproperty
                def MULTILING_XML(cls):
                    return cls("multiling_xml")
                
                @schemas.classproperty
                def TXT(cls):
                    return cls("txt")
        
            @staticmethod
            def fileImportSettings() -> typing.Type['FileImportSettingsCreateDto']:
                return FileImportSettingsCreateDto
            __annotations__ = {
                "name": name,
                "filenamePattern": filenamePattern,
                "type": type,
                "fileImportSettings": fileImportSettings,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filenamePattern"]) -> MetaOapg.properties.filenamePattern: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fileImportSettings"]) -> 'FileImportSettingsCreateDto': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "filenamePattern", "type", "fileImportSettings", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filenamePattern"]) -> typing.Union[MetaOapg.properties.filenamePattern, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fileImportSettings"]) -> typing.Union['FileImportSettingsCreateDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "filenamePattern", "type", "fileImportSettings", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        filenamePattern: typing.Union[MetaOapg.properties.filenamePattern, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        fileImportSettings: typing.Union['FileImportSettingsCreateDto', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UpdateCustomFileTypeDto':
        return super().__new__(
            cls,
            *_args,
            name=name,
            filenamePattern=filenamePattern,
            type=type,
            fileImportSettings=fileImportSettings,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.file_import_settings_create_dto import FileImportSettingsCreateDto
