# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class PatchProjectDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 0
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "NEW": "NEW",
                        "ASSIGNED": "ASSIGNED",
                        "COMPLETED": "COMPLETED",
                        "ACCEPTED_BY_VENDOR": "ACCEPTED_BY_VENDOR",
                        "DECLINED_BY_VENDOR": "DECLINED_BY_VENDOR",
                        "COMPLETED_BY_VENDOR": "COMPLETED_BY_VENDOR",
                        "CANCELLED": "CANCELLED",
                    }
                
                @schemas.classproperty
                def NEW(cls):
                    return cls("NEW")
                
                @schemas.classproperty
                def ASSIGNED(cls):
                    return cls("ASSIGNED")
                
                @schemas.classproperty
                def COMPLETED(cls):
                    return cls("COMPLETED")
                
                @schemas.classproperty
                def ACCEPTED_BY_VENDOR(cls):
                    return cls("ACCEPTED_BY_VENDOR")
                
                @schemas.classproperty
                def DECLINED_BY_VENDOR(cls):
                    return cls("DECLINED_BY_VENDOR")
                
                @schemas.classproperty
                def COMPLETED_BY_VENDOR(cls):
                    return cls("COMPLETED_BY_VENDOR")
                
                @schemas.classproperty
                def CANCELLED(cls):
                    return cls("CANCELLED")
        
            @staticmethod
            def client() -> typing.Type['IdReference']:
                return IdReference
        
            @staticmethod
            def businessUnit() -> typing.Type['IdReference']:
                return IdReference
        
            @staticmethod
            def domain() -> typing.Type['IdReference']:
                return IdReference
        
            @staticmethod
            def subDomain() -> typing.Type['IdReference']:
                return IdReference
        
            @staticmethod
            def owner() -> typing.Type['IdReference']:
                return IdReference
            
            
            class purchaseOrder(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 0
            dateDue = schemas.DateTimeSchema
            
            
            class note(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 4096
                    min_length = 0
        
            @staticmethod
            def machineTranslateSettings() -> typing.Type['UidReference']:
                return UidReference
            
            
            class machineTranslateSettingsPerLangs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ProjectMTSettingsPerLangDto']:
                        return ProjectMTSettingsPerLangDto
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ProjectMTSettingsPerLangDto'], typing.List['ProjectMTSettingsPerLangDto']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'machineTranslateSettingsPerLangs':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ProjectMTSettingsPerLangDto':
                    return super().__getitem__(i)
            archived = schemas.BoolSchema
            __annotations__ = {
                "name": name,
                "status": status,
                "client": client,
                "businessUnit": businessUnit,
                "domain": domain,
                "subDomain": subDomain,
                "owner": owner,
                "purchaseOrder": purchaseOrder,
                "dateDue": dateDue,
                "note": note,
                "machineTranslateSettings": machineTranslateSettings,
                "machineTranslateSettingsPerLangs": machineTranslateSettingsPerLangs,
                "archived": archived,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client"]) -> 'IdReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["businessUnit"]) -> 'IdReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain"]) -> 'IdReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subDomain"]) -> 'IdReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> 'IdReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchaseOrder"]) -> MetaOapg.properties.purchaseOrder: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateDue"]) -> MetaOapg.properties.dateDue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["machineTranslateSettings"]) -> 'UidReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["machineTranslateSettingsPerLangs"]) -> MetaOapg.properties.machineTranslateSettingsPerLangs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["archived"]) -> MetaOapg.properties.archived: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "status", "client", "businessUnit", "domain", "subDomain", "owner", "purchaseOrder", "dateDue", "note", "machineTranslateSettings", "machineTranslateSettingsPerLangs", "archived", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client"]) -> typing.Union['IdReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["businessUnit"]) -> typing.Union['IdReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domain"]) -> typing.Union['IdReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subDomain"]) -> typing.Union['IdReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union['IdReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchaseOrder"]) -> typing.Union[MetaOapg.properties.purchaseOrder, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateDue"]) -> typing.Union[MetaOapg.properties.dateDue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["machineTranslateSettings"]) -> typing.Union['UidReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["machineTranslateSettingsPerLangs"]) -> typing.Union[MetaOapg.properties.machineTranslateSettingsPerLangs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["archived"]) -> typing.Union[MetaOapg.properties.archived, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "status", "client", "businessUnit", "domain", "subDomain", "owner", "purchaseOrder", "dateDue", "note", "machineTranslateSettings", "machineTranslateSettingsPerLangs", "archived", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        client: typing.Union['IdReference', schemas.Unset] = schemas.unset,
        businessUnit: typing.Union['IdReference', schemas.Unset] = schemas.unset,
        domain: typing.Union['IdReference', schemas.Unset] = schemas.unset,
        subDomain: typing.Union['IdReference', schemas.Unset] = schemas.unset,
        owner: typing.Union['IdReference', schemas.Unset] = schemas.unset,
        purchaseOrder: typing.Union[MetaOapg.properties.purchaseOrder, str, schemas.Unset] = schemas.unset,
        dateDue: typing.Union[MetaOapg.properties.dateDue, str, datetime, schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        machineTranslateSettings: typing.Union['UidReference', schemas.Unset] = schemas.unset,
        machineTranslateSettingsPerLangs: typing.Union[MetaOapg.properties.machineTranslateSettingsPerLangs, list, tuple, schemas.Unset] = schemas.unset,
        archived: typing.Union[MetaOapg.properties.archived, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PatchProjectDto':
        return super().__new__(
            cls,
            *_args,
            name=name,
            status=status,
            client=client,
            businessUnit=businessUnit,
            domain=domain,
            subDomain=subDomain,
            owner=owner,
            purchaseOrder=purchaseOrder,
            dateDue=dateDue,
            note=note,
            machineTranslateSettings=machineTranslateSettings,
            machineTranslateSettingsPerLangs=machineTranslateSettingsPerLangs,
            archived=archived,
            _configuration=_configuration,
            **kwargs,
        )

from phrasetms_client.model.id_reference import IdReference
from phrasetms_client.model.project_mt_settings_per_lang_dto import ProjectMTSettingsPerLangDto
from phrasetms_client.model.uid_reference import UidReference
