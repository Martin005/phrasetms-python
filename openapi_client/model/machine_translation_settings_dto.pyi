# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class MachineTranslationSettingsDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Machine translation related settings
    """


    class MetaOapg:
        
        class properties:
            useMachineTranslation = schemas.BoolSchema
            lock100PercentMatches = schemas.BoolSchema
            confirm100PercentMatches = schemas.BoolSchema
            useAltTransOnly = schemas.BoolSchema
            mtQeMatchesInEditors = schemas.BoolSchema
            mtForTMAbove100 = schemas.BoolSchema
            __annotations__ = {
                "useMachineTranslation": useMachineTranslation,
                "lock100PercentMatches": lock100PercentMatches,
                "confirm100PercentMatches": confirm100PercentMatches,
                "useAltTransOnly": useAltTransOnly,
                "mtQeMatchesInEditors": mtQeMatchesInEditors,
                "mtForTMAbove100": mtForTMAbove100,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["useMachineTranslation"]) -> MetaOapg.properties.useMachineTranslation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lock100PercentMatches"]) -> MetaOapg.properties.lock100PercentMatches: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["confirm100PercentMatches"]) -> MetaOapg.properties.confirm100PercentMatches: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["useAltTransOnly"]) -> MetaOapg.properties.useAltTransOnly: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mtQeMatchesInEditors"]) -> MetaOapg.properties.mtQeMatchesInEditors: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mtForTMAbove100"]) -> MetaOapg.properties.mtForTMAbove100: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["useMachineTranslation", "lock100PercentMatches", "confirm100PercentMatches", "useAltTransOnly", "mtQeMatchesInEditors", "mtForTMAbove100", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["useMachineTranslation"]) -> typing.Union[MetaOapg.properties.useMachineTranslation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lock100PercentMatches"]) -> typing.Union[MetaOapg.properties.lock100PercentMatches, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["confirm100PercentMatches"]) -> typing.Union[MetaOapg.properties.confirm100PercentMatches, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["useAltTransOnly"]) -> typing.Union[MetaOapg.properties.useAltTransOnly, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mtQeMatchesInEditors"]) -> typing.Union[MetaOapg.properties.mtQeMatchesInEditors, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mtForTMAbove100"]) -> typing.Union[MetaOapg.properties.mtForTMAbove100, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["useMachineTranslation", "lock100PercentMatches", "confirm100PercentMatches", "useAltTransOnly", "mtQeMatchesInEditors", "mtForTMAbove100", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        useMachineTranslation: typing.Union[MetaOapg.properties.useMachineTranslation, bool, schemas.Unset] = schemas.unset,
        lock100PercentMatches: typing.Union[MetaOapg.properties.lock100PercentMatches, bool, schemas.Unset] = schemas.unset,
        confirm100PercentMatches: typing.Union[MetaOapg.properties.confirm100PercentMatches, bool, schemas.Unset] = schemas.unset,
        useAltTransOnly: typing.Union[MetaOapg.properties.useAltTransOnly, bool, schemas.Unset] = schemas.unset,
        mtQeMatchesInEditors: typing.Union[MetaOapg.properties.mtQeMatchesInEditors, bool, schemas.Unset] = schemas.unset,
        mtForTMAbove100: typing.Union[MetaOapg.properties.mtForTMAbove100, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MachineTranslationSettingsDto':
        return super().__new__(
            cls,
            *_args,
            useMachineTranslation=useMachineTranslation,
            lock100PercentMatches=lock100PercentMatches,
            confirm100PercentMatches=confirm100PercentMatches,
            useAltTransOnly=useAltTransOnly,
            mtQeMatchesInEditors=mtQeMatchesInEditors,
            mtForTMAbove100=mtForTMAbove100,
            _configuration=_configuration,
            **kwargs,
        )
