# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ProjectReference(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            uid = schemas.StrSchema
            innerId = schemas.Int32Schema
            name = schemas.StrSchema
        
            @staticmethod
            def businessUnit() -> typing.Type['BusinessUnitReference']:
                return BusinessUnitReference
        
            @staticmethod
            def domain() -> typing.Type['DomainReference']:
                return DomainReference
        
            @staticmethod
            def subDomain() -> typing.Type['SubDomainReference']:
                return SubDomainReference
        
            @staticmethod
            def client() -> typing.Type['ClientReference']:
                return ClientReference
        
            @staticmethod
            def costCenter() -> typing.Type['CostCenterReference']:
                return CostCenterReference
            dueDate = schemas.DateTimeSchema
            createdDate = schemas.DateTimeSchema
        
            @staticmethod
            def createdBy() -> typing.Type['UserReference']:
                return UserReference
        
            @staticmethod
            def owner() -> typing.Type['UserReference']:
                return UserReference
        
            @staticmethod
            def vendor() -> typing.Type['VendorUserReference']:
                return VendorUserReference
            purchaseOrder = schemas.StrSchema
            sourceLang = schemas.StrSchema
            
            
            class targetLangs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'targetLangs':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            status = schemas.StrSchema
        
            @staticmethod
            def progress() -> typing.Type['ProgressReference']:
                return ProgressReference
            
            
            class metadata(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MetadataReference']:
                        return MetadataReference
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['MetadataReference'], typing.List['MetadataReference']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'metadata':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MetadataReference':
                    return super().__getitem__(i)
            note = schemas.StrSchema
            deleted = schemas.BoolSchema
            archived = schemas.BoolSchema
            __annotations__ = {
                "uid": uid,
                "innerId": innerId,
                "name": name,
                "businessUnit": businessUnit,
                "domain": domain,
                "subDomain": subDomain,
                "client": client,
                "costCenter": costCenter,
                "dueDate": dueDate,
                "createdDate": createdDate,
                "createdBy": createdBy,
                "owner": owner,
                "vendor": vendor,
                "purchaseOrder": purchaseOrder,
                "sourceLang": sourceLang,
                "targetLangs": targetLangs,
                "status": status,
                "progress": progress,
                "metadata": metadata,
                "note": note,
                "deleted": deleted,
                "archived": archived,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uid"]) -> MetaOapg.properties.uid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["innerId"]) -> MetaOapg.properties.innerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["businessUnit"]) -> 'BusinessUnitReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain"]) -> 'DomainReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subDomain"]) -> 'SubDomainReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client"]) -> 'ClientReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costCenter"]) -> 'CostCenterReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dueDate"]) -> MetaOapg.properties.dueDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdDate"]) -> MetaOapg.properties.createdDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdBy"]) -> 'UserReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> 'UserReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor"]) -> 'VendorUserReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchaseOrder"]) -> MetaOapg.properties.purchaseOrder: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceLang"]) -> MetaOapg.properties.sourceLang: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetLangs"]) -> MetaOapg.properties.targetLangs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["progress"]) -> 'ProgressReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleted"]) -> MetaOapg.properties.deleted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["archived"]) -> MetaOapg.properties.archived: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["uid", "innerId", "name", "businessUnit", "domain", "subDomain", "client", "costCenter", "dueDate", "createdDate", "createdBy", "owner", "vendor", "purchaseOrder", "sourceLang", "targetLangs", "status", "progress", "metadata", "note", "deleted", "archived", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uid"]) -> typing.Union[MetaOapg.properties.uid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["innerId"]) -> typing.Union[MetaOapg.properties.innerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["businessUnit"]) -> typing.Union['BusinessUnitReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domain"]) -> typing.Union['DomainReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subDomain"]) -> typing.Union['SubDomainReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client"]) -> typing.Union['ClientReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costCenter"]) -> typing.Union['CostCenterReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dueDate"]) -> typing.Union[MetaOapg.properties.dueDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdDate"]) -> typing.Union[MetaOapg.properties.createdDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdBy"]) -> typing.Union['UserReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union['UserReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor"]) -> typing.Union['VendorUserReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchaseOrder"]) -> typing.Union[MetaOapg.properties.purchaseOrder, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceLang"]) -> typing.Union[MetaOapg.properties.sourceLang, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetLangs"]) -> typing.Union[MetaOapg.properties.targetLangs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["progress"]) -> typing.Union['ProgressReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleted"]) -> typing.Union[MetaOapg.properties.deleted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["archived"]) -> typing.Union[MetaOapg.properties.archived, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["uid", "innerId", "name", "businessUnit", "domain", "subDomain", "client", "costCenter", "dueDate", "createdDate", "createdBy", "owner", "vendor", "purchaseOrder", "sourceLang", "targetLangs", "status", "progress", "metadata", "note", "deleted", "archived", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        uid: typing.Union[MetaOapg.properties.uid, str, schemas.Unset] = schemas.unset,
        innerId: typing.Union[MetaOapg.properties.innerId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        businessUnit: typing.Union['BusinessUnitReference', schemas.Unset] = schemas.unset,
        domain: typing.Union['DomainReference', schemas.Unset] = schemas.unset,
        subDomain: typing.Union['SubDomainReference', schemas.Unset] = schemas.unset,
        client: typing.Union['ClientReference', schemas.Unset] = schemas.unset,
        costCenter: typing.Union['CostCenterReference', schemas.Unset] = schemas.unset,
        dueDate: typing.Union[MetaOapg.properties.dueDate, str, datetime, schemas.Unset] = schemas.unset,
        createdDate: typing.Union[MetaOapg.properties.createdDate, str, datetime, schemas.Unset] = schemas.unset,
        createdBy: typing.Union['UserReference', schemas.Unset] = schemas.unset,
        owner: typing.Union['UserReference', schemas.Unset] = schemas.unset,
        vendor: typing.Union['VendorUserReference', schemas.Unset] = schemas.unset,
        purchaseOrder: typing.Union[MetaOapg.properties.purchaseOrder, str, schemas.Unset] = schemas.unset,
        sourceLang: typing.Union[MetaOapg.properties.sourceLang, str, schemas.Unset] = schemas.unset,
        targetLangs: typing.Union[MetaOapg.properties.targetLangs, list, tuple, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        progress: typing.Union['ProgressReference', schemas.Unset] = schemas.unset,
        metadata: typing.Union[MetaOapg.properties.metadata, list, tuple, schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        deleted: typing.Union[MetaOapg.properties.deleted, bool, schemas.Unset] = schemas.unset,
        archived: typing.Union[MetaOapg.properties.archived, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProjectReference':
        return super().__new__(
            cls,
            *_args,
            uid=uid,
            innerId=innerId,
            name=name,
            businessUnit=businessUnit,
            domain=domain,
            subDomain=subDomain,
            client=client,
            costCenter=costCenter,
            dueDate=dueDate,
            createdDate=createdDate,
            createdBy=createdBy,
            owner=owner,
            vendor=vendor,
            purchaseOrder=purchaseOrder,
            sourceLang=sourceLang,
            targetLangs=targetLangs,
            status=status,
            progress=progress,
            metadata=metadata,
            note=note,
            deleted=deleted,
            archived=archived,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.business_unit_reference import BusinessUnitReference
from openapi_client.model.client_reference import ClientReference
from openapi_client.model.cost_center_reference import CostCenterReference
from openapi_client.model.domain_reference import DomainReference
from openapi_client.model.metadata_reference import MetadataReference
from openapi_client.model.progress_reference import ProgressReference
from openapi_client.model.sub_domain_reference import SubDomainReference
from openapi_client.model.user_reference import UserReference
from openapi_client.model.vendor_user_reference import VendorUserReference
