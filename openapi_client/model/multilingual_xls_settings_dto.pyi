# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class MultilingualXlsSettingsDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            sourceColumn = schemas.StrSchema
            
            
            class targetColumns(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.StrSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                ) -> 'targetColumns':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            contextNoteColumn = schemas.StrSchema
            contextKeyColumn = schemas.StrSchema
            tagRegexp = schemas.StrSchema
            htmlSubFilter = schemas.BoolSchema
            segmentation = schemas.BoolSchema
            importRows = schemas.StrSchema
            maxLenColumn = schemas.StrSchema
            
            
            class nonEmptySegmentAction(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("NONE")
                
                @schemas.classproperty
                def CONFIRM(cls):
                    return cls("CONFIRM")
                
                @schemas.classproperty
                def LOCK(cls):
                    return cls("LOCK")
                
                @schemas.classproperty
                def CONFIRM_LOCK(cls):
                    return cls("CONFIRM_LOCK")
            saveConfirmedSegmentsToTm = schemas.BoolSchema
            __annotations__ = {
                "sourceColumn": sourceColumn,
                "targetColumns": targetColumns,
                "contextNoteColumn": contextNoteColumn,
                "contextKeyColumn": contextKeyColumn,
                "tagRegexp": tagRegexp,
                "htmlSubFilter": htmlSubFilter,
                "segmentation": segmentation,
                "importRows": importRows,
                "maxLenColumn": maxLenColumn,
                "nonEmptySegmentAction": nonEmptySegmentAction,
                "saveConfirmedSegmentsToTm": saveConfirmedSegmentsToTm,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceColumn"]) -> MetaOapg.properties.sourceColumn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetColumns"]) -> MetaOapg.properties.targetColumns: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contextNoteColumn"]) -> MetaOapg.properties.contextNoteColumn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contextKeyColumn"]) -> MetaOapg.properties.contextKeyColumn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tagRegexp"]) -> MetaOapg.properties.tagRegexp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["htmlSubFilter"]) -> MetaOapg.properties.htmlSubFilter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["segmentation"]) -> MetaOapg.properties.segmentation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["importRows"]) -> MetaOapg.properties.importRows: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxLenColumn"]) -> MetaOapg.properties.maxLenColumn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nonEmptySegmentAction"]) -> MetaOapg.properties.nonEmptySegmentAction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["saveConfirmedSegmentsToTm"]) -> MetaOapg.properties.saveConfirmedSegmentsToTm: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["sourceColumn", "targetColumns", "contextNoteColumn", "contextKeyColumn", "tagRegexp", "htmlSubFilter", "segmentation", "importRows", "maxLenColumn", "nonEmptySegmentAction", "saveConfirmedSegmentsToTm", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceColumn"]) -> typing.Union[MetaOapg.properties.sourceColumn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetColumns"]) -> typing.Union[MetaOapg.properties.targetColumns, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contextNoteColumn"]) -> typing.Union[MetaOapg.properties.contextNoteColumn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contextKeyColumn"]) -> typing.Union[MetaOapg.properties.contextKeyColumn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tagRegexp"]) -> typing.Union[MetaOapg.properties.tagRegexp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["htmlSubFilter"]) -> typing.Union[MetaOapg.properties.htmlSubFilter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["segmentation"]) -> typing.Union[MetaOapg.properties.segmentation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["importRows"]) -> typing.Union[MetaOapg.properties.importRows, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxLenColumn"]) -> typing.Union[MetaOapg.properties.maxLenColumn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nonEmptySegmentAction"]) -> typing.Union[MetaOapg.properties.nonEmptySegmentAction, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["saveConfirmedSegmentsToTm"]) -> typing.Union[MetaOapg.properties.saveConfirmedSegmentsToTm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["sourceColumn", "targetColumns", "contextNoteColumn", "contextKeyColumn", "tagRegexp", "htmlSubFilter", "segmentation", "importRows", "maxLenColumn", "nonEmptySegmentAction", "saveConfirmedSegmentsToTm", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        sourceColumn: typing.Union[MetaOapg.properties.sourceColumn, str, schemas.Unset] = schemas.unset,
        targetColumns: typing.Union[MetaOapg.properties.targetColumns, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        contextNoteColumn: typing.Union[MetaOapg.properties.contextNoteColumn, str, schemas.Unset] = schemas.unset,
        contextKeyColumn: typing.Union[MetaOapg.properties.contextKeyColumn, str, schemas.Unset] = schemas.unset,
        tagRegexp: typing.Union[MetaOapg.properties.tagRegexp, str, schemas.Unset] = schemas.unset,
        htmlSubFilter: typing.Union[MetaOapg.properties.htmlSubFilter, bool, schemas.Unset] = schemas.unset,
        segmentation: typing.Union[MetaOapg.properties.segmentation, bool, schemas.Unset] = schemas.unset,
        importRows: typing.Union[MetaOapg.properties.importRows, str, schemas.Unset] = schemas.unset,
        maxLenColumn: typing.Union[MetaOapg.properties.maxLenColumn, str, schemas.Unset] = schemas.unset,
        nonEmptySegmentAction: typing.Union[MetaOapg.properties.nonEmptySegmentAction, str, schemas.Unset] = schemas.unset,
        saveConfirmedSegmentsToTm: typing.Union[MetaOapg.properties.saveConfirmedSegmentsToTm, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MultilingualXlsSettingsDto':
        return super().__new__(
            cls,
            *_args,
            sourceColumn=sourceColumn,
            targetColumns=targetColumns,
            contextNoteColumn=contextNoteColumn,
            contextKeyColumn=contextKeyColumn,
            tagRegexp=tagRegexp,
            htmlSubFilter=htmlSubFilter,
            segmentation=segmentation,
            importRows=importRows,
            maxLenColumn=maxLenColumn,
            nonEmptySegmentAction=nonEmptySegmentAction,
            saveConfirmedSegmentsToTm=saveConfirmedSegmentsToTm,
            _configuration=_configuration,
            **kwargs,
        )
