# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class MifSettingsDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            extractBodyPages = schemas.BoolSchema
            extractReferencePages = schemas.BoolSchema
            extractMasterPages = schemas.BoolSchema
            extractHiddenPages = schemas.BoolSchema
            extractVariables = schemas.BoolSchema
            extractIndexMarkers = schemas.BoolSchema
            extractLinks = schemas.BoolSchema
            extractXRefDef = schemas.BoolSchema
            extractPgfNumFormat = schemas.BoolSchema
            extractCustomReferencePages = schemas.BoolSchema
            extractDefaultReferencePages = schemas.BoolSchema
            extractUsedVariables = schemas.BoolSchema
            extractHiddenCondText = schemas.BoolSchema
            extractUsedXRefDef = schemas.BoolSchema
            extractUsedPgfNumFormat = schemas.BoolSchema
            tagRegexp = schemas.StrSchema
            __annotations__ = {
                "extractBodyPages": extractBodyPages,
                "extractReferencePages": extractReferencePages,
                "extractMasterPages": extractMasterPages,
                "extractHiddenPages": extractHiddenPages,
                "extractVariables": extractVariables,
                "extractIndexMarkers": extractIndexMarkers,
                "extractLinks": extractLinks,
                "extractXRefDef": extractXRefDef,
                "extractPgfNumFormat": extractPgfNumFormat,
                "extractCustomReferencePages": extractCustomReferencePages,
                "extractDefaultReferencePages": extractDefaultReferencePages,
                "extractUsedVariables": extractUsedVariables,
                "extractHiddenCondText": extractHiddenCondText,
                "extractUsedXRefDef": extractUsedXRefDef,
                "extractUsedPgfNumFormat": extractUsedPgfNumFormat,
                "tagRegexp": tagRegexp,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extractBodyPages"]) -> MetaOapg.properties.extractBodyPages: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extractReferencePages"]) -> MetaOapg.properties.extractReferencePages: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extractMasterPages"]) -> MetaOapg.properties.extractMasterPages: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extractHiddenPages"]) -> MetaOapg.properties.extractHiddenPages: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extractVariables"]) -> MetaOapg.properties.extractVariables: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extractIndexMarkers"]) -> MetaOapg.properties.extractIndexMarkers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extractLinks"]) -> MetaOapg.properties.extractLinks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extractXRefDef"]) -> MetaOapg.properties.extractXRefDef: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extractPgfNumFormat"]) -> MetaOapg.properties.extractPgfNumFormat: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extractCustomReferencePages"]) -> MetaOapg.properties.extractCustomReferencePages: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extractDefaultReferencePages"]) -> MetaOapg.properties.extractDefaultReferencePages: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extractUsedVariables"]) -> MetaOapg.properties.extractUsedVariables: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extractHiddenCondText"]) -> MetaOapg.properties.extractHiddenCondText: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extractUsedXRefDef"]) -> MetaOapg.properties.extractUsedXRefDef: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extractUsedPgfNumFormat"]) -> MetaOapg.properties.extractUsedPgfNumFormat: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tagRegexp"]) -> MetaOapg.properties.tagRegexp: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["extractBodyPages", "extractReferencePages", "extractMasterPages", "extractHiddenPages", "extractVariables", "extractIndexMarkers", "extractLinks", "extractXRefDef", "extractPgfNumFormat", "extractCustomReferencePages", "extractDefaultReferencePages", "extractUsedVariables", "extractHiddenCondText", "extractUsedXRefDef", "extractUsedPgfNumFormat", "tagRegexp", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extractBodyPages"]) -> typing.Union[MetaOapg.properties.extractBodyPages, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extractReferencePages"]) -> typing.Union[MetaOapg.properties.extractReferencePages, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extractMasterPages"]) -> typing.Union[MetaOapg.properties.extractMasterPages, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extractHiddenPages"]) -> typing.Union[MetaOapg.properties.extractHiddenPages, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extractVariables"]) -> typing.Union[MetaOapg.properties.extractVariables, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extractIndexMarkers"]) -> typing.Union[MetaOapg.properties.extractIndexMarkers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extractLinks"]) -> typing.Union[MetaOapg.properties.extractLinks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extractXRefDef"]) -> typing.Union[MetaOapg.properties.extractXRefDef, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extractPgfNumFormat"]) -> typing.Union[MetaOapg.properties.extractPgfNumFormat, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extractCustomReferencePages"]) -> typing.Union[MetaOapg.properties.extractCustomReferencePages, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extractDefaultReferencePages"]) -> typing.Union[MetaOapg.properties.extractDefaultReferencePages, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extractUsedVariables"]) -> typing.Union[MetaOapg.properties.extractUsedVariables, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extractHiddenCondText"]) -> typing.Union[MetaOapg.properties.extractHiddenCondText, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extractUsedXRefDef"]) -> typing.Union[MetaOapg.properties.extractUsedXRefDef, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extractUsedPgfNumFormat"]) -> typing.Union[MetaOapg.properties.extractUsedPgfNumFormat, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tagRegexp"]) -> typing.Union[MetaOapg.properties.tagRegexp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["extractBodyPages", "extractReferencePages", "extractMasterPages", "extractHiddenPages", "extractVariables", "extractIndexMarkers", "extractLinks", "extractXRefDef", "extractPgfNumFormat", "extractCustomReferencePages", "extractDefaultReferencePages", "extractUsedVariables", "extractHiddenCondText", "extractUsedXRefDef", "extractUsedPgfNumFormat", "tagRegexp", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        extractBodyPages: typing.Union[MetaOapg.properties.extractBodyPages, bool, schemas.Unset] = schemas.unset,
        extractReferencePages: typing.Union[MetaOapg.properties.extractReferencePages, bool, schemas.Unset] = schemas.unset,
        extractMasterPages: typing.Union[MetaOapg.properties.extractMasterPages, bool, schemas.Unset] = schemas.unset,
        extractHiddenPages: typing.Union[MetaOapg.properties.extractHiddenPages, bool, schemas.Unset] = schemas.unset,
        extractVariables: typing.Union[MetaOapg.properties.extractVariables, bool, schemas.Unset] = schemas.unset,
        extractIndexMarkers: typing.Union[MetaOapg.properties.extractIndexMarkers, bool, schemas.Unset] = schemas.unset,
        extractLinks: typing.Union[MetaOapg.properties.extractLinks, bool, schemas.Unset] = schemas.unset,
        extractXRefDef: typing.Union[MetaOapg.properties.extractXRefDef, bool, schemas.Unset] = schemas.unset,
        extractPgfNumFormat: typing.Union[MetaOapg.properties.extractPgfNumFormat, bool, schemas.Unset] = schemas.unset,
        extractCustomReferencePages: typing.Union[MetaOapg.properties.extractCustomReferencePages, bool, schemas.Unset] = schemas.unset,
        extractDefaultReferencePages: typing.Union[MetaOapg.properties.extractDefaultReferencePages, bool, schemas.Unset] = schemas.unset,
        extractUsedVariables: typing.Union[MetaOapg.properties.extractUsedVariables, bool, schemas.Unset] = schemas.unset,
        extractHiddenCondText: typing.Union[MetaOapg.properties.extractHiddenCondText, bool, schemas.Unset] = schemas.unset,
        extractUsedXRefDef: typing.Union[MetaOapg.properties.extractUsedXRefDef, bool, schemas.Unset] = schemas.unset,
        extractUsedPgfNumFormat: typing.Union[MetaOapg.properties.extractUsedPgfNumFormat, bool, schemas.Unset] = schemas.unset,
        tagRegexp: typing.Union[MetaOapg.properties.tagRegexp, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MifSettingsDto':
        return super().__new__(
            cls,
            *_args,
            extractBodyPages=extractBodyPages,
            extractReferencePages=extractReferencePages,
            extractMasterPages=extractMasterPages,
            extractHiddenPages=extractHiddenPages,
            extractVariables=extractVariables,
            extractIndexMarkers=extractIndexMarkers,
            extractLinks=extractLinks,
            extractXRefDef=extractXRefDef,
            extractPgfNumFormat=extractPgfNumFormat,
            extractCustomReferencePages=extractCustomReferencePages,
            extractDefaultReferencePages=extractDefaultReferencePages,
            extractUsedVariables=extractUsedVariables,
            extractHiddenCondText=extractHiddenCondText,
            extractUsedXRefDef=extractUsedXRefDef,
            extractUsedPgfNumFormat=extractUsedPgfNumFormat,
            tagRegexp=tagRegexp,
            _configuration=_configuration,
            **kwargs,
        )
