# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class AbstractProjectDtoV2(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Base projectDto
    """


    class MetaOapg:
        
        @staticmethod
        def discriminator():
            return {
                'userRole': {
                    'Admin, Project Manager (v2)': AdminProjectManagerV2,
                    'Linguist (v2)': LinguistV2,
                }
            }
        
        class properties:
            uid = schemas.StrSchema
            internalId = schemas.Int32Schema
            id = schemas.StrSchema
            name = schemas.StrSchema
            dateCreated = schemas.DateTimeSchema
        
            @staticmethod
            def domain() -> typing.Type['DomainReference']:
                return DomainReference
        
            @staticmethod
            def subDomain() -> typing.Type['SubDomainReference']:
                return SubDomainReference
        
            @staticmethod
            def owner() -> typing.Type['UserReference']:
                return UserReference
            sourceLang = schemas.StrSchema
            
            
            class targetLangs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'targetLangs':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class references(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ReferenceFileReference']:
                        return ReferenceFileReference
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ReferenceFileReference'], typing.List['ReferenceFileReference']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'references':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ReferenceFileReference':
                    return super().__getitem__(i)
            
            
            class mtSettingsPerLanguageList(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MTSettingsPerLanguageReference']:
                        return MTSettingsPerLanguageReference
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['MTSettingsPerLanguageReference'], typing.List['MTSettingsPerLanguageReference']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mtSettingsPerLanguageList':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MTSettingsPerLanguageReference':
                    return super().__getitem__(i)
            userRole = schemas.StrSchema
            __annotations__ = {
                "uid": uid,
                "internalId": internalId,
                "id": id,
                "name": name,
                "dateCreated": dateCreated,
                "domain": domain,
                "subDomain": subDomain,
                "owner": owner,
                "sourceLang": sourceLang,
                "targetLangs": targetLangs,
                "references": references,
                "mtSettingsPerLanguageList": mtSettingsPerLanguageList,
                "userRole": userRole,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uid"]) -> MetaOapg.properties.uid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["internalId"]) -> MetaOapg.properties.internalId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain"]) -> 'DomainReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subDomain"]) -> 'SubDomainReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> 'UserReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceLang"]) -> MetaOapg.properties.sourceLang: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetLangs"]) -> MetaOapg.properties.targetLangs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["references"]) -> MetaOapg.properties.references: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mtSettingsPerLanguageList"]) -> MetaOapg.properties.mtSettingsPerLanguageList: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userRole"]) -> MetaOapg.properties.userRole: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["uid", "internalId", "id", "name", "dateCreated", "domain", "subDomain", "owner", "sourceLang", "targetLangs", "references", "mtSettingsPerLanguageList", "userRole", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uid"]) -> typing.Union[MetaOapg.properties.uid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["internalId"]) -> typing.Union[MetaOapg.properties.internalId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> typing.Union[MetaOapg.properties.dateCreated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domain"]) -> typing.Union['DomainReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subDomain"]) -> typing.Union['SubDomainReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union['UserReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceLang"]) -> typing.Union[MetaOapg.properties.sourceLang, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetLangs"]) -> typing.Union[MetaOapg.properties.targetLangs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["references"]) -> typing.Union[MetaOapg.properties.references, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mtSettingsPerLanguageList"]) -> typing.Union[MetaOapg.properties.mtSettingsPerLanguageList, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userRole"]) -> typing.Union[MetaOapg.properties.userRole, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["uid", "internalId", "id", "name", "dateCreated", "domain", "subDomain", "owner", "sourceLang", "targetLangs", "references", "mtSettingsPerLanguageList", "userRole", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        uid: typing.Union[MetaOapg.properties.uid, str, schemas.Unset] = schemas.unset,
        internalId: typing.Union[MetaOapg.properties.internalId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        dateCreated: typing.Union[MetaOapg.properties.dateCreated, str, datetime, schemas.Unset] = schemas.unset,
        domain: typing.Union['DomainReference', schemas.Unset] = schemas.unset,
        subDomain: typing.Union['SubDomainReference', schemas.Unset] = schemas.unset,
        owner: typing.Union['UserReference', schemas.Unset] = schemas.unset,
        sourceLang: typing.Union[MetaOapg.properties.sourceLang, str, schemas.Unset] = schemas.unset,
        targetLangs: typing.Union[MetaOapg.properties.targetLangs, list, tuple, schemas.Unset] = schemas.unset,
        references: typing.Union[MetaOapg.properties.references, list, tuple, schemas.Unset] = schemas.unset,
        mtSettingsPerLanguageList: typing.Union[MetaOapg.properties.mtSettingsPerLanguageList, list, tuple, schemas.Unset] = schemas.unset,
        userRole: typing.Union[MetaOapg.properties.userRole, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AbstractProjectDtoV2':
        return super().__new__(
            cls,
            *_args,
            uid=uid,
            internalId=internalId,
            id=id,
            name=name,
            dateCreated=dateCreated,
            domain=domain,
            subDomain=subDomain,
            owner=owner,
            sourceLang=sourceLang,
            targetLangs=targetLangs,
            references=references,
            mtSettingsPerLanguageList=mtSettingsPerLanguageList,
            userRole=userRole,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.admin_project_manager_v2 import AdminProjectManagerV2
from openapi_client.model.domain_reference import DomainReference
from openapi_client.model.linguist_v2 import LinguistV2
from openapi_client.model.mt_settings_per_language_reference import MTSettingsPerLanguageReference
from openapi_client.model.reference_file_reference import ReferenceFileReference
from openapi_client.model.sub_domain_reference import SubDomainReference
from openapi_client.model.user_reference import UserReference
