# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class Attribute(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            name = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "STRING": "STRING",
                        "BOOLEAN": "BOOLEAN",
                        "DECIMAL": "DECIMAL",
                        "INTEGER": "INTEGER",
                        "DATE_TIME": "DATE_TIME",
                        "BINARY": "BINARY",
                        "REFERENCE": "REFERENCE",
                        "COMPLEX": "COMPLEX",
                    }
                
                @schemas.classproperty
                def STRING(cls):
                    return cls("STRING")
                
                @schemas.classproperty
                def BOOLEAN(cls):
                    return cls("BOOLEAN")
                
                @schemas.classproperty
                def DECIMAL(cls):
                    return cls("DECIMAL")
                
                @schemas.classproperty
                def INTEGER(cls):
                    return cls("INTEGER")
                
                @schemas.classproperty
                def DATE_TIME(cls):
                    return cls("DATE_TIME")
                
                @schemas.classproperty
                def BINARY(cls):
                    return cls("BINARY")
                
                @schemas.classproperty
                def REFERENCE(cls):
                    return cls("REFERENCE")
                
                @schemas.classproperty
                def COMPLEX(cls):
                    return cls("COMPLEX")
            
            
            class subAttributes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Attribute']:
                        return Attribute
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Attribute'], typing.List['Attribute']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'subAttributes':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Attribute':
                    return super().__getitem__(i)
            multiValued = schemas.BoolSchema
            description = schemas.StrSchema
            required = schemas.BoolSchema
            caseExact = schemas.BoolSchema
            
            
            class mutability(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "READ_ONLY": "READ_ONLY",
                        "READ_WRITE": "READ_WRITE",
                        "IMMUTABLE": "IMMUTABLE",
                        "WRITE_ONLY": "WRITE_ONLY",
                    }
                
                @schemas.classproperty
                def READ_ONLY(cls):
                    return cls("READ_ONLY")
                
                @schemas.classproperty
                def READ_WRITE(cls):
                    return cls("READ_WRITE")
                
                @schemas.classproperty
                def IMMUTABLE(cls):
                    return cls("IMMUTABLE")
                
                @schemas.classproperty
                def WRITE_ONLY(cls):
                    return cls("WRITE_ONLY")
            
            
            class returned(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ALWAYS": "ALWAYS",
                        "NEVER": "NEVER",
                        "DEFAULT": "DEFAULT",
                        "REQUEST": "REQUEST",
                    }
                
                @schemas.classproperty
                def ALWAYS(cls):
                    return cls("ALWAYS")
                
                @schemas.classproperty
                def NEVER(cls):
                    return cls("NEVER")
                
                @schemas.classproperty
                def DEFAULT(cls):
                    return cls("DEFAULT")
                
                @schemas.classproperty
                def REQUEST(cls):
                    return cls("REQUEST")
            
            
            class uniqueness(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "NONE": "NONE",
                        "SERVER": "SERVER",
                        "GLOBAL": "GLOBAL",
                    }
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("NONE")
                
                @schemas.classproperty
                def SERVER(cls):
                    return cls("SERVER")
                
                @schemas.classproperty
                def GLOBAL(cls):
                    return cls("GLOBAL")
            __annotations__ = {
                "name": name,
                "type": type,
                "subAttributes": subAttributes,
                "multiValued": multiValued,
                "description": description,
                "required": required,
                "caseExact": caseExact,
                "mutability": mutability,
                "returned": returned,
                "uniqueness": uniqueness,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subAttributes"]) -> MetaOapg.properties.subAttributes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["multiValued"]) -> MetaOapg.properties.multiValued: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["required"]) -> MetaOapg.properties.required: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseExact"]) -> MetaOapg.properties.caseExact: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mutability"]) -> MetaOapg.properties.mutability: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["returned"]) -> MetaOapg.properties.returned: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uniqueness"]) -> MetaOapg.properties.uniqueness: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "type", "subAttributes", "multiValued", "description", "required", "caseExact", "mutability", "returned", "uniqueness", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subAttributes"]) -> typing.Union[MetaOapg.properties.subAttributes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["multiValued"]) -> typing.Union[MetaOapg.properties.multiValued, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["required"]) -> typing.Union[MetaOapg.properties.required, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseExact"]) -> typing.Union[MetaOapg.properties.caseExact, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mutability"]) -> typing.Union[MetaOapg.properties.mutability, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["returned"]) -> typing.Union[MetaOapg.properties.returned, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uniqueness"]) -> typing.Union[MetaOapg.properties.uniqueness, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "type", "subAttributes", "multiValued", "description", "required", "caseExact", "mutability", "returned", "uniqueness", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        subAttributes: typing.Union[MetaOapg.properties.subAttributes, list, tuple, schemas.Unset] = schemas.unset,
        multiValued: typing.Union[MetaOapg.properties.multiValued, bool, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        required: typing.Union[MetaOapg.properties.required, bool, schemas.Unset] = schemas.unset,
        caseExact: typing.Union[MetaOapg.properties.caseExact, bool, schemas.Unset] = schemas.unset,
        mutability: typing.Union[MetaOapg.properties.mutability, str, schemas.Unset] = schemas.unset,
        returned: typing.Union[MetaOapg.properties.returned, str, schemas.Unset] = schemas.unset,
        uniqueness: typing.Union[MetaOapg.properties.uniqueness, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Attribute':
        return super().__new__(
            cls,
            *_args,
            name=name,
            type=type,
            subAttributes=subAttributes,
            multiValued=multiValued,
            description=description,
            required=required,
            caseExact=caseExact,
            mutability=mutability,
            returned=returned,
            uniqueness=uniqueness,
            _configuration=_configuration,
            **kwargs,
        )
