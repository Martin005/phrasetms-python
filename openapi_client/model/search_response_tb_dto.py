# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class SearchResponseTbDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def termBase() -> typing.Type['TermBaseDto']:
                return TermBaseDto
            conceptId = schemas.StrSchema
        
            @staticmethod
            def sourceTerm() -> typing.Type['TermDto']:
                return TermDto
            
            
            class translationTerms(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TermDto']:
                        return TermDto
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['TermDto'], typing.List['TermDto']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'translationTerms':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TermDto':
                    return super().__getitem__(i)
            __annotations__ = {
                "termBase": termBase,
                "conceptId": conceptId,
                "sourceTerm": sourceTerm,
                "translationTerms": translationTerms,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["termBase"]) -> 'TermBaseDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conceptId"]) -> MetaOapg.properties.conceptId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceTerm"]) -> 'TermDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["translationTerms"]) -> MetaOapg.properties.translationTerms: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["termBase", "conceptId", "sourceTerm", "translationTerms", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["termBase"]) -> typing.Union['TermBaseDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conceptId"]) -> typing.Union[MetaOapg.properties.conceptId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceTerm"]) -> typing.Union['TermDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["translationTerms"]) -> typing.Union[MetaOapg.properties.translationTerms, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["termBase", "conceptId", "sourceTerm", "translationTerms", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        termBase: typing.Union['TermBaseDto', schemas.Unset] = schemas.unset,
        conceptId: typing.Union[MetaOapg.properties.conceptId, str, schemas.Unset] = schemas.unset,
        sourceTerm: typing.Union['TermDto', schemas.Unset] = schemas.unset,
        translationTerms: typing.Union[MetaOapg.properties.translationTerms, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SearchResponseTbDto':
        return super().__new__(
            cls,
            *_args,
            termBase=termBase,
            conceptId=conceptId,
            sourceTerm=sourceTerm,
            translationTerms=translationTerms,
            _configuration=_configuration,
            **kwargs,
        )

from phrasetms_client.model.term_base_dto import TermBaseDto
from phrasetms_client.model.term_dto import TermDto
