# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class MultilingualCsvSettingsDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            sourceColumns = schemas.StrSchema
            targetColumns = schemas.StrSchema
            contextNoteColumns = schemas.StrSchema
            contextKeyColumns = schemas.StrSchema
            tagRegexp = schemas.StrSchema
            htmlSubFilter = schemas.BoolSchema
            segmentation = schemas.BoolSchema
            
            
            class delimiter(
                schemas.StrSchema
            ):
                pass
            
            
            class delimiterType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def TAB(cls):
                    return cls("TAB")
                
                @schemas.classproperty
                def COMMA(cls):
                    return cls("COMMA")
                
                @schemas.classproperty
                def SEMICOLON(cls):
                    return cls("SEMICOLON")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("OTHER")
            importRows = schemas.StrSchema
            maxLenColumns = schemas.StrSchema
            
            
            class allTargetColumns(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.StrSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                ) -> 'allTargetColumns':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class nonEmptySegmentAction(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("NONE")
                
                @schemas.classproperty
                def CONFIRM(cls):
                    return cls("CONFIRM")
                
                @schemas.classproperty
                def LOCK(cls):
                    return cls("LOCK")
                
                @schemas.classproperty
                def CONFIRM_LOCK(cls):
                    return cls("CONFIRM_LOCK")
            saveConfirmedSegmentsToTm = schemas.BoolSchema
            __annotations__ = {
                "sourceColumns": sourceColumns,
                "targetColumns": targetColumns,
                "contextNoteColumns": contextNoteColumns,
                "contextKeyColumns": contextKeyColumns,
                "tagRegexp": tagRegexp,
                "htmlSubFilter": htmlSubFilter,
                "segmentation": segmentation,
                "delimiter": delimiter,
                "delimiterType": delimiterType,
                "importRows": importRows,
                "maxLenColumns": maxLenColumns,
                "allTargetColumns": allTargetColumns,
                "nonEmptySegmentAction": nonEmptySegmentAction,
                "saveConfirmedSegmentsToTm": saveConfirmedSegmentsToTm,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceColumns"]) -> MetaOapg.properties.sourceColumns: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetColumns"]) -> MetaOapg.properties.targetColumns: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contextNoteColumns"]) -> MetaOapg.properties.contextNoteColumns: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contextKeyColumns"]) -> MetaOapg.properties.contextKeyColumns: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tagRegexp"]) -> MetaOapg.properties.tagRegexp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["htmlSubFilter"]) -> MetaOapg.properties.htmlSubFilter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["segmentation"]) -> MetaOapg.properties.segmentation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delimiter"]) -> MetaOapg.properties.delimiter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delimiterType"]) -> MetaOapg.properties.delimiterType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["importRows"]) -> MetaOapg.properties.importRows: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxLenColumns"]) -> MetaOapg.properties.maxLenColumns: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allTargetColumns"]) -> MetaOapg.properties.allTargetColumns: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nonEmptySegmentAction"]) -> MetaOapg.properties.nonEmptySegmentAction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["saveConfirmedSegmentsToTm"]) -> MetaOapg.properties.saveConfirmedSegmentsToTm: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["sourceColumns", "targetColumns", "contextNoteColumns", "contextKeyColumns", "tagRegexp", "htmlSubFilter", "segmentation", "delimiter", "delimiterType", "importRows", "maxLenColumns", "allTargetColumns", "nonEmptySegmentAction", "saveConfirmedSegmentsToTm", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceColumns"]) -> typing.Union[MetaOapg.properties.sourceColumns, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetColumns"]) -> typing.Union[MetaOapg.properties.targetColumns, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contextNoteColumns"]) -> typing.Union[MetaOapg.properties.contextNoteColumns, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contextKeyColumns"]) -> typing.Union[MetaOapg.properties.contextKeyColumns, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tagRegexp"]) -> typing.Union[MetaOapg.properties.tagRegexp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["htmlSubFilter"]) -> typing.Union[MetaOapg.properties.htmlSubFilter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["segmentation"]) -> typing.Union[MetaOapg.properties.segmentation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delimiter"]) -> typing.Union[MetaOapg.properties.delimiter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delimiterType"]) -> typing.Union[MetaOapg.properties.delimiterType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["importRows"]) -> typing.Union[MetaOapg.properties.importRows, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxLenColumns"]) -> typing.Union[MetaOapg.properties.maxLenColumns, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allTargetColumns"]) -> typing.Union[MetaOapg.properties.allTargetColumns, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nonEmptySegmentAction"]) -> typing.Union[MetaOapg.properties.nonEmptySegmentAction, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["saveConfirmedSegmentsToTm"]) -> typing.Union[MetaOapg.properties.saveConfirmedSegmentsToTm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["sourceColumns", "targetColumns", "contextNoteColumns", "contextKeyColumns", "tagRegexp", "htmlSubFilter", "segmentation", "delimiter", "delimiterType", "importRows", "maxLenColumns", "allTargetColumns", "nonEmptySegmentAction", "saveConfirmedSegmentsToTm", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        sourceColumns: typing.Union[MetaOapg.properties.sourceColumns, str, schemas.Unset] = schemas.unset,
        targetColumns: typing.Union[MetaOapg.properties.targetColumns, str, schemas.Unset] = schemas.unset,
        contextNoteColumns: typing.Union[MetaOapg.properties.contextNoteColumns, str, schemas.Unset] = schemas.unset,
        contextKeyColumns: typing.Union[MetaOapg.properties.contextKeyColumns, str, schemas.Unset] = schemas.unset,
        tagRegexp: typing.Union[MetaOapg.properties.tagRegexp, str, schemas.Unset] = schemas.unset,
        htmlSubFilter: typing.Union[MetaOapg.properties.htmlSubFilter, bool, schemas.Unset] = schemas.unset,
        segmentation: typing.Union[MetaOapg.properties.segmentation, bool, schemas.Unset] = schemas.unset,
        delimiter: typing.Union[MetaOapg.properties.delimiter, str, schemas.Unset] = schemas.unset,
        delimiterType: typing.Union[MetaOapg.properties.delimiterType, str, schemas.Unset] = schemas.unset,
        importRows: typing.Union[MetaOapg.properties.importRows, str, schemas.Unset] = schemas.unset,
        maxLenColumns: typing.Union[MetaOapg.properties.maxLenColumns, str, schemas.Unset] = schemas.unset,
        allTargetColumns: typing.Union[MetaOapg.properties.allTargetColumns, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        nonEmptySegmentAction: typing.Union[MetaOapg.properties.nonEmptySegmentAction, str, schemas.Unset] = schemas.unset,
        saveConfirmedSegmentsToTm: typing.Union[MetaOapg.properties.saveConfirmedSegmentsToTm, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MultilingualCsvSettingsDto':
        return super().__new__(
            cls,
            *_args,
            sourceColumns=sourceColumns,
            targetColumns=targetColumns,
            contextNoteColumns=contextNoteColumns,
            contextKeyColumns=contextKeyColumns,
            tagRegexp=tagRegexp,
            htmlSubFilter=htmlSubFilter,
            segmentation=segmentation,
            delimiter=delimiter,
            delimiterType=delimiterType,
            importRows=importRows,
            maxLenColumns=maxLenColumns,
            allTargetColumns=allTargetColumns,
            nonEmptySegmentAction=nonEmptySegmentAction,
            saveConfirmedSegmentsToTm=saveConfirmedSegmentsToTm,
            _configuration=_configuration,
            **kwargs,
        )
