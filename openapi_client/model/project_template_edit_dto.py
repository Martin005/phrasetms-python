# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class ProjectTemplateEditDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "templateName",
        }
        
        class properties:
            
            
            class templateName(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 0
            
            
            class name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 0
            sourceLang = schemas.StrSchema
            
            
            class targetLangs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'targetLangs':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            useDynamicTitle = schemas.BoolSchema
            
            
            class dynamicTitle(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 0
        
            @staticmethod
            def notifyProvider() -> typing.Type['ProjectTemplateNotifyProviderDto']:
                return ProjectTemplateNotifyProviderDto
            
            
            class workFlowSettings(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['WorkflowStepSettingsEditDto']:
                        return WorkflowStepSettingsEditDto
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['WorkflowStepSettingsEditDto'], typing.List['WorkflowStepSettingsEditDto']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'workFlowSettings':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'WorkflowStepSettingsEditDto':
                    return super().__getitem__(i)
        
            @staticmethod
            def client() -> typing.Type['IdReference']:
                return IdReference
        
            @staticmethod
            def costCenter() -> typing.Type['IdReference']:
                return IdReference
        
            @staticmethod
            def businessUnit() -> typing.Type['IdReference']:
                return IdReference
        
            @staticmethod
            def domain() -> typing.Type['IdReference']:
                return IdReference
        
            @staticmethod
            def subDomain() -> typing.Type['IdReference']:
                return IdReference
        
            @staticmethod
            def vendor() -> typing.Type['IdReference']:
                return IdReference
        
            @staticmethod
            def importSettings() -> typing.Type['UidReference']:
                return UidReference
            
            
            class note(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 4096
                    min_length = 0
            fileHandover = schemas.BoolSchema
            
            
            class assignedTo(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ProjectTemplateWorkflowSettingsAssignedToDto']:
                        return ProjectTemplateWorkflowSettingsAssignedToDto
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ProjectTemplateWorkflowSettingsAssignedToDto'], typing.List['ProjectTemplateWorkflowSettingsAssignedToDto']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'assignedTo':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ProjectTemplateWorkflowSettingsAssignedToDto':
                    return super().__getitem__(i)
            __annotations__ = {
                "templateName": templateName,
                "name": name,
                "sourceLang": sourceLang,
                "targetLangs": targetLangs,
                "useDynamicTitle": useDynamicTitle,
                "dynamicTitle": dynamicTitle,
                "notifyProvider": notifyProvider,
                "workFlowSettings": workFlowSettings,
                "client": client,
                "costCenter": costCenter,
                "businessUnit": businessUnit,
                "domain": domain,
                "subDomain": subDomain,
                "vendor": vendor,
                "importSettings": importSettings,
                "note": note,
                "fileHandover": fileHandover,
                "assignedTo": assignedTo,
            }
    
    templateName: MetaOapg.properties.templateName
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["templateName"]) -> MetaOapg.properties.templateName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceLang"]) -> MetaOapg.properties.sourceLang: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetLangs"]) -> MetaOapg.properties.targetLangs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["useDynamicTitle"]) -> MetaOapg.properties.useDynamicTitle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dynamicTitle"]) -> MetaOapg.properties.dynamicTitle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notifyProvider"]) -> 'ProjectTemplateNotifyProviderDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workFlowSettings"]) -> MetaOapg.properties.workFlowSettings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client"]) -> 'IdReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costCenter"]) -> 'IdReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["businessUnit"]) -> 'IdReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain"]) -> 'IdReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subDomain"]) -> 'IdReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor"]) -> 'IdReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["importSettings"]) -> 'UidReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fileHandover"]) -> MetaOapg.properties.fileHandover: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assignedTo"]) -> MetaOapg.properties.assignedTo: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["templateName", "name", "sourceLang", "targetLangs", "useDynamicTitle", "dynamicTitle", "notifyProvider", "workFlowSettings", "client", "costCenter", "businessUnit", "domain", "subDomain", "vendor", "importSettings", "note", "fileHandover", "assignedTo", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["templateName"]) -> MetaOapg.properties.templateName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceLang"]) -> typing.Union[MetaOapg.properties.sourceLang, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetLangs"]) -> typing.Union[MetaOapg.properties.targetLangs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["useDynamicTitle"]) -> typing.Union[MetaOapg.properties.useDynamicTitle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dynamicTitle"]) -> typing.Union[MetaOapg.properties.dynamicTitle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notifyProvider"]) -> typing.Union['ProjectTemplateNotifyProviderDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workFlowSettings"]) -> typing.Union[MetaOapg.properties.workFlowSettings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client"]) -> typing.Union['IdReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costCenter"]) -> typing.Union['IdReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["businessUnit"]) -> typing.Union['IdReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domain"]) -> typing.Union['IdReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subDomain"]) -> typing.Union['IdReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor"]) -> typing.Union['IdReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["importSettings"]) -> typing.Union['UidReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fileHandover"]) -> typing.Union[MetaOapg.properties.fileHandover, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assignedTo"]) -> typing.Union[MetaOapg.properties.assignedTo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["templateName", "name", "sourceLang", "targetLangs", "useDynamicTitle", "dynamicTitle", "notifyProvider", "workFlowSettings", "client", "costCenter", "businessUnit", "domain", "subDomain", "vendor", "importSettings", "note", "fileHandover", "assignedTo", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        templateName: typing.Union[MetaOapg.properties.templateName, str, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        sourceLang: typing.Union[MetaOapg.properties.sourceLang, str, schemas.Unset] = schemas.unset,
        targetLangs: typing.Union[MetaOapg.properties.targetLangs, list, tuple, schemas.Unset] = schemas.unset,
        useDynamicTitle: typing.Union[MetaOapg.properties.useDynamicTitle, bool, schemas.Unset] = schemas.unset,
        dynamicTitle: typing.Union[MetaOapg.properties.dynamicTitle, str, schemas.Unset] = schemas.unset,
        notifyProvider: typing.Union['ProjectTemplateNotifyProviderDto', schemas.Unset] = schemas.unset,
        workFlowSettings: typing.Union[MetaOapg.properties.workFlowSettings, list, tuple, schemas.Unset] = schemas.unset,
        client: typing.Union['IdReference', schemas.Unset] = schemas.unset,
        costCenter: typing.Union['IdReference', schemas.Unset] = schemas.unset,
        businessUnit: typing.Union['IdReference', schemas.Unset] = schemas.unset,
        domain: typing.Union['IdReference', schemas.Unset] = schemas.unset,
        subDomain: typing.Union['IdReference', schemas.Unset] = schemas.unset,
        vendor: typing.Union['IdReference', schemas.Unset] = schemas.unset,
        importSettings: typing.Union['UidReference', schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        fileHandover: typing.Union[MetaOapg.properties.fileHandover, bool, schemas.Unset] = schemas.unset,
        assignedTo: typing.Union[MetaOapg.properties.assignedTo, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProjectTemplateEditDto':
        return super().__new__(
            cls,
            *_args,
            templateName=templateName,
            name=name,
            sourceLang=sourceLang,
            targetLangs=targetLangs,
            useDynamicTitle=useDynamicTitle,
            dynamicTitle=dynamicTitle,
            notifyProvider=notifyProvider,
            workFlowSettings=workFlowSettings,
            client=client,
            costCenter=costCenter,
            businessUnit=businessUnit,
            domain=domain,
            subDomain=subDomain,
            vendor=vendor,
            importSettings=importSettings,
            note=note,
            fileHandover=fileHandover,
            assignedTo=assignedTo,
            _configuration=_configuration,
            **kwargs,
        )

from phrasetms_client.model.id_reference import IdReference
from phrasetms_client.model.project_template_notify_provider_dto import ProjectTemplateNotifyProviderDto
from phrasetms_client.model.project_template_workflow_settings_assigned_to_dto import ProjectTemplateWorkflowSettingsAssignedToDto
from phrasetms_client.model.uid_reference import UidReference
from phrasetms_client.model.workflow_step_settings_edit_dto import WorkflowStepSettingsEditDto
