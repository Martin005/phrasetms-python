# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class VendorDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            uid = schemas.StrSchema
            name = schemas.StrSchema
            vendorToken = schemas.StrSchema
        
            @staticmethod
            def priceList() -> typing.Type['PriceListReference']:
                return PriceListReference
        
            @staticmethod
            def netRateScheme() -> typing.Type['DiscountSchemeReference']:
                return DiscountSchemeReference
            
            
            class sourceLocales(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sourceLocales':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class targetLocales(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'targetLocales':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class clients(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ClientReference']:
                        return ClientReference
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ClientReference'], typing.List['ClientReference']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'clients':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ClientReference':
                    return super().__getitem__(i)
            
            
            class domains(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DomainReference']:
                        return DomainReference
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DomainReference'], typing.List['DomainReference']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'domains':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DomainReference':
                    return super().__getitem__(i)
            
            
            class subDomains(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SubDomainReference']:
                        return SubDomainReference
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['SubDomainReference'], typing.List['SubDomainReference']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'subDomains':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SubDomainReference':
                    return super().__getitem__(i)
            
            
            class workflowSteps(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['WorkflowStepReference']:
                        return WorkflowStepReference
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['WorkflowStepReference'], typing.List['WorkflowStepReference']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'workflowSteps':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'WorkflowStepReference':
                    return super().__getitem__(i)
            __annotations__ = {
                "id": id,
                "uid": uid,
                "name": name,
                "vendorToken": vendorToken,
                "priceList": priceList,
                "netRateScheme": netRateScheme,
                "sourceLocales": sourceLocales,
                "targetLocales": targetLocales,
                "clients": clients,
                "domains": domains,
                "subDomains": subDomains,
                "workflowSteps": workflowSteps,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uid"]) -> MetaOapg.properties.uid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendorToken"]) -> MetaOapg.properties.vendorToken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priceList"]) -> 'PriceListReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["netRateScheme"]) -> 'DiscountSchemeReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceLocales"]) -> MetaOapg.properties.sourceLocales: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetLocales"]) -> MetaOapg.properties.targetLocales: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clients"]) -> MetaOapg.properties.clients: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domains"]) -> MetaOapg.properties.domains: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subDomains"]) -> MetaOapg.properties.subDomains: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowSteps"]) -> MetaOapg.properties.workflowSteps: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "uid", "name", "vendorToken", "priceList", "netRateScheme", "sourceLocales", "targetLocales", "clients", "domains", "subDomains", "workflowSteps", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uid"]) -> typing.Union[MetaOapg.properties.uid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendorToken"]) -> typing.Union[MetaOapg.properties.vendorToken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priceList"]) -> typing.Union['PriceListReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["netRateScheme"]) -> typing.Union['DiscountSchemeReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceLocales"]) -> typing.Union[MetaOapg.properties.sourceLocales, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetLocales"]) -> typing.Union[MetaOapg.properties.targetLocales, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clients"]) -> typing.Union[MetaOapg.properties.clients, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domains"]) -> typing.Union[MetaOapg.properties.domains, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subDomains"]) -> typing.Union[MetaOapg.properties.subDomains, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowSteps"]) -> typing.Union[MetaOapg.properties.workflowSteps, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "uid", "name", "vendorToken", "priceList", "netRateScheme", "sourceLocales", "targetLocales", "clients", "domains", "subDomains", "workflowSteps", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        uid: typing.Union[MetaOapg.properties.uid, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        vendorToken: typing.Union[MetaOapg.properties.vendorToken, str, schemas.Unset] = schemas.unset,
        priceList: typing.Union['PriceListReference', schemas.Unset] = schemas.unset,
        netRateScheme: typing.Union['DiscountSchemeReference', schemas.Unset] = schemas.unset,
        sourceLocales: typing.Union[MetaOapg.properties.sourceLocales, list, tuple, schemas.Unset] = schemas.unset,
        targetLocales: typing.Union[MetaOapg.properties.targetLocales, list, tuple, schemas.Unset] = schemas.unset,
        clients: typing.Union[MetaOapg.properties.clients, list, tuple, schemas.Unset] = schemas.unset,
        domains: typing.Union[MetaOapg.properties.domains, list, tuple, schemas.Unset] = schemas.unset,
        subDomains: typing.Union[MetaOapg.properties.subDomains, list, tuple, schemas.Unset] = schemas.unset,
        workflowSteps: typing.Union[MetaOapg.properties.workflowSteps, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VendorDto':
        return super().__new__(
            cls,
            *_args,
            id=id,
            uid=uid,
            name=name,
            vendorToken=vendorToken,
            priceList=priceList,
            netRateScheme=netRateScheme,
            sourceLocales=sourceLocales,
            targetLocales=targetLocales,
            clients=clients,
            domains=domains,
            subDomains=subDomains,
            workflowSteps=workflowSteps,
            _configuration=_configuration,
            **kwargs,
        )

from phrasetms_client.model.client_reference import ClientReference
from phrasetms_client.model.discount_scheme_reference import DiscountSchemeReference
from phrasetms_client.model.domain_reference import DomainReference
from phrasetms_client.model.price_list_reference import PriceListReference
from phrasetms_client.model.sub_domain_reference import SubDomainReference
from phrasetms_client.model.workflow_step_reference import WorkflowStepReference
