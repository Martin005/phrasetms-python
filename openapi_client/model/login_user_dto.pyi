# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class LoginUserDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def user() -> typing.Type['UserReference']:
                return UserReference
            csrfToken = schemas.StrSchema
        
            @staticmethod
            def organization() -> typing.Type['OrganizationReference']:
                return OrganizationReference
        
            @staticmethod
            def edition() -> typing.Type['EditionDto']:
                return EditionDto
        
            @staticmethod
            def features() -> typing.Type['FeaturesDto']:
                return FeaturesDto
            __annotations__ = {
                "user": user,
                "csrfToken": csrfToken,
                "organization": organization,
                "edition": edition,
                "features": features,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'UserReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["csrfToken"]) -> MetaOapg.properties.csrfToken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organization"]) -> 'OrganizationReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["edition"]) -> 'EditionDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["features"]) -> 'FeaturesDto': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["user", "csrfToken", "organization", "edition", "features", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union['UserReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["csrfToken"]) -> typing.Union[MetaOapg.properties.csrfToken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organization"]) -> typing.Union['OrganizationReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["edition"]) -> typing.Union['EditionDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["features"]) -> typing.Union['FeaturesDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["user", "csrfToken", "organization", "edition", "features", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        user: typing.Union['UserReference', schemas.Unset] = schemas.unset,
        csrfToken: typing.Union[MetaOapg.properties.csrfToken, str, schemas.Unset] = schemas.unset,
        organization: typing.Union['OrganizationReference', schemas.Unset] = schemas.unset,
        edition: typing.Union['EditionDto', schemas.Unset] = schemas.unset,
        features: typing.Union['FeaturesDto', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LoginUserDto':
        return super().__new__(
            cls,
            *_args,
            user=user,
            csrfToken=csrfToken,
            organization=organization,
            edition=edition,
            features=features,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.edition_dto import EditionDto
from openapi_client.model.features_dto import FeaturesDto
from openapi_client.model.organization_reference import OrganizationReference
from openapi_client.model.user_reference import UserReference
