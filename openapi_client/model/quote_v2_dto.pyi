# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class QuoteV2Dto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.Int64Schema
            uid = schemas.StrSchema
            name = schemas.StrSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def APPROVED(cls):
                    return cls("APPROVED")
                
                @schemas.classproperty
                def DECLINED(cls):
                    return cls("DECLINED")
                
                @schemas.classproperty
                def DRAFT(cls):
                    return cls("DRAFT")
                
                @schemas.classproperty
                def FOR_APPROVAL(cls):
                    return cls("FOR_APPROVAL")
                
                @schemas.classproperty
                def NEW(cls):
                    return cls("NEW")
            currency = schemas.StrSchema
            
            
            class billingUnit(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def CHARACTER(cls):
                    return cls("Character")
                
                @schemas.classproperty
                def WORD(cls):
                    return cls("Word")
                
                @schemas.classproperty
                def PAGE(cls):
                    return cls("Page")
                
                @schemas.classproperty
                def HOUR(cls):
                    return cls("Hour")
        
            @staticmethod
            def createdBy() -> typing.Type['UserReference']:
                return UserReference
            dateCreated = schemas.DateTimeSchema
            totalPrice = schemas.Float64Schema
        
            @staticmethod
            def netRateScheme() -> typing.Type['NetRateSchemeReference']:
                return NetRateSchemeReference
        
            @staticmethod
            def priceList() -> typing.Type['PriceListReference']:
                return PriceListReference
            
            
            class workflowStepList(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['WorkflowStepReference']:
                        return WorkflowStepReference
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['WorkflowStepReference'], typing.List['WorkflowStepReference']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'workflowStepList':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'WorkflowStepReference':
                    return super().__getitem__(i)
        
            @staticmethod
            def provider() -> typing.Type['ProviderReference']:
                return ProviderReference
            customerEmail = schemas.StrSchema
            
            
            class quoteType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def BUYER(cls):
                    return cls("BUYER")
                
                @schemas.classproperty
                def PROVIDER(cls):
                    return cls("PROVIDER")
            editable = schemas.BoolSchema
            outdated = schemas.BoolSchema
            
            
            class additionalSteps(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AdditionalWorkflowStepV2Dto']:
                        return AdditionalWorkflowStepV2Dto
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['AdditionalWorkflowStepV2Dto'], typing.List['AdditionalWorkflowStepV2Dto']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'additionalSteps':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AdditionalWorkflowStepV2Dto':
                    return super().__getitem__(i)
            __annotations__ = {
                "id": id,
                "uid": uid,
                "name": name,
                "status": status,
                "currency": currency,
                "billingUnit": billingUnit,
                "createdBy": createdBy,
                "dateCreated": dateCreated,
                "totalPrice": totalPrice,
                "netRateScheme": netRateScheme,
                "priceList": priceList,
                "workflowStepList": workflowStepList,
                "provider": provider,
                "customerEmail": customerEmail,
                "quoteType": quoteType,
                "editable": editable,
                "outdated": outdated,
                "additionalSteps": additionalSteps,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uid"]) -> MetaOapg.properties.uid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billingUnit"]) -> MetaOapg.properties.billingUnit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdBy"]) -> 'UserReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalPrice"]) -> MetaOapg.properties.totalPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["netRateScheme"]) -> 'NetRateSchemeReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priceList"]) -> 'PriceListReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowStepList"]) -> MetaOapg.properties.workflowStepList: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["provider"]) -> 'ProviderReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerEmail"]) -> MetaOapg.properties.customerEmail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quoteType"]) -> MetaOapg.properties.quoteType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["editable"]) -> MetaOapg.properties.editable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["outdated"]) -> MetaOapg.properties.outdated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalSteps"]) -> MetaOapg.properties.additionalSteps: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "uid", "name", "status", "currency", "billingUnit", "createdBy", "dateCreated", "totalPrice", "netRateScheme", "priceList", "workflowStepList", "provider", "customerEmail", "quoteType", "editable", "outdated", "additionalSteps", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uid"]) -> typing.Union[MetaOapg.properties.uid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billingUnit"]) -> typing.Union[MetaOapg.properties.billingUnit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdBy"]) -> typing.Union['UserReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> typing.Union[MetaOapg.properties.dateCreated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalPrice"]) -> typing.Union[MetaOapg.properties.totalPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["netRateScheme"]) -> typing.Union['NetRateSchemeReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priceList"]) -> typing.Union['PriceListReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowStepList"]) -> typing.Union[MetaOapg.properties.workflowStepList, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["provider"]) -> typing.Union['ProviderReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerEmail"]) -> typing.Union[MetaOapg.properties.customerEmail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quoteType"]) -> typing.Union[MetaOapg.properties.quoteType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["editable"]) -> typing.Union[MetaOapg.properties.editable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["outdated"]) -> typing.Union[MetaOapg.properties.outdated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalSteps"]) -> typing.Union[MetaOapg.properties.additionalSteps, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "uid", "name", "status", "currency", "billingUnit", "createdBy", "dateCreated", "totalPrice", "netRateScheme", "priceList", "workflowStepList", "provider", "customerEmail", "quoteType", "editable", "outdated", "additionalSteps", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        uid: typing.Union[MetaOapg.properties.uid, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        currency: typing.Union[MetaOapg.properties.currency, str, schemas.Unset] = schemas.unset,
        billingUnit: typing.Union[MetaOapg.properties.billingUnit, str, schemas.Unset] = schemas.unset,
        createdBy: typing.Union['UserReference', schemas.Unset] = schemas.unset,
        dateCreated: typing.Union[MetaOapg.properties.dateCreated, str, datetime, schemas.Unset] = schemas.unset,
        totalPrice: typing.Union[MetaOapg.properties.totalPrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        netRateScheme: typing.Union['NetRateSchemeReference', schemas.Unset] = schemas.unset,
        priceList: typing.Union['PriceListReference', schemas.Unset] = schemas.unset,
        workflowStepList: typing.Union[MetaOapg.properties.workflowStepList, list, tuple, schemas.Unset] = schemas.unset,
        provider: typing.Union['ProviderReference', schemas.Unset] = schemas.unset,
        customerEmail: typing.Union[MetaOapg.properties.customerEmail, str, schemas.Unset] = schemas.unset,
        quoteType: typing.Union[MetaOapg.properties.quoteType, str, schemas.Unset] = schemas.unset,
        editable: typing.Union[MetaOapg.properties.editable, bool, schemas.Unset] = schemas.unset,
        outdated: typing.Union[MetaOapg.properties.outdated, bool, schemas.Unset] = schemas.unset,
        additionalSteps: typing.Union[MetaOapg.properties.additionalSteps, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'QuoteV2Dto':
        return super().__new__(
            cls,
            *_args,
            id=id,
            uid=uid,
            name=name,
            status=status,
            currency=currency,
            billingUnit=billingUnit,
            createdBy=createdBy,
            dateCreated=dateCreated,
            totalPrice=totalPrice,
            netRateScheme=netRateScheme,
            priceList=priceList,
            workflowStepList=workflowStepList,
            provider=provider,
            customerEmail=customerEmail,
            quoteType=quoteType,
            editable=editable,
            outdated=outdated,
            additionalSteps=additionalSteps,
            _configuration=_configuration,
            **kwargs,
        )

from phrasetms_client.model.additional_workflow_step_v2_dto import AdditionalWorkflowStepV2Dto
from phrasetms_client.model.net_rate_scheme_reference import NetRateSchemeReference
from phrasetms_client.model.price_list_reference import PriceListReference
from phrasetms_client.model.provider_reference import ProviderReference
from phrasetms_client.model.user_reference import UserReference
from phrasetms_client.model.workflow_step_reference import WorkflowStepReference
