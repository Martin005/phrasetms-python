# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class ProjectTranslationMemoryReference(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            transMem = schemas.DictSchema
            name = schemas.StrSchema
            workflowStep = schemas.DictSchema
            targetLang = schemas.StrSchema
            penalty = schemas.Float64Schema
            readMode = schemas.BoolSchema
            __annotations__ = {
                "id": id,
                "transMem": transMem,
                "name": name,
                "workflowStep": workflowStep,
                "targetLang": targetLang,
                "penalty": penalty,
                "readMode": readMode,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transMem"]) -> MetaOapg.properties.transMem: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowStep"]) -> MetaOapg.properties.workflowStep: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetLang"]) -> MetaOapg.properties.targetLang: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["penalty"]) -> MetaOapg.properties.penalty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["readMode"]) -> MetaOapg.properties.readMode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "transMem", "name", "workflowStep", "targetLang", "penalty", "readMode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transMem"]) -> typing.Union[MetaOapg.properties.transMem, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowStep"]) -> typing.Union[MetaOapg.properties.workflowStep, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetLang"]) -> typing.Union[MetaOapg.properties.targetLang, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["penalty"]) -> typing.Union[MetaOapg.properties.penalty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["readMode"]) -> typing.Union[MetaOapg.properties.readMode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "transMem", "name", "workflowStep", "targetLang", "penalty", "readMode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        transMem: typing.Union[MetaOapg.properties.transMem, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        workflowStep: typing.Union[MetaOapg.properties.workflowStep, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        targetLang: typing.Union[MetaOapg.properties.targetLang, str, schemas.Unset] = schemas.unset,
        penalty: typing.Union[MetaOapg.properties.penalty, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        readMode: typing.Union[MetaOapg.properties.readMode, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProjectTranslationMemoryReference':
        return super().__new__(
            cls,
            *_args,
            id=id,
            transMem=transMem,
            name=name,
            workflowStep=workflowStep,
            targetLang=targetLang,
            penalty=penalty,
            readMode=readMode,
            _configuration=_configuration,
            **kwargs,
        )
