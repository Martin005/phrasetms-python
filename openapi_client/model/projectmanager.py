# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class PROJECTMANAGER(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class sourceLocales(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            items = schemas.StrSchema
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'sourceLocales':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    
                    
                    class targetLocales(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            items = schemas.StrSchema
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'targetLocales':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    
                    
                    class workflowSteps(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['UidReference']:
                                return UidReference
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple['UidReference'], typing.List['UidReference']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'workflowSteps':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'UidReference':
                            return super().__getitem__(i)
                    
                    
                    class clients(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['UidReference']:
                                return UidReference
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple['UidReference'], typing.List['UidReference']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'clients':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'UidReference':
                            return super().__getitem__(i)
                    
                    
                    class domains(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['UidReference']:
                                return UidReference
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple['UidReference'], typing.List['UidReference']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'domains':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'UidReference':
                            return super().__getitem__(i)
                    
                    
                    class subDomains(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['UidReference']:
                                return UidReference
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple['UidReference'], typing.List['UidReference']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'subDomains':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'UidReference':
                            return super().__getitem__(i)
                    projectCreate = schemas.BoolSchema
                    projectViewOther = schemas.BoolSchema
                    projectEditOther = schemas.BoolSchema
                    projectDeleteOther = schemas.BoolSchema
                    
                    
                    class projectClients(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['UidReference']:
                                return UidReference
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple['UidReference'], typing.List['UidReference']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'projectClients':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'UidReference':
                            return super().__getitem__(i)
                    
                    
                    class projectBusinessUnits(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['UidReference']:
                                return UidReference
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple['UidReference'], typing.List['UidReference']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'projectBusinessUnits':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'UidReference':
                            return super().__getitem__(i)
                    projectTemplateCreate = schemas.BoolSchema
                    projectTemplateViewOther = schemas.BoolSchema
                    projectTemplateEditOther = schemas.BoolSchema
                    projectTemplateDeleteOther = schemas.BoolSchema
                    
                    
                    class projectTemplateClients(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['UidReference']:
                                return UidReference
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple['UidReference'], typing.List['UidReference']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'projectTemplateClients':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'UidReference':
                            return super().__getitem__(i)
                    
                    
                    class projectTemplateBusinessUnits(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['UidReference']:
                                return UidReference
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple['UidReference'], typing.List['UidReference']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'projectTemplateBusinessUnits':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'UidReference':
                            return super().__getitem__(i)
                    transMemoryCreate = schemas.BoolSchema
                    transMemoryViewOther = schemas.BoolSchema
                    transMemoryEditOther = schemas.BoolSchema
                    transMemoryDeleteOther = schemas.BoolSchema
                    transMemoryExportOther = schemas.BoolSchema
                    transMemoryImportOther = schemas.BoolSchema
                    
                    
                    class transMemoryClients(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['UidReference']:
                                return UidReference
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple['UidReference'], typing.List['UidReference']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'transMemoryClients':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'UidReference':
                            return super().__getitem__(i)
                    
                    
                    class transMemoryBusinessUnits(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['UidReference']:
                                return UidReference
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple['UidReference'], typing.List['UidReference']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'transMemoryBusinessUnits':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'UidReference':
                            return super().__getitem__(i)
                    termBaseCreate = schemas.BoolSchema
                    termBaseViewOther = schemas.BoolSchema
                    termBaseEditOther = schemas.BoolSchema
                    termBaseDeleteOther = schemas.BoolSchema
                    termBaseExportOther = schemas.BoolSchema
                    termBaseImportOther = schemas.BoolSchema
                    termBaseApproveOther = schemas.BoolSchema
                    
                    
                    class termBaseClients(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['UidReference']:
                                return UidReference
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple['UidReference'], typing.List['UidReference']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'termBaseClients':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'UidReference':
                            return super().__getitem__(i)
                    
                    
                    class termBaseBusinessUnits(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['UidReference']:
                                return UidReference
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple['UidReference'], typing.List['UidReference']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'termBaseBusinessUnits':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'UidReference':
                            return super().__getitem__(i)
                    userCreate = schemas.BoolSchema
                    userViewOther = schemas.BoolSchema
                    userEditOther = schemas.BoolSchema
                    userDeleteOther = schemas.BoolSchema
                    clientDomainSubDomainCreate = schemas.BoolSchema
                    clientDomainSubDomainViewOther = schemas.BoolSchema
                    clientDomainSubDomainEditOther = schemas.BoolSchema
                    clientDomainSubDomainDeleteOther = schemas.BoolSchema
                    vendorCreate = schemas.BoolSchema
                    vendorViewOther = schemas.BoolSchema
                    vendorEditOther = schemas.BoolSchema
                    vendorDeleteOther = schemas.BoolSchema
                    
                    
                    class dashboardSetting(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "ALL_DATA": "ALL_DATA",
                                "OWN_DATA": "OWN_DATA",
                                "NO_DASHBOARD": "NO_DASHBOARD",
                            }
                        
                        @schemas.classproperty
                        def ALL_DATA(cls):
                            return cls("ALL_DATA")
                        
                        @schemas.classproperty
                        def OWN_DATA(cls):
                            return cls("OWN_DATA")
                        
                        @schemas.classproperty
                        def NO_DASHBOARD(cls):
                            return cls("NO_DASHBOARD")
                    setupServer = schemas.BoolSchema
                    __annotations__ = {
                        "sourceLocales": sourceLocales,
                        "targetLocales": targetLocales,
                        "workflowSteps": workflowSteps,
                        "clients": clients,
                        "domains": domains,
                        "subDomains": subDomains,
                        "projectCreate": projectCreate,
                        "projectViewOther": projectViewOther,
                        "projectEditOther": projectEditOther,
                        "projectDeleteOther": projectDeleteOther,
                        "projectClients": projectClients,
                        "projectBusinessUnits": projectBusinessUnits,
                        "projectTemplateCreate": projectTemplateCreate,
                        "projectTemplateViewOther": projectTemplateViewOther,
                        "projectTemplateEditOther": projectTemplateEditOther,
                        "projectTemplateDeleteOther": projectTemplateDeleteOther,
                        "projectTemplateClients": projectTemplateClients,
                        "projectTemplateBusinessUnits": projectTemplateBusinessUnits,
                        "transMemoryCreate": transMemoryCreate,
                        "transMemoryViewOther": transMemoryViewOther,
                        "transMemoryEditOther": transMemoryEditOther,
                        "transMemoryDeleteOther": transMemoryDeleteOther,
                        "transMemoryExportOther": transMemoryExportOther,
                        "transMemoryImportOther": transMemoryImportOther,
                        "transMemoryClients": transMemoryClients,
                        "transMemoryBusinessUnits": transMemoryBusinessUnits,
                        "termBaseCreate": termBaseCreate,
                        "termBaseViewOther": termBaseViewOther,
                        "termBaseEditOther": termBaseEditOther,
                        "termBaseDeleteOther": termBaseDeleteOther,
                        "termBaseExportOther": termBaseExportOther,
                        "termBaseImportOther": termBaseImportOther,
                        "termBaseApproveOther": termBaseApproveOther,
                        "termBaseClients": termBaseClients,
                        "termBaseBusinessUnits": termBaseBusinessUnits,
                        "userCreate": userCreate,
                        "userViewOther": userViewOther,
                        "userEditOther": userEditOther,
                        "userDeleteOther": userDeleteOther,
                        "clientDomainSubDomainCreate": clientDomainSubDomainCreate,
                        "clientDomainSubDomainViewOther": clientDomainSubDomainViewOther,
                        "clientDomainSubDomainEditOther": clientDomainSubDomainEditOther,
                        "clientDomainSubDomainDeleteOther": clientDomainSubDomainDeleteOther,
                        "vendorCreate": vendorCreate,
                        "vendorViewOther": vendorViewOther,
                        "vendorEditOther": vendorEditOther,
                        "vendorDeleteOther": vendorDeleteOther,
                        "dashboardSetting": dashboardSetting,
                        "setupServer": setupServer,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["sourceLocales"]) -> MetaOapg.properties.sourceLocales: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["targetLocales"]) -> MetaOapg.properties.targetLocales: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["workflowSteps"]) -> MetaOapg.properties.workflowSteps: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["clients"]) -> MetaOapg.properties.clients: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["domains"]) -> MetaOapg.properties.domains: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["subDomains"]) -> MetaOapg.properties.subDomains: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["projectCreate"]) -> MetaOapg.properties.projectCreate: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["projectViewOther"]) -> MetaOapg.properties.projectViewOther: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["projectEditOther"]) -> MetaOapg.properties.projectEditOther: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["projectDeleteOther"]) -> MetaOapg.properties.projectDeleteOther: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["projectClients"]) -> MetaOapg.properties.projectClients: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["projectBusinessUnits"]) -> MetaOapg.properties.projectBusinessUnits: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["projectTemplateCreate"]) -> MetaOapg.properties.projectTemplateCreate: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["projectTemplateViewOther"]) -> MetaOapg.properties.projectTemplateViewOther: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["projectTemplateEditOther"]) -> MetaOapg.properties.projectTemplateEditOther: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["projectTemplateDeleteOther"]) -> MetaOapg.properties.projectTemplateDeleteOther: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["projectTemplateClients"]) -> MetaOapg.properties.projectTemplateClients: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["projectTemplateBusinessUnits"]) -> MetaOapg.properties.projectTemplateBusinessUnits: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["transMemoryCreate"]) -> MetaOapg.properties.transMemoryCreate: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["transMemoryViewOther"]) -> MetaOapg.properties.transMemoryViewOther: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["transMemoryEditOther"]) -> MetaOapg.properties.transMemoryEditOther: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["transMemoryDeleteOther"]) -> MetaOapg.properties.transMemoryDeleteOther: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["transMemoryExportOther"]) -> MetaOapg.properties.transMemoryExportOther: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["transMemoryImportOther"]) -> MetaOapg.properties.transMemoryImportOther: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["transMemoryClients"]) -> MetaOapg.properties.transMemoryClients: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["transMemoryBusinessUnits"]) -> MetaOapg.properties.transMemoryBusinessUnits: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["termBaseCreate"]) -> MetaOapg.properties.termBaseCreate: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["termBaseViewOther"]) -> MetaOapg.properties.termBaseViewOther: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["termBaseEditOther"]) -> MetaOapg.properties.termBaseEditOther: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["termBaseDeleteOther"]) -> MetaOapg.properties.termBaseDeleteOther: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["termBaseExportOther"]) -> MetaOapg.properties.termBaseExportOther: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["termBaseImportOther"]) -> MetaOapg.properties.termBaseImportOther: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["termBaseApproveOther"]) -> MetaOapg.properties.termBaseApproveOther: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["termBaseClients"]) -> MetaOapg.properties.termBaseClients: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["termBaseBusinessUnits"]) -> MetaOapg.properties.termBaseBusinessUnits: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["userCreate"]) -> MetaOapg.properties.userCreate: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["userViewOther"]) -> MetaOapg.properties.userViewOther: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["userEditOther"]) -> MetaOapg.properties.userEditOther: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["userDeleteOther"]) -> MetaOapg.properties.userDeleteOther: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["clientDomainSubDomainCreate"]) -> MetaOapg.properties.clientDomainSubDomainCreate: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["clientDomainSubDomainViewOther"]) -> MetaOapg.properties.clientDomainSubDomainViewOther: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["clientDomainSubDomainEditOther"]) -> MetaOapg.properties.clientDomainSubDomainEditOther: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["clientDomainSubDomainDeleteOther"]) -> MetaOapg.properties.clientDomainSubDomainDeleteOther: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["vendorCreate"]) -> MetaOapg.properties.vendorCreate: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["vendorViewOther"]) -> MetaOapg.properties.vendorViewOther: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["vendorEditOther"]) -> MetaOapg.properties.vendorEditOther: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["vendorDeleteOther"]) -> MetaOapg.properties.vendorDeleteOther: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["dashboardSetting"]) -> MetaOapg.properties.dashboardSetting: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["setupServer"]) -> MetaOapg.properties.setupServer: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["sourceLocales", "targetLocales", "workflowSteps", "clients", "domains", "subDomains", "projectCreate", "projectViewOther", "projectEditOther", "projectDeleteOther", "projectClients", "projectBusinessUnits", "projectTemplateCreate", "projectTemplateViewOther", "projectTemplateEditOther", "projectTemplateDeleteOther", "projectTemplateClients", "projectTemplateBusinessUnits", "transMemoryCreate", "transMemoryViewOther", "transMemoryEditOther", "transMemoryDeleteOther", "transMemoryExportOther", "transMemoryImportOther", "transMemoryClients", "transMemoryBusinessUnits", "termBaseCreate", "termBaseViewOther", "termBaseEditOther", "termBaseDeleteOther", "termBaseExportOther", "termBaseImportOther", "termBaseApproveOther", "termBaseClients", "termBaseBusinessUnits", "userCreate", "userViewOther", "userEditOther", "userDeleteOther", "clientDomainSubDomainCreate", "clientDomainSubDomainViewOther", "clientDomainSubDomainEditOther", "clientDomainSubDomainDeleteOther", "vendorCreate", "vendorViewOther", "vendorEditOther", "vendorDeleteOther", "dashboardSetting", "setupServer", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["sourceLocales"]) -> typing.Union[MetaOapg.properties.sourceLocales, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["targetLocales"]) -> typing.Union[MetaOapg.properties.targetLocales, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["workflowSteps"]) -> typing.Union[MetaOapg.properties.workflowSteps, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["clients"]) -> typing.Union[MetaOapg.properties.clients, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["domains"]) -> typing.Union[MetaOapg.properties.domains, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["subDomains"]) -> typing.Union[MetaOapg.properties.subDomains, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["projectCreate"]) -> typing.Union[MetaOapg.properties.projectCreate, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["projectViewOther"]) -> typing.Union[MetaOapg.properties.projectViewOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["projectEditOther"]) -> typing.Union[MetaOapg.properties.projectEditOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["projectDeleteOther"]) -> typing.Union[MetaOapg.properties.projectDeleteOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["projectClients"]) -> typing.Union[MetaOapg.properties.projectClients, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["projectBusinessUnits"]) -> typing.Union[MetaOapg.properties.projectBusinessUnits, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["projectTemplateCreate"]) -> typing.Union[MetaOapg.properties.projectTemplateCreate, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["projectTemplateViewOther"]) -> typing.Union[MetaOapg.properties.projectTemplateViewOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["projectTemplateEditOther"]) -> typing.Union[MetaOapg.properties.projectTemplateEditOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["projectTemplateDeleteOther"]) -> typing.Union[MetaOapg.properties.projectTemplateDeleteOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["projectTemplateClients"]) -> typing.Union[MetaOapg.properties.projectTemplateClients, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["projectTemplateBusinessUnits"]) -> typing.Union[MetaOapg.properties.projectTemplateBusinessUnits, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["transMemoryCreate"]) -> typing.Union[MetaOapg.properties.transMemoryCreate, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["transMemoryViewOther"]) -> typing.Union[MetaOapg.properties.transMemoryViewOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["transMemoryEditOther"]) -> typing.Union[MetaOapg.properties.transMemoryEditOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["transMemoryDeleteOther"]) -> typing.Union[MetaOapg.properties.transMemoryDeleteOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["transMemoryExportOther"]) -> typing.Union[MetaOapg.properties.transMemoryExportOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["transMemoryImportOther"]) -> typing.Union[MetaOapg.properties.transMemoryImportOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["transMemoryClients"]) -> typing.Union[MetaOapg.properties.transMemoryClients, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["transMemoryBusinessUnits"]) -> typing.Union[MetaOapg.properties.transMemoryBusinessUnits, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["termBaseCreate"]) -> typing.Union[MetaOapg.properties.termBaseCreate, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["termBaseViewOther"]) -> typing.Union[MetaOapg.properties.termBaseViewOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["termBaseEditOther"]) -> typing.Union[MetaOapg.properties.termBaseEditOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["termBaseDeleteOther"]) -> typing.Union[MetaOapg.properties.termBaseDeleteOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["termBaseExportOther"]) -> typing.Union[MetaOapg.properties.termBaseExportOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["termBaseImportOther"]) -> typing.Union[MetaOapg.properties.termBaseImportOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["termBaseApproveOther"]) -> typing.Union[MetaOapg.properties.termBaseApproveOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["termBaseClients"]) -> typing.Union[MetaOapg.properties.termBaseClients, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["termBaseBusinessUnits"]) -> typing.Union[MetaOapg.properties.termBaseBusinessUnits, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["userCreate"]) -> typing.Union[MetaOapg.properties.userCreate, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["userViewOther"]) -> typing.Union[MetaOapg.properties.userViewOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["userEditOther"]) -> typing.Union[MetaOapg.properties.userEditOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["userDeleteOther"]) -> typing.Union[MetaOapg.properties.userDeleteOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["clientDomainSubDomainCreate"]) -> typing.Union[MetaOapg.properties.clientDomainSubDomainCreate, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["clientDomainSubDomainViewOther"]) -> typing.Union[MetaOapg.properties.clientDomainSubDomainViewOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["clientDomainSubDomainEditOther"]) -> typing.Union[MetaOapg.properties.clientDomainSubDomainEditOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["clientDomainSubDomainDeleteOther"]) -> typing.Union[MetaOapg.properties.clientDomainSubDomainDeleteOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["vendorCreate"]) -> typing.Union[MetaOapg.properties.vendorCreate, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["vendorViewOther"]) -> typing.Union[MetaOapg.properties.vendorViewOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["vendorEditOther"]) -> typing.Union[MetaOapg.properties.vendorEditOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["vendorDeleteOther"]) -> typing.Union[MetaOapg.properties.vendorDeleteOther, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["dashboardSetting"]) -> typing.Union[MetaOapg.properties.dashboardSetting, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["setupServer"]) -> typing.Union[MetaOapg.properties.setupServer, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["sourceLocales", "targetLocales", "workflowSteps", "clients", "domains", "subDomains", "projectCreate", "projectViewOther", "projectEditOther", "projectDeleteOther", "projectClients", "projectBusinessUnits", "projectTemplateCreate", "projectTemplateViewOther", "projectTemplateEditOther", "projectTemplateDeleteOther", "projectTemplateClients", "projectTemplateBusinessUnits", "transMemoryCreate", "transMemoryViewOther", "transMemoryEditOther", "transMemoryDeleteOther", "transMemoryExportOther", "transMemoryImportOther", "transMemoryClients", "transMemoryBusinessUnits", "termBaseCreate", "termBaseViewOther", "termBaseEditOther", "termBaseDeleteOther", "termBaseExportOther", "termBaseImportOther", "termBaseApproveOther", "termBaseClients", "termBaseBusinessUnits", "userCreate", "userViewOther", "userEditOther", "userDeleteOther", "clientDomainSubDomainCreate", "clientDomainSubDomainViewOther", "clientDomainSubDomainEditOther", "clientDomainSubDomainDeleteOther", "vendorCreate", "vendorViewOther", "vendorEditOther", "vendorDeleteOther", "dashboardSetting", "setupServer", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                sourceLocales: typing.Union[MetaOapg.properties.sourceLocales, list, tuple, schemas.Unset] = schemas.unset,
                targetLocales: typing.Union[MetaOapg.properties.targetLocales, list, tuple, schemas.Unset] = schemas.unset,
                workflowSteps: typing.Union[MetaOapg.properties.workflowSteps, list, tuple, schemas.Unset] = schemas.unset,
                clients: typing.Union[MetaOapg.properties.clients, list, tuple, schemas.Unset] = schemas.unset,
                domains: typing.Union[MetaOapg.properties.domains, list, tuple, schemas.Unset] = schemas.unset,
                subDomains: typing.Union[MetaOapg.properties.subDomains, list, tuple, schemas.Unset] = schemas.unset,
                projectCreate: typing.Union[MetaOapg.properties.projectCreate, bool, schemas.Unset] = schemas.unset,
                projectViewOther: typing.Union[MetaOapg.properties.projectViewOther, bool, schemas.Unset] = schemas.unset,
                projectEditOther: typing.Union[MetaOapg.properties.projectEditOther, bool, schemas.Unset] = schemas.unset,
                projectDeleteOther: typing.Union[MetaOapg.properties.projectDeleteOther, bool, schemas.Unset] = schemas.unset,
                projectClients: typing.Union[MetaOapg.properties.projectClients, list, tuple, schemas.Unset] = schemas.unset,
                projectBusinessUnits: typing.Union[MetaOapg.properties.projectBusinessUnits, list, tuple, schemas.Unset] = schemas.unset,
                projectTemplateCreate: typing.Union[MetaOapg.properties.projectTemplateCreate, bool, schemas.Unset] = schemas.unset,
                projectTemplateViewOther: typing.Union[MetaOapg.properties.projectTemplateViewOther, bool, schemas.Unset] = schemas.unset,
                projectTemplateEditOther: typing.Union[MetaOapg.properties.projectTemplateEditOther, bool, schemas.Unset] = schemas.unset,
                projectTemplateDeleteOther: typing.Union[MetaOapg.properties.projectTemplateDeleteOther, bool, schemas.Unset] = schemas.unset,
                projectTemplateClients: typing.Union[MetaOapg.properties.projectTemplateClients, list, tuple, schemas.Unset] = schemas.unset,
                projectTemplateBusinessUnits: typing.Union[MetaOapg.properties.projectTemplateBusinessUnits, list, tuple, schemas.Unset] = schemas.unset,
                transMemoryCreate: typing.Union[MetaOapg.properties.transMemoryCreate, bool, schemas.Unset] = schemas.unset,
                transMemoryViewOther: typing.Union[MetaOapg.properties.transMemoryViewOther, bool, schemas.Unset] = schemas.unset,
                transMemoryEditOther: typing.Union[MetaOapg.properties.transMemoryEditOther, bool, schemas.Unset] = schemas.unset,
                transMemoryDeleteOther: typing.Union[MetaOapg.properties.transMemoryDeleteOther, bool, schemas.Unset] = schemas.unset,
                transMemoryExportOther: typing.Union[MetaOapg.properties.transMemoryExportOther, bool, schemas.Unset] = schemas.unset,
                transMemoryImportOther: typing.Union[MetaOapg.properties.transMemoryImportOther, bool, schemas.Unset] = schemas.unset,
                transMemoryClients: typing.Union[MetaOapg.properties.transMemoryClients, list, tuple, schemas.Unset] = schemas.unset,
                transMemoryBusinessUnits: typing.Union[MetaOapg.properties.transMemoryBusinessUnits, list, tuple, schemas.Unset] = schemas.unset,
                termBaseCreate: typing.Union[MetaOapg.properties.termBaseCreate, bool, schemas.Unset] = schemas.unset,
                termBaseViewOther: typing.Union[MetaOapg.properties.termBaseViewOther, bool, schemas.Unset] = schemas.unset,
                termBaseEditOther: typing.Union[MetaOapg.properties.termBaseEditOther, bool, schemas.Unset] = schemas.unset,
                termBaseDeleteOther: typing.Union[MetaOapg.properties.termBaseDeleteOther, bool, schemas.Unset] = schemas.unset,
                termBaseExportOther: typing.Union[MetaOapg.properties.termBaseExportOther, bool, schemas.Unset] = schemas.unset,
                termBaseImportOther: typing.Union[MetaOapg.properties.termBaseImportOther, bool, schemas.Unset] = schemas.unset,
                termBaseApproveOther: typing.Union[MetaOapg.properties.termBaseApproveOther, bool, schemas.Unset] = schemas.unset,
                termBaseClients: typing.Union[MetaOapg.properties.termBaseClients, list, tuple, schemas.Unset] = schemas.unset,
                termBaseBusinessUnits: typing.Union[MetaOapg.properties.termBaseBusinessUnits, list, tuple, schemas.Unset] = schemas.unset,
                userCreate: typing.Union[MetaOapg.properties.userCreate, bool, schemas.Unset] = schemas.unset,
                userViewOther: typing.Union[MetaOapg.properties.userViewOther, bool, schemas.Unset] = schemas.unset,
                userEditOther: typing.Union[MetaOapg.properties.userEditOther, bool, schemas.Unset] = schemas.unset,
                userDeleteOther: typing.Union[MetaOapg.properties.userDeleteOther, bool, schemas.Unset] = schemas.unset,
                clientDomainSubDomainCreate: typing.Union[MetaOapg.properties.clientDomainSubDomainCreate, bool, schemas.Unset] = schemas.unset,
                clientDomainSubDomainViewOther: typing.Union[MetaOapg.properties.clientDomainSubDomainViewOther, bool, schemas.Unset] = schemas.unset,
                clientDomainSubDomainEditOther: typing.Union[MetaOapg.properties.clientDomainSubDomainEditOther, bool, schemas.Unset] = schemas.unset,
                clientDomainSubDomainDeleteOther: typing.Union[MetaOapg.properties.clientDomainSubDomainDeleteOther, bool, schemas.Unset] = schemas.unset,
                vendorCreate: typing.Union[MetaOapg.properties.vendorCreate, bool, schemas.Unset] = schemas.unset,
                vendorViewOther: typing.Union[MetaOapg.properties.vendorViewOther, bool, schemas.Unset] = schemas.unset,
                vendorEditOther: typing.Union[MetaOapg.properties.vendorEditOther, bool, schemas.Unset] = schemas.unset,
                vendorDeleteOther: typing.Union[MetaOapg.properties.vendorDeleteOther, bool, schemas.Unset] = schemas.unset,
                dashboardSetting: typing.Union[MetaOapg.properties.dashboardSetting, str, schemas.Unset] = schemas.unset,
                setupServer: typing.Union[MetaOapg.properties.setupServer, bool, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *_args,
                    sourceLocales=sourceLocales,
                    targetLocales=targetLocales,
                    workflowSteps=workflowSteps,
                    clients=clients,
                    domains=domains,
                    subDomains=subDomains,
                    projectCreate=projectCreate,
                    projectViewOther=projectViewOther,
                    projectEditOther=projectEditOther,
                    projectDeleteOther=projectDeleteOther,
                    projectClients=projectClients,
                    projectBusinessUnits=projectBusinessUnits,
                    projectTemplateCreate=projectTemplateCreate,
                    projectTemplateViewOther=projectTemplateViewOther,
                    projectTemplateEditOther=projectTemplateEditOther,
                    projectTemplateDeleteOther=projectTemplateDeleteOther,
                    projectTemplateClients=projectTemplateClients,
                    projectTemplateBusinessUnits=projectTemplateBusinessUnits,
                    transMemoryCreate=transMemoryCreate,
                    transMemoryViewOther=transMemoryViewOther,
                    transMemoryEditOther=transMemoryEditOther,
                    transMemoryDeleteOther=transMemoryDeleteOther,
                    transMemoryExportOther=transMemoryExportOther,
                    transMemoryImportOther=transMemoryImportOther,
                    transMemoryClients=transMemoryClients,
                    transMemoryBusinessUnits=transMemoryBusinessUnits,
                    termBaseCreate=termBaseCreate,
                    termBaseViewOther=termBaseViewOther,
                    termBaseEditOther=termBaseEditOther,
                    termBaseDeleteOther=termBaseDeleteOther,
                    termBaseExportOther=termBaseExportOther,
                    termBaseImportOther=termBaseImportOther,
                    termBaseApproveOther=termBaseApproveOther,
                    termBaseClients=termBaseClients,
                    termBaseBusinessUnits=termBaseBusinessUnits,
                    userCreate=userCreate,
                    userViewOther=userViewOther,
                    userEditOther=userEditOther,
                    userDeleteOther=userDeleteOther,
                    clientDomainSubDomainCreate=clientDomainSubDomainCreate,
                    clientDomainSubDomainViewOther=clientDomainSubDomainViewOther,
                    clientDomainSubDomainEditOther=clientDomainSubDomainEditOther,
                    clientDomainSubDomainDeleteOther=clientDomainSubDomainDeleteOther,
                    vendorCreate=vendorCreate,
                    vendorViewOther=vendorViewOther,
                    vendorEditOther=vendorEditOther,
                    vendorDeleteOther=vendorDeleteOther,
                    dashboardSetting=dashboardSetting,
                    setupServer=setupServer,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                AbstractUserCreateDto,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PROJECTMANAGER':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from phrasetms_client.model.abstract_user_create_dto import AbstractUserCreateDto
from phrasetms_client.model.uid_reference import UidReference
