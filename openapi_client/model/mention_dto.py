# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class MentionDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "mentionType",
        }
        
        class properties:
            
            
            class mentionType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "USER": "USER",
                        "GROUP": "GROUP",
                    }
                
                @schemas.classproperty
                def USER(cls):
                    return cls("USER")
                
                @schemas.classproperty
                def GROUP(cls):
                    return cls("GROUP")
            
            
            class mentionGroupType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "JOB": "JOB",
                        "OWNERS": "OWNERS",
                        "PROVIDERS": "PROVIDERS",
                        "GUESTS": "GUESTS",
                        "WORKFLOW_STEP": "WORKFLOW_STEP",
                    }
                
                @schemas.classproperty
                def JOB(cls):
                    return cls("JOB")
                
                @schemas.classproperty
                def OWNERS(cls):
                    return cls("OWNERS")
                
                @schemas.classproperty
                def PROVIDERS(cls):
                    return cls("PROVIDERS")
                
                @schemas.classproperty
                def GUESTS(cls):
                    return cls("GUESTS")
                
                @schemas.classproperty
                def WORKFLOW_STEP(cls):
                    return cls("WORKFLOW_STEP")
        
            @staticmethod
            def uidReference() -> typing.Type['UidReference']:
                return UidReference
            
            
            class userReferences(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MentionableUserDto']:
                        return MentionableUserDto
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['MentionableUserDto'], typing.List['MentionableUserDto']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'userReferences':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MentionableUserDto':
                    return super().__getitem__(i)
        
            @staticmethod
            def mentionableGroup() -> typing.Type['MentionableGroupDto']:
                return MentionableGroupDto
            tag = schemas.StrSchema
            __annotations__ = {
                "mentionType": mentionType,
                "mentionGroupType": mentionGroupType,
                "uidReference": uidReference,
                "userReferences": userReferences,
                "mentionableGroup": mentionableGroup,
                "tag": tag,
            }
    
    mentionType: MetaOapg.properties.mentionType
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mentionType"]) -> MetaOapg.properties.mentionType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mentionGroupType"]) -> MetaOapg.properties.mentionGroupType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uidReference"]) -> 'UidReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userReferences"]) -> MetaOapg.properties.userReferences: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mentionableGroup"]) -> 'MentionableGroupDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tag"]) -> MetaOapg.properties.tag: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["mentionType", "mentionGroupType", "uidReference", "userReferences", "mentionableGroup", "tag", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mentionType"]) -> MetaOapg.properties.mentionType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mentionGroupType"]) -> typing.Union[MetaOapg.properties.mentionGroupType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uidReference"]) -> typing.Union['UidReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userReferences"]) -> typing.Union[MetaOapg.properties.userReferences, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mentionableGroup"]) -> typing.Union['MentionableGroupDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tag"]) -> typing.Union[MetaOapg.properties.tag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["mentionType", "mentionGroupType", "uidReference", "userReferences", "mentionableGroup", "tag", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        mentionType: typing.Union[MetaOapg.properties.mentionType, str, ],
        mentionGroupType: typing.Union[MetaOapg.properties.mentionGroupType, str, schemas.Unset] = schemas.unset,
        uidReference: typing.Union['UidReference', schemas.Unset] = schemas.unset,
        userReferences: typing.Union[MetaOapg.properties.userReferences, list, tuple, schemas.Unset] = schemas.unset,
        mentionableGroup: typing.Union['MentionableGroupDto', schemas.Unset] = schemas.unset,
        tag: typing.Union[MetaOapg.properties.tag, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MentionDto':
        return super().__new__(
            cls,
            *_args,
            mentionType=mentionType,
            mentionGroupType=mentionGroupType,
            uidReference=uidReference,
            userReferences=userReferences,
            mentionableGroup=mentionableGroup,
            tag=tag,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.mentionable_group_dto import MentionableGroupDto
from openapi_client.model.mentionable_user_dto import MentionableUserDto
from openapi_client.model.uid_reference import UidReference
