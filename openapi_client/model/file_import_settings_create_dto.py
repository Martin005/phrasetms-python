# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class FileImportSettingsCreateDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            inputCharset = schemas.StrSchema
            outputCharset = schemas.StrSchema
            zipCharset = schemas.StrSchema
            
            
            class fileFormat(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "doc": "DOC",
                        "ppt": "PPT",
                        "xls": "XLS",
                        "xlf": "XLF",
                        "xlf2": "XLF2",
                        "sdlxlif": "SDLXLIF",
                        "ttx": "TTX",
                        "html": "HTML",
                        "xml": "XML",
                        "mif": "MIF",
                        "tmx": "TMX",
                        "idml": "IDML",
                        "dita": "DITA",
                        "json": "JSON",
                        "po": "PO",
                        "ts": "TS",
                        "icml": "ICML",
                        "yaml": "YAML",
                        "properties": "PROPERTIES",
                        "csv": "CSV",
                        "android_string": "ANDROID_STRING",
                        "desktop_entry": "DESKTOP_ENTRY",
                        "mac_strings": "MAC_STRINGS",
                        "pdf": "PDF",
                        "windows_rc": "WINDOWS_RC",
                        "xml_properties": "XML_PROPERTIES",
                        "joomla_ini": "JOOMLA_INI",
                        "magento_csv": "MAGENTO_CSV",
                        "dtd": "DTD",
                        "mozilla_properties": "MOZILLA_PROPERTIES",
                        "plist": "PLIST",
                        "plain_text": "PLAIN_TEXT",
                        "srt": "SRT",
                        "sub": "SUB",
                        "sbv": "SBV",
                        "wiki": "WIKI",
                        "resx": "RESX",
                        "resjson": "RESJSON",
                        "chrome_json": "CHROME_JSON",
                        "epub": "EPUB",
                        "svg": "SVG",
                        "docbook": "DOCBOOK",
                        "wpxliff": "WPXLIFF",
                        "multiling_xml": "MULTILING_XML",
                        "multiling_xls": "MULTILING_XLS",
                        "mqxliff": "MQXLIFF",
                        "php": "PHP",
                        "psd": "PSD",
                        "tag": "TAG",
                        "md": "MD",
                        "vtt": "VTT",
                    }
                
                @schemas.classproperty
                def DOC(cls):
                    return cls("doc")
                
                @schemas.classproperty
                def PPT(cls):
                    return cls("ppt")
                
                @schemas.classproperty
                def XLS(cls):
                    return cls("xls")
                
                @schemas.classproperty
                def XLF(cls):
                    return cls("xlf")
                
                @schemas.classproperty
                def XLF2(cls):
                    return cls("xlf2")
                
                @schemas.classproperty
                def SDLXLIF(cls):
                    return cls("sdlxlif")
                
                @schemas.classproperty
                def TTX(cls):
                    return cls("ttx")
                
                @schemas.classproperty
                def HTML(cls):
                    return cls("html")
                
                @schemas.classproperty
                def XML(cls):
                    return cls("xml")
                
                @schemas.classproperty
                def MIF(cls):
                    return cls("mif")
                
                @schemas.classproperty
                def TMX(cls):
                    return cls("tmx")
                
                @schemas.classproperty
                def IDML(cls):
                    return cls("idml")
                
                @schemas.classproperty
                def DITA(cls):
                    return cls("dita")
                
                @schemas.classproperty
                def JSON(cls):
                    return cls("json")
                
                @schemas.classproperty
                def PO(cls):
                    return cls("po")
                
                @schemas.classproperty
                def TS(cls):
                    return cls("ts")
                
                @schemas.classproperty
                def ICML(cls):
                    return cls("icml")
                
                @schemas.classproperty
                def YAML(cls):
                    return cls("yaml")
                
                @schemas.classproperty
                def PROPERTIES(cls):
                    return cls("properties")
                
                @schemas.classproperty
                def CSV(cls):
                    return cls("csv")
                
                @schemas.classproperty
                def ANDROID_STRING(cls):
                    return cls("android_string")
                
                @schemas.classproperty
                def DESKTOP_ENTRY(cls):
                    return cls("desktop_entry")
                
                @schemas.classproperty
                def MAC_STRINGS(cls):
                    return cls("mac_strings")
                
                @schemas.classproperty
                def PDF(cls):
                    return cls("pdf")
                
                @schemas.classproperty
                def WINDOWS_RC(cls):
                    return cls("windows_rc")
                
                @schemas.classproperty
                def XML_PROPERTIES(cls):
                    return cls("xml_properties")
                
                @schemas.classproperty
                def JOOMLA_INI(cls):
                    return cls("joomla_ini")
                
                @schemas.classproperty
                def MAGENTO_CSV(cls):
                    return cls("magento_csv")
                
                @schemas.classproperty
                def DTD(cls):
                    return cls("dtd")
                
                @schemas.classproperty
                def MOZILLA_PROPERTIES(cls):
                    return cls("mozilla_properties")
                
                @schemas.classproperty
                def PLIST(cls):
                    return cls("plist")
                
                @schemas.classproperty
                def PLAIN_TEXT(cls):
                    return cls("plain_text")
                
                @schemas.classproperty
                def SRT(cls):
                    return cls("srt")
                
                @schemas.classproperty
                def SUB(cls):
                    return cls("sub")
                
                @schemas.classproperty
                def SBV(cls):
                    return cls("sbv")
                
                @schemas.classproperty
                def WIKI(cls):
                    return cls("wiki")
                
                @schemas.classproperty
                def RESX(cls):
                    return cls("resx")
                
                @schemas.classproperty
                def RESJSON(cls):
                    return cls("resjson")
                
                @schemas.classproperty
                def CHROME_JSON(cls):
                    return cls("chrome_json")
                
                @schemas.classproperty
                def EPUB(cls):
                    return cls("epub")
                
                @schemas.classproperty
                def SVG(cls):
                    return cls("svg")
                
                @schemas.classproperty
                def DOCBOOK(cls):
                    return cls("docbook")
                
                @schemas.classproperty
                def WPXLIFF(cls):
                    return cls("wpxliff")
                
                @schemas.classproperty
                def MULTILING_XML(cls):
                    return cls("multiling_xml")
                
                @schemas.classproperty
                def MULTILING_XLS(cls):
                    return cls("multiling_xls")
                
                @schemas.classproperty
                def MQXLIFF(cls):
                    return cls("mqxliff")
                
                @schemas.classproperty
                def PHP(cls):
                    return cls("php")
                
                @schemas.classproperty
                def PSD(cls):
                    return cls("psd")
                
                @schemas.classproperty
                def TAG(cls):
                    return cls("tag")
                
                @schemas.classproperty
                def MD(cls):
                    return cls("md")
                
                @schemas.classproperty
                def VTT(cls):
                    return cls("vtt")
            autodetectMultilingualFiles = schemas.BoolSchema
            targetLength = schemas.BoolSchema
            targetLengthMax = schemas.Int32Schema
            targetLengthPercent = schemas.BoolSchema
            targetLengthPercentValue = schemas.Float64Schema
            segmentationRuleId = schemas.Int64Schema
            targetSegmentationRuleId = schemas.Int64Schema
        
            @staticmethod
            def android() -> typing.Type['AndroidSettingsDto']:
                return AndroidSettingsDto
        
            @staticmethod
            def csv() -> typing.Type['CsvSettingsDto']:
                return CsvSettingsDto
        
            @staticmethod
            def dita() -> typing.Type['DitaSettingsDto']:
                return DitaSettingsDto
        
            @staticmethod
            def docBook() -> typing.Type['DocBookSettingsDto']:
                return DocBookSettingsDto
        
            @staticmethod
            def doc() -> typing.Type['DocSettingsDto']:
                return DocSettingsDto
        
            @staticmethod
            def html() -> typing.Type['HtmlSettingsDto']:
                return HtmlSettingsDto
        
            @staticmethod
            def idml() -> typing.Type['IdmlSettingsDto']:
                return IdmlSettingsDto
        
            @staticmethod
            def json() -> typing.Type['JsonSettingsDto']:
                return JsonSettingsDto
        
            @staticmethod
            def mac() -> typing.Type['MacSettingsDto']:
                return MacSettingsDto
        
            @staticmethod
            def md() -> typing.Type['MdSettingsDto']:
                return MdSettingsDto
        
            @staticmethod
            def mif() -> typing.Type['MifSettingsDto']:
                return MifSettingsDto
        
            @staticmethod
            def multilingualXls() -> typing.Type['MultilingualXlsSettingsDto']:
                return MultilingualXlsSettingsDto
        
            @staticmethod
            def multilingualCsv() -> typing.Type['MultilingualCsvSettingsDto']:
                return MultilingualCsvSettingsDto
        
            @staticmethod
            def multilingualXml() -> typing.Type['MultilingualXmlSettingsDto']:
                return MultilingualXmlSettingsDto
        
            @staticmethod
            def pdf() -> typing.Type['PdfSettingsDto']:
                return PdfSettingsDto
        
            @staticmethod
            def php() -> typing.Type['PhpSettingsDto']:
                return PhpSettingsDto
        
            @staticmethod
            def po() -> typing.Type['PoSettingsDto']:
                return PoSettingsDto
        
            @staticmethod
            def ppt() -> typing.Type['PptSettingsDto']:
                return PptSettingsDto
        
            @staticmethod
            def properties() -> typing.Type['PropertiesSettingsDto']:
                return PropertiesSettingsDto
        
            @staticmethod
            def psd() -> typing.Type['PsdSettingsDto']:
                return PsdSettingsDto
        
            @staticmethod
            def quarkTag() -> typing.Type['QuarkTagSettingsDto']:
                return QuarkTagSettingsDto
        
            @staticmethod
            def resx() -> typing.Type['ResxSettingsDto']:
                return ResxSettingsDto
        
            @staticmethod
            def sdlXlf() -> typing.Type['SdlXlfSettingsDto']:
                return SdlXlfSettingsDto
        
            @staticmethod
            def tmMatch() -> typing.Type['TMMatchSettingsDto']:
                return TMMatchSettingsDto
        
            @staticmethod
            def ttx() -> typing.Type['TtxSettingsDto']:
                return TtxSettingsDto
        
            @staticmethod
            def txt() -> typing.Type['TxtSettingsDto']:
                return TxtSettingsDto
        
            @staticmethod
            def xlf2() -> typing.Type['Xlf2SettingsDto']:
                return Xlf2SettingsDto
        
            @staticmethod
            def xlf() -> typing.Type['XlfSettingsDto']:
                return XlfSettingsDto
        
            @staticmethod
            def xls() -> typing.Type['XlsSettingsDto']:
                return XlsSettingsDto
        
            @staticmethod
            def xml() -> typing.Type['XmlSettingsDto']:
                return XmlSettingsDto
        
            @staticmethod
            def yaml() -> typing.Type['YamlSettingsDto']:
                return YamlSettingsDto
        
            @staticmethod
            def asciidoc() -> typing.Type['AsciidocSettingsDto']:
                return AsciidocSettingsDto
            __annotations__ = {
                "inputCharset": inputCharset,
                "outputCharset": outputCharset,
                "zipCharset": zipCharset,
                "fileFormat": fileFormat,
                "autodetectMultilingualFiles": autodetectMultilingualFiles,
                "targetLength": targetLength,
                "targetLengthMax": targetLengthMax,
                "targetLengthPercent": targetLengthPercent,
                "targetLengthPercentValue": targetLengthPercentValue,
                "segmentationRuleId": segmentationRuleId,
                "targetSegmentationRuleId": targetSegmentationRuleId,
                "android": android,
                "csv": csv,
                "dita": dita,
                "docBook": docBook,
                "doc": doc,
                "html": html,
                "idml": idml,
                "json": json,
                "mac": mac,
                "md": md,
                "mif": mif,
                "multilingualXls": multilingualXls,
                "multilingualCsv": multilingualCsv,
                "multilingualXml": multilingualXml,
                "pdf": pdf,
                "php": php,
                "po": po,
                "ppt": ppt,
                "properties": properties,
                "psd": psd,
                "quarkTag": quarkTag,
                "resx": resx,
                "sdlXlf": sdlXlf,
                "tmMatch": tmMatch,
                "ttx": ttx,
                "txt": txt,
                "xlf2": xlf2,
                "xlf": xlf,
                "xls": xls,
                "xml": xml,
                "yaml": yaml,
                "asciidoc": asciidoc,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inputCharset"]) -> MetaOapg.properties.inputCharset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["outputCharset"]) -> MetaOapg.properties.outputCharset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zipCharset"]) -> MetaOapg.properties.zipCharset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fileFormat"]) -> MetaOapg.properties.fileFormat: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["autodetectMultilingualFiles"]) -> MetaOapg.properties.autodetectMultilingualFiles: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetLength"]) -> MetaOapg.properties.targetLength: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetLengthMax"]) -> MetaOapg.properties.targetLengthMax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetLengthPercent"]) -> MetaOapg.properties.targetLengthPercent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetLengthPercentValue"]) -> MetaOapg.properties.targetLengthPercentValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["segmentationRuleId"]) -> MetaOapg.properties.segmentationRuleId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetSegmentationRuleId"]) -> MetaOapg.properties.targetSegmentationRuleId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["android"]) -> 'AndroidSettingsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["csv"]) -> 'CsvSettingsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dita"]) -> 'DitaSettingsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["docBook"]) -> 'DocBookSettingsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["doc"]) -> 'DocSettingsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["html"]) -> 'HtmlSettingsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idml"]) -> 'IdmlSettingsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["json"]) -> 'JsonSettingsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mac"]) -> 'MacSettingsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["md"]) -> 'MdSettingsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mif"]) -> 'MifSettingsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["multilingualXls"]) -> 'MultilingualXlsSettingsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["multilingualCsv"]) -> 'MultilingualCsvSettingsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["multilingualXml"]) -> 'MultilingualXmlSettingsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pdf"]) -> 'PdfSettingsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["php"]) -> 'PhpSettingsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["po"]) -> 'PoSettingsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ppt"]) -> 'PptSettingsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["properties"]) -> 'PropertiesSettingsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["psd"]) -> 'PsdSettingsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quarkTag"]) -> 'QuarkTagSettingsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resx"]) -> 'ResxSettingsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sdlXlf"]) -> 'SdlXlfSettingsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tmMatch"]) -> 'TMMatchSettingsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ttx"]) -> 'TtxSettingsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["txt"]) -> 'TxtSettingsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["xlf2"]) -> 'Xlf2SettingsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["xlf"]) -> 'XlfSettingsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["xls"]) -> 'XlsSettingsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["xml"]) -> 'XmlSettingsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["yaml"]) -> 'YamlSettingsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["asciidoc"]) -> 'AsciidocSettingsDto': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["inputCharset", "outputCharset", "zipCharset", "fileFormat", "autodetectMultilingualFiles", "targetLength", "targetLengthMax", "targetLengthPercent", "targetLengthPercentValue", "segmentationRuleId", "targetSegmentationRuleId", "android", "csv", "dita", "docBook", "doc", "html", "idml", "json", "mac", "md", "mif", "multilingualXls", "multilingualCsv", "multilingualXml", "pdf", "php", "po", "ppt", "properties", "psd", "quarkTag", "resx", "sdlXlf", "tmMatch", "ttx", "txt", "xlf2", "xlf", "xls", "xml", "yaml", "asciidoc", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inputCharset"]) -> typing.Union[MetaOapg.properties.inputCharset, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["outputCharset"]) -> typing.Union[MetaOapg.properties.outputCharset, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zipCharset"]) -> typing.Union[MetaOapg.properties.zipCharset, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fileFormat"]) -> typing.Union[MetaOapg.properties.fileFormat, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["autodetectMultilingualFiles"]) -> typing.Union[MetaOapg.properties.autodetectMultilingualFiles, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetLength"]) -> typing.Union[MetaOapg.properties.targetLength, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetLengthMax"]) -> typing.Union[MetaOapg.properties.targetLengthMax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetLengthPercent"]) -> typing.Union[MetaOapg.properties.targetLengthPercent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetLengthPercentValue"]) -> typing.Union[MetaOapg.properties.targetLengthPercentValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["segmentationRuleId"]) -> typing.Union[MetaOapg.properties.segmentationRuleId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetSegmentationRuleId"]) -> typing.Union[MetaOapg.properties.targetSegmentationRuleId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["android"]) -> typing.Union['AndroidSettingsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["csv"]) -> typing.Union['CsvSettingsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dita"]) -> typing.Union['DitaSettingsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["docBook"]) -> typing.Union['DocBookSettingsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["doc"]) -> typing.Union['DocSettingsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["html"]) -> typing.Union['HtmlSettingsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idml"]) -> typing.Union['IdmlSettingsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["json"]) -> typing.Union['JsonSettingsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mac"]) -> typing.Union['MacSettingsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["md"]) -> typing.Union['MdSettingsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mif"]) -> typing.Union['MifSettingsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["multilingualXls"]) -> typing.Union['MultilingualXlsSettingsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["multilingualCsv"]) -> typing.Union['MultilingualCsvSettingsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["multilingualXml"]) -> typing.Union['MultilingualXmlSettingsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pdf"]) -> typing.Union['PdfSettingsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["php"]) -> typing.Union['PhpSettingsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["po"]) -> typing.Union['PoSettingsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ppt"]) -> typing.Union['PptSettingsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["properties"]) -> typing.Union['PropertiesSettingsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["psd"]) -> typing.Union['PsdSettingsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quarkTag"]) -> typing.Union['QuarkTagSettingsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resx"]) -> typing.Union['ResxSettingsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sdlXlf"]) -> typing.Union['SdlXlfSettingsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tmMatch"]) -> typing.Union['TMMatchSettingsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ttx"]) -> typing.Union['TtxSettingsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["txt"]) -> typing.Union['TxtSettingsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["xlf2"]) -> typing.Union['Xlf2SettingsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["xlf"]) -> typing.Union['XlfSettingsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["xls"]) -> typing.Union['XlsSettingsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["xml"]) -> typing.Union['XmlSettingsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["yaml"]) -> typing.Union['YamlSettingsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["asciidoc"]) -> typing.Union['AsciidocSettingsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["inputCharset", "outputCharset", "zipCharset", "fileFormat", "autodetectMultilingualFiles", "targetLength", "targetLengthMax", "targetLengthPercent", "targetLengthPercentValue", "segmentationRuleId", "targetSegmentationRuleId", "android", "csv", "dita", "docBook", "doc", "html", "idml", "json", "mac", "md", "mif", "multilingualXls", "multilingualCsv", "multilingualXml", "pdf", "php", "po", "ppt", "properties", "psd", "quarkTag", "resx", "sdlXlf", "tmMatch", "ttx", "txt", "xlf2", "xlf", "xls", "xml", "yaml", "asciidoc", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        inputCharset: typing.Union[MetaOapg.properties.inputCharset, str, schemas.Unset] = schemas.unset,
        outputCharset: typing.Union[MetaOapg.properties.outputCharset, str, schemas.Unset] = schemas.unset,
        zipCharset: typing.Union[MetaOapg.properties.zipCharset, str, schemas.Unset] = schemas.unset,
        fileFormat: typing.Union[MetaOapg.properties.fileFormat, str, schemas.Unset] = schemas.unset,
        autodetectMultilingualFiles: typing.Union[MetaOapg.properties.autodetectMultilingualFiles, bool, schemas.Unset] = schemas.unset,
        targetLength: typing.Union[MetaOapg.properties.targetLength, bool, schemas.Unset] = schemas.unset,
        targetLengthMax: typing.Union[MetaOapg.properties.targetLengthMax, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        targetLengthPercent: typing.Union[MetaOapg.properties.targetLengthPercent, bool, schemas.Unset] = schemas.unset,
        targetLengthPercentValue: typing.Union[MetaOapg.properties.targetLengthPercentValue, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        segmentationRuleId: typing.Union[MetaOapg.properties.segmentationRuleId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        targetSegmentationRuleId: typing.Union[MetaOapg.properties.targetSegmentationRuleId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        android: typing.Union['AndroidSettingsDto', schemas.Unset] = schemas.unset,
        csv: typing.Union['CsvSettingsDto', schemas.Unset] = schemas.unset,
        dita: typing.Union['DitaSettingsDto', schemas.Unset] = schemas.unset,
        docBook: typing.Union['DocBookSettingsDto', schemas.Unset] = schemas.unset,
        doc: typing.Union['DocSettingsDto', schemas.Unset] = schemas.unset,
        html: typing.Union['HtmlSettingsDto', schemas.Unset] = schemas.unset,
        idml: typing.Union['IdmlSettingsDto', schemas.Unset] = schemas.unset,
        json: typing.Union['JsonSettingsDto', schemas.Unset] = schemas.unset,
        mac: typing.Union['MacSettingsDto', schemas.Unset] = schemas.unset,
        md: typing.Union['MdSettingsDto', schemas.Unset] = schemas.unset,
        mif: typing.Union['MifSettingsDto', schemas.Unset] = schemas.unset,
        multilingualXls: typing.Union['MultilingualXlsSettingsDto', schemas.Unset] = schemas.unset,
        multilingualCsv: typing.Union['MultilingualCsvSettingsDto', schemas.Unset] = schemas.unset,
        multilingualXml: typing.Union['MultilingualXmlSettingsDto', schemas.Unset] = schemas.unset,
        pdf: typing.Union['PdfSettingsDto', schemas.Unset] = schemas.unset,
        php: typing.Union['PhpSettingsDto', schemas.Unset] = schemas.unset,
        po: typing.Union['PoSettingsDto', schemas.Unset] = schemas.unset,
        ppt: typing.Union['PptSettingsDto', schemas.Unset] = schemas.unset,
        properties: typing.Union['PropertiesSettingsDto', schemas.Unset] = schemas.unset,
        psd: typing.Union['PsdSettingsDto', schemas.Unset] = schemas.unset,
        quarkTag: typing.Union['QuarkTagSettingsDto', schemas.Unset] = schemas.unset,
        resx: typing.Union['ResxSettingsDto', schemas.Unset] = schemas.unset,
        sdlXlf: typing.Union['SdlXlfSettingsDto', schemas.Unset] = schemas.unset,
        tmMatch: typing.Union['TMMatchSettingsDto', schemas.Unset] = schemas.unset,
        ttx: typing.Union['TtxSettingsDto', schemas.Unset] = schemas.unset,
        txt: typing.Union['TxtSettingsDto', schemas.Unset] = schemas.unset,
        xlf2: typing.Union['Xlf2SettingsDto', schemas.Unset] = schemas.unset,
        xlf: typing.Union['XlfSettingsDto', schemas.Unset] = schemas.unset,
        xls: typing.Union['XlsSettingsDto', schemas.Unset] = schemas.unset,
        xml: typing.Union['XmlSettingsDto', schemas.Unset] = schemas.unset,
        yaml: typing.Union['YamlSettingsDto', schemas.Unset] = schemas.unset,
        asciidoc: typing.Union['AsciidocSettingsDto', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FileImportSettingsCreateDto':
        return super().__new__(
            cls,
            *_args,
            inputCharset=inputCharset,
            outputCharset=outputCharset,
            zipCharset=zipCharset,
            fileFormat=fileFormat,
            autodetectMultilingualFiles=autodetectMultilingualFiles,
            targetLength=targetLength,
            targetLengthMax=targetLengthMax,
            targetLengthPercent=targetLengthPercent,
            targetLengthPercentValue=targetLengthPercentValue,
            segmentationRuleId=segmentationRuleId,
            targetSegmentationRuleId=targetSegmentationRuleId,
            android=android,
            csv=csv,
            dita=dita,
            docBook=docBook,
            doc=doc,
            html=html,
            idml=idml,
            json=json,
            mac=mac,
            md=md,
            mif=mif,
            multilingualXls=multilingualXls,
            multilingualCsv=multilingualCsv,
            multilingualXml=multilingualXml,
            pdf=pdf,
            php=php,
            po=po,
            ppt=ppt,
            properties=properties,
            psd=psd,
            quarkTag=quarkTag,
            resx=resx,
            sdlXlf=sdlXlf,
            tmMatch=tmMatch,
            ttx=ttx,
            txt=txt,
            xlf2=xlf2,
            xlf=xlf,
            xls=xls,
            xml=xml,
            yaml=yaml,
            asciidoc=asciidoc,
            _configuration=_configuration,
            **kwargs,
        )

from phrasetms_client.model.android_settings_dto import AndroidSettingsDto
from phrasetms_client.model.asciidoc_settings_dto import AsciidocSettingsDto
from phrasetms_client.model.csv_settings_dto import CsvSettingsDto
from phrasetms_client.model.dita_settings_dto import DitaSettingsDto
from phrasetms_client.model.doc_book_settings_dto import DocBookSettingsDto
from phrasetms_client.model.doc_settings_dto import DocSettingsDto
from phrasetms_client.model.html_settings_dto import HtmlSettingsDto
from phrasetms_client.model.idml_settings_dto import IdmlSettingsDto
from phrasetms_client.model.json_settings_dto import JsonSettingsDto
from phrasetms_client.model.mac_settings_dto import MacSettingsDto
from phrasetms_client.model.md_settings_dto import MdSettingsDto
from phrasetms_client.model.mif_settings_dto import MifSettingsDto
from phrasetms_client.model.multilingual_csv_settings_dto import MultilingualCsvSettingsDto
from phrasetms_client.model.multilingual_xls_settings_dto import MultilingualXlsSettingsDto
from phrasetms_client.model.multilingual_xml_settings_dto import MultilingualXmlSettingsDto
from phrasetms_client.model.pdf_settings_dto import PdfSettingsDto
from phrasetms_client.model.php_settings_dto import PhpSettingsDto
from phrasetms_client.model.po_settings_dto import PoSettingsDto
from phrasetms_client.model.ppt_settings_dto import PptSettingsDto
from phrasetms_client.model.properties_settings_dto import PropertiesSettingsDto
from phrasetms_client.model.psd_settings_dto import PsdSettingsDto
from phrasetms_client.model.quark_tag_settings_dto import QuarkTagSettingsDto
from phrasetms_client.model.resx_settings_dto import ResxSettingsDto
from phrasetms_client.model.sdl_xlf_settings_dto import SdlXlfSettingsDto
from phrasetms_client.model.tm_match_settings_dto import TMMatchSettingsDto
from phrasetms_client.model.ttx_settings_dto import TtxSettingsDto
from phrasetms_client.model.txt_settings_dto import TxtSettingsDto
from phrasetms_client.model.xlf2_settings_dto import Xlf2SettingsDto
from phrasetms_client.model.xlf_settings_dto import XlfSettingsDto
from phrasetms_client.model.xls_settings_dto import XlsSettingsDto
from phrasetms_client.model.xml_settings_dto import XmlSettingsDto
from phrasetms_client.model.yaml_settings_dto import YamlSettingsDto
