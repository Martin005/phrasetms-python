# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class PenaltyPointsDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Penalty points for each severity level. By default neutral is 0, minor is 1, major is 5, critical is 10.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def neutral() -> typing.Type['SeverityDto']:
                return SeverityDto
        
            @staticmethod
            def minor() -> typing.Type['SeverityDto']:
                return SeverityDto
        
            @staticmethod
            def major() -> typing.Type['SeverityDto']:
                return SeverityDto
        
            @staticmethod
            def critical() -> typing.Type['SeverityDto']:
                return SeverityDto
            __annotations__ = {
                "neutral": neutral,
                "minor": minor,
                "major": major,
                "critical": critical,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["neutral"]) -> 'SeverityDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minor"]) -> 'SeverityDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["major"]) -> 'SeverityDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["critical"]) -> 'SeverityDto': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["neutral", "minor", "major", "critical", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["neutral"]) -> typing.Union['SeverityDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minor"]) -> typing.Union['SeverityDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["major"]) -> typing.Union['SeverityDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["critical"]) -> typing.Union['SeverityDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["neutral", "minor", "major", "critical", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        neutral: typing.Union['SeverityDto', schemas.Unset] = schemas.unset,
        minor: typing.Union['SeverityDto', schemas.Unset] = schemas.unset,
        major: typing.Union['SeverityDto', schemas.Unset] = schemas.unset,
        critical: typing.Union['SeverityDto', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PenaltyPointsDto':
        return super().__new__(
            cls,
            *_args,
            neutral=neutral,
            minor=minor,
            major=major,
            critical=critical,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.severity_dto import SeverityDto
