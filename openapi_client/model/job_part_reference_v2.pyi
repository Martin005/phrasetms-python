# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class JobPartReferenceV2(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            uid = schemas.StrSchema
            innerId = schemas.StrSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NEW(cls):
                    return cls("NEW")
                
                @schemas.classproperty
                def ACCEPTED(cls):
                    return cls("ACCEPTED")
                
                @schemas.classproperty
                def DECLINED(cls):
                    return cls("DECLINED")
                
                @schemas.classproperty
                def REJECTED(cls):
                    return cls("REJECTED")
                
                @schemas.classproperty
                def DELIVERED(cls):
                    return cls("DELIVERED")
                
                @schemas.classproperty
                def EMAILED(cls):
                    return cls("EMAILED")
                
                @schemas.classproperty
                def COMPLETED(cls):
                    return cls("COMPLETED")
                
                @schemas.classproperty
                def CANCELLED(cls):
                    return cls("CANCELLED")
            
            
            class providers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ProviderReference']:
                        return ProviderReference
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ProviderReference'], typing.List['ProviderReference']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'providers':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ProviderReference':
                    return super().__getitem__(i)
            targetLang = schemas.StrSchema
        
            @staticmethod
            def workflowStep() -> typing.Type['ProjectWorkflowStepReference']:
                return ProjectWorkflowStepReference
            filename = schemas.StrSchema
            originalFileDirectory = schemas.StrSchema
            dateDue = schemas.DateTimeSchema
            dateCreated = schemas.DateTimeSchema
        
            @staticmethod
            def importStatus() -> typing.Type['ImportStatusDtoV2']:
                return ImportStatusDtoV2
            continuous = schemas.BoolSchema
            sourceFileUid = schemas.StrSchema
            split = schemas.BoolSchema
            serverTaskId = schemas.StrSchema
        
            @staticmethod
            def owner() -> typing.Type['UserReference']:
                return UserReference
            imported = schemas.BoolSchema
            __annotations__ = {
                "uid": uid,
                "innerId": innerId,
                "status": status,
                "providers": providers,
                "targetLang": targetLang,
                "workflowStep": workflowStep,
                "filename": filename,
                "originalFileDirectory": originalFileDirectory,
                "dateDue": dateDue,
                "dateCreated": dateCreated,
                "importStatus": importStatus,
                "continuous": continuous,
                "sourceFileUid": sourceFileUid,
                "split": split,
                "serverTaskId": serverTaskId,
                "owner": owner,
                "imported": imported,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uid"]) -> MetaOapg.properties.uid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["innerId"]) -> MetaOapg.properties.innerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["providers"]) -> MetaOapg.properties.providers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetLang"]) -> MetaOapg.properties.targetLang: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowStep"]) -> 'ProjectWorkflowStepReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filename"]) -> MetaOapg.properties.filename: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["originalFileDirectory"]) -> MetaOapg.properties.originalFileDirectory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateDue"]) -> MetaOapg.properties.dateDue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["importStatus"]) -> 'ImportStatusDtoV2': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["continuous"]) -> MetaOapg.properties.continuous: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceFileUid"]) -> MetaOapg.properties.sourceFileUid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["split"]) -> MetaOapg.properties.split: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serverTaskId"]) -> MetaOapg.properties.serverTaskId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> 'UserReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["imported"]) -> MetaOapg.properties.imported: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["uid", "innerId", "status", "providers", "targetLang", "workflowStep", "filename", "originalFileDirectory", "dateDue", "dateCreated", "importStatus", "continuous", "sourceFileUid", "split", "serverTaskId", "owner", "imported", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uid"]) -> typing.Union[MetaOapg.properties.uid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["innerId"]) -> typing.Union[MetaOapg.properties.innerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["providers"]) -> typing.Union[MetaOapg.properties.providers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetLang"]) -> typing.Union[MetaOapg.properties.targetLang, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowStep"]) -> typing.Union['ProjectWorkflowStepReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filename"]) -> typing.Union[MetaOapg.properties.filename, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["originalFileDirectory"]) -> typing.Union[MetaOapg.properties.originalFileDirectory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateDue"]) -> typing.Union[MetaOapg.properties.dateDue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> typing.Union[MetaOapg.properties.dateCreated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["importStatus"]) -> typing.Union['ImportStatusDtoV2', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["continuous"]) -> typing.Union[MetaOapg.properties.continuous, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceFileUid"]) -> typing.Union[MetaOapg.properties.sourceFileUid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["split"]) -> typing.Union[MetaOapg.properties.split, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serverTaskId"]) -> typing.Union[MetaOapg.properties.serverTaskId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union['UserReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["imported"]) -> typing.Union[MetaOapg.properties.imported, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["uid", "innerId", "status", "providers", "targetLang", "workflowStep", "filename", "originalFileDirectory", "dateDue", "dateCreated", "importStatus", "continuous", "sourceFileUid", "split", "serverTaskId", "owner", "imported", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        uid: typing.Union[MetaOapg.properties.uid, str, schemas.Unset] = schemas.unset,
        innerId: typing.Union[MetaOapg.properties.innerId, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        providers: typing.Union[MetaOapg.properties.providers, list, tuple, schemas.Unset] = schemas.unset,
        targetLang: typing.Union[MetaOapg.properties.targetLang, str, schemas.Unset] = schemas.unset,
        workflowStep: typing.Union['ProjectWorkflowStepReference', schemas.Unset] = schemas.unset,
        filename: typing.Union[MetaOapg.properties.filename, str, schemas.Unset] = schemas.unset,
        originalFileDirectory: typing.Union[MetaOapg.properties.originalFileDirectory, str, schemas.Unset] = schemas.unset,
        dateDue: typing.Union[MetaOapg.properties.dateDue, str, datetime, schemas.Unset] = schemas.unset,
        dateCreated: typing.Union[MetaOapg.properties.dateCreated, str, datetime, schemas.Unset] = schemas.unset,
        importStatus: typing.Union['ImportStatusDtoV2', schemas.Unset] = schemas.unset,
        continuous: typing.Union[MetaOapg.properties.continuous, bool, schemas.Unset] = schemas.unset,
        sourceFileUid: typing.Union[MetaOapg.properties.sourceFileUid, str, schemas.Unset] = schemas.unset,
        split: typing.Union[MetaOapg.properties.split, bool, schemas.Unset] = schemas.unset,
        serverTaskId: typing.Union[MetaOapg.properties.serverTaskId, str, schemas.Unset] = schemas.unset,
        owner: typing.Union['UserReference', schemas.Unset] = schemas.unset,
        imported: typing.Union[MetaOapg.properties.imported, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JobPartReferenceV2':
        return super().__new__(
            cls,
            *_args,
            uid=uid,
            innerId=innerId,
            status=status,
            providers=providers,
            targetLang=targetLang,
            workflowStep=workflowStep,
            filename=filename,
            originalFileDirectory=originalFileDirectory,
            dateDue=dateDue,
            dateCreated=dateCreated,
            importStatus=importStatus,
            continuous=continuous,
            sourceFileUid=sourceFileUid,
            split=split,
            serverTaskId=serverTaskId,
            owner=owner,
            imported=imported,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.import_status_dto_v2 import ImportStatusDtoV2
from openapi_client.model.project_workflow_step_reference import ProjectWorkflowStepReference
from openapi_client.model.provider_reference import ProviderReference
from openapi_client.model.user_reference import UserReference
