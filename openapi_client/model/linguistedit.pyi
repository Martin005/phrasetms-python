# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class LINGUISTEDIT(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    editAllTermsInTB = schemas.BoolSchema
                    editTranslationsInTM = schemas.BoolSchema
                    enableMT = schemas.BoolSchema
                    mayRejectJobs = schemas.BoolSchema
                    
                    
                    class sourceLocales(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            items = schemas.StrSchema
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'sourceLocales':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    
                    
                    class targetLocales(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            items = schemas.StrSchema
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'targetLocales':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    
                    
                    class workflowSteps(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['UidReference']:
                                return UidReference
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple['UidReference'], typing.List['UidReference']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'workflowSteps':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'UidReference':
                            return super().__getitem__(i)
                    
                    
                    class clients(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['UidReference']:
                                return UidReference
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple['UidReference'], typing.List['UidReference']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'clients':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'UidReference':
                            return super().__getitem__(i)
                    
                    
                    class domains(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['UidReference']:
                                return UidReference
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple['UidReference'], typing.List['UidReference']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'domains':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'UidReference':
                            return super().__getitem__(i)
                    
                    
                    class subDomains(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['UidReference']:
                                return UidReference
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple['UidReference'], typing.List['UidReference']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'subDomains':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'UidReference':
                            return super().__getitem__(i)
                
                    @staticmethod
                    def netRateScheme() -> typing.Type['UidReference']:
                        return UidReference
                
                    @staticmethod
                    def translationPriceList() -> typing.Type['UidReference']:
                        return UidReference
                    __annotations__ = {
                        "editAllTermsInTB": editAllTermsInTB,
                        "editTranslationsInTM": editTranslationsInTM,
                        "enableMT": enableMT,
                        "mayRejectJobs": mayRejectJobs,
                        "sourceLocales": sourceLocales,
                        "targetLocales": targetLocales,
                        "workflowSteps": workflowSteps,
                        "clients": clients,
                        "domains": domains,
                        "subDomains": subDomains,
                        "netRateScheme": netRateScheme,
                        "translationPriceList": translationPriceList,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["editAllTermsInTB"]) -> MetaOapg.properties.editAllTermsInTB: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["editTranslationsInTM"]) -> MetaOapg.properties.editTranslationsInTM: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["enableMT"]) -> MetaOapg.properties.enableMT: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["mayRejectJobs"]) -> MetaOapg.properties.mayRejectJobs: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["sourceLocales"]) -> MetaOapg.properties.sourceLocales: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["targetLocales"]) -> MetaOapg.properties.targetLocales: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["workflowSteps"]) -> MetaOapg.properties.workflowSteps: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["clients"]) -> MetaOapg.properties.clients: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["domains"]) -> MetaOapg.properties.domains: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["subDomains"]) -> MetaOapg.properties.subDomains: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["netRateScheme"]) -> 'UidReference': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["translationPriceList"]) -> 'UidReference': ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["editAllTermsInTB", "editTranslationsInTM", "enableMT", "mayRejectJobs", "sourceLocales", "targetLocales", "workflowSteps", "clients", "domains", "subDomains", "netRateScheme", "translationPriceList", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["editAllTermsInTB"]) -> typing.Union[MetaOapg.properties.editAllTermsInTB, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["editTranslationsInTM"]) -> typing.Union[MetaOapg.properties.editTranslationsInTM, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["enableMT"]) -> typing.Union[MetaOapg.properties.enableMT, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["mayRejectJobs"]) -> typing.Union[MetaOapg.properties.mayRejectJobs, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["sourceLocales"]) -> typing.Union[MetaOapg.properties.sourceLocales, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["targetLocales"]) -> typing.Union[MetaOapg.properties.targetLocales, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["workflowSteps"]) -> typing.Union[MetaOapg.properties.workflowSteps, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["clients"]) -> typing.Union[MetaOapg.properties.clients, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["domains"]) -> typing.Union[MetaOapg.properties.domains, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["subDomains"]) -> typing.Union[MetaOapg.properties.subDomains, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["netRateScheme"]) -> typing.Union['UidReference', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["translationPriceList"]) -> typing.Union['UidReference', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["editAllTermsInTB", "editTranslationsInTM", "enableMT", "mayRejectJobs", "sourceLocales", "targetLocales", "workflowSteps", "clients", "domains", "subDomains", "netRateScheme", "translationPriceList", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                editAllTermsInTB: typing.Union[MetaOapg.properties.editAllTermsInTB, bool, schemas.Unset] = schemas.unset,
                editTranslationsInTM: typing.Union[MetaOapg.properties.editTranslationsInTM, bool, schemas.Unset] = schemas.unset,
                enableMT: typing.Union[MetaOapg.properties.enableMT, bool, schemas.Unset] = schemas.unset,
                mayRejectJobs: typing.Union[MetaOapg.properties.mayRejectJobs, bool, schemas.Unset] = schemas.unset,
                sourceLocales: typing.Union[MetaOapg.properties.sourceLocales, list, tuple, schemas.Unset] = schemas.unset,
                targetLocales: typing.Union[MetaOapg.properties.targetLocales, list, tuple, schemas.Unset] = schemas.unset,
                workflowSteps: typing.Union[MetaOapg.properties.workflowSteps, list, tuple, schemas.Unset] = schemas.unset,
                clients: typing.Union[MetaOapg.properties.clients, list, tuple, schemas.Unset] = schemas.unset,
                domains: typing.Union[MetaOapg.properties.domains, list, tuple, schemas.Unset] = schemas.unset,
                subDomains: typing.Union[MetaOapg.properties.subDomains, list, tuple, schemas.Unset] = schemas.unset,
                netRateScheme: typing.Union['UidReference', schemas.Unset] = schemas.unset,
                translationPriceList: typing.Union['UidReference', schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *_args,
                    editAllTermsInTB=editAllTermsInTB,
                    editTranslationsInTM=editTranslationsInTM,
                    enableMT=enableMT,
                    mayRejectJobs=mayRejectJobs,
                    sourceLocales=sourceLocales,
                    targetLocales=targetLocales,
                    workflowSteps=workflowSteps,
                    clients=clients,
                    domains=domains,
                    subDomains=subDomains,
                    netRateScheme=netRateScheme,
                    translationPriceList=translationPriceList,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                AbstractUserEditDto,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LINGUISTEDIT':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from phrasetms_client.model.abstract_user_edit_dto import AbstractUserEditDto
from phrasetms_client.model.uid_reference import UidReference
