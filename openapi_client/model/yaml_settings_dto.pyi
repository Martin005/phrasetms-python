# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class YamlSettingsDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            htmlSubFilter = schemas.BoolSchema
            tagRegexp = schemas.StrSchema
            includeKeyRegexp = schemas.StrSchema
            excludeValueRegexp = schemas.StrSchema
            contextPath = schemas.StrSchema
            contextKeyPath = schemas.StrSchema
            markdownSubfilter = schemas.BoolSchema
            updateRootElementLang = schemas.BoolSchema
            
            
            class localeFormat(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def MEMSOURCE(cls):
                    return cls("MEMSOURCE")
                
                @schemas.classproperty
                def RFC_5646(cls):
                    return cls("RFC_5646")
                
                @schemas.classproperty
                def ANDROID_QUALIFIER(cls):
                    return cls("ANDROID_QUALIFIER")
                
                @schemas.classproperty
                def ANDROID_QUALIFIER_BCP(cls):
                    return cls("ANDROID_QUALIFIER_BCP")
            indentEmptyLinesInString = schemas.BoolSchema
            icuSubFilter = schemas.BoolSchema
            __annotations__ = {
                "htmlSubFilter": htmlSubFilter,
                "tagRegexp": tagRegexp,
                "includeKeyRegexp": includeKeyRegexp,
                "excludeValueRegexp": excludeValueRegexp,
                "contextPath": contextPath,
                "contextKeyPath": contextKeyPath,
                "markdownSubfilter": markdownSubfilter,
                "updateRootElementLang": updateRootElementLang,
                "localeFormat": localeFormat,
                "indentEmptyLinesInString": indentEmptyLinesInString,
                "icuSubFilter": icuSubFilter,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["htmlSubFilter"]) -> MetaOapg.properties.htmlSubFilter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tagRegexp"]) -> MetaOapg.properties.tagRegexp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includeKeyRegexp"]) -> MetaOapg.properties.includeKeyRegexp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["excludeValueRegexp"]) -> MetaOapg.properties.excludeValueRegexp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contextPath"]) -> MetaOapg.properties.contextPath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contextKeyPath"]) -> MetaOapg.properties.contextKeyPath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["markdownSubfilter"]) -> MetaOapg.properties.markdownSubfilter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateRootElementLang"]) -> MetaOapg.properties.updateRootElementLang: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["localeFormat"]) -> MetaOapg.properties.localeFormat: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["indentEmptyLinesInString"]) -> MetaOapg.properties.indentEmptyLinesInString: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["icuSubFilter"]) -> MetaOapg.properties.icuSubFilter: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["htmlSubFilter", "tagRegexp", "includeKeyRegexp", "excludeValueRegexp", "contextPath", "contextKeyPath", "markdownSubfilter", "updateRootElementLang", "localeFormat", "indentEmptyLinesInString", "icuSubFilter", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["htmlSubFilter"]) -> typing.Union[MetaOapg.properties.htmlSubFilter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tagRegexp"]) -> typing.Union[MetaOapg.properties.tagRegexp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includeKeyRegexp"]) -> typing.Union[MetaOapg.properties.includeKeyRegexp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["excludeValueRegexp"]) -> typing.Union[MetaOapg.properties.excludeValueRegexp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contextPath"]) -> typing.Union[MetaOapg.properties.contextPath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contextKeyPath"]) -> typing.Union[MetaOapg.properties.contextKeyPath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["markdownSubfilter"]) -> typing.Union[MetaOapg.properties.markdownSubfilter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateRootElementLang"]) -> typing.Union[MetaOapg.properties.updateRootElementLang, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["localeFormat"]) -> typing.Union[MetaOapg.properties.localeFormat, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["indentEmptyLinesInString"]) -> typing.Union[MetaOapg.properties.indentEmptyLinesInString, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["icuSubFilter"]) -> typing.Union[MetaOapg.properties.icuSubFilter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["htmlSubFilter", "tagRegexp", "includeKeyRegexp", "excludeValueRegexp", "contextPath", "contextKeyPath", "markdownSubfilter", "updateRootElementLang", "localeFormat", "indentEmptyLinesInString", "icuSubFilter", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        htmlSubFilter: typing.Union[MetaOapg.properties.htmlSubFilter, bool, schemas.Unset] = schemas.unset,
        tagRegexp: typing.Union[MetaOapg.properties.tagRegexp, str, schemas.Unset] = schemas.unset,
        includeKeyRegexp: typing.Union[MetaOapg.properties.includeKeyRegexp, str, schemas.Unset] = schemas.unset,
        excludeValueRegexp: typing.Union[MetaOapg.properties.excludeValueRegexp, str, schemas.Unset] = schemas.unset,
        contextPath: typing.Union[MetaOapg.properties.contextPath, str, schemas.Unset] = schemas.unset,
        contextKeyPath: typing.Union[MetaOapg.properties.contextKeyPath, str, schemas.Unset] = schemas.unset,
        markdownSubfilter: typing.Union[MetaOapg.properties.markdownSubfilter, bool, schemas.Unset] = schemas.unset,
        updateRootElementLang: typing.Union[MetaOapg.properties.updateRootElementLang, bool, schemas.Unset] = schemas.unset,
        localeFormat: typing.Union[MetaOapg.properties.localeFormat, str, schemas.Unset] = schemas.unset,
        indentEmptyLinesInString: typing.Union[MetaOapg.properties.indentEmptyLinesInString, bool, schemas.Unset] = schemas.unset,
        icuSubFilter: typing.Union[MetaOapg.properties.icuSubFilter, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'YamlSettingsDto':
        return super().__new__(
            cls,
            *_args,
            htmlSubFilter=htmlSubFilter,
            tagRegexp=tagRegexp,
            includeKeyRegexp=includeKeyRegexp,
            excludeValueRegexp=excludeValueRegexp,
            contextPath=contextPath,
            contextKeyPath=contextKeyPath,
            markdownSubfilter=markdownSubfilter,
            updateRootElementLang=updateRootElementLang,
            localeFormat=localeFormat,
            indentEmptyLinesInString=indentEmptyLinesInString,
            icuSubFilter=icuSubFilter,
            _configuration=_configuration,
            **kwargs,
        )
