# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class SegmentsCountsDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            allConfirmed = schemas.BoolSchema
            charsCount = schemas.Int64Schema
            completedCharsCount = schemas.Int64Schema
            confirmedCharsCount = schemas.Int64Schema
            confirmedLockedCharsCount = schemas.Int64Schema
            lockedCharsCount = schemas.Int64Schema
            segmentsCount = schemas.Int64Schema
            completedSegmentsCount = schemas.Int64Schema
            lockedSegmentsCount = schemas.Int64Schema
            segmentGroupsCount = schemas.Int64Schema
            translatedSegmentsCount = schemas.Int64Schema
            translatedLockedSegmentsCount = schemas.Int64Schema
            wordsCount = schemas.Int64Schema
            completedWordsCount = schemas.Int64Schema
            confirmedWordsCount = schemas.Int64Schema
            confirmedLockedWordsCount = schemas.Int64Schema
            lockedWordsCount = schemas.Int64Schema
            addedSegments = schemas.Int64Schema
            addedWords = schemas.Int64Schema
            machineTranslationPostEditedSegmentsCount = schemas.Int64Schema
            machineTranslationRelevantSegmentsCount = schemas.Int64Schema
        
            @staticmethod
            def qualityAssurance() -> typing.Type['QualityAssuranceDto']:
                return QualityAssuranceDto
            qualityAssuranceResolved = schemas.BoolSchema
            __annotations__ = {
                "allConfirmed": allConfirmed,
                "charsCount": charsCount,
                "completedCharsCount": completedCharsCount,
                "confirmedCharsCount": confirmedCharsCount,
                "confirmedLockedCharsCount": confirmedLockedCharsCount,
                "lockedCharsCount": lockedCharsCount,
                "segmentsCount": segmentsCount,
                "completedSegmentsCount": completedSegmentsCount,
                "lockedSegmentsCount": lockedSegmentsCount,
                "segmentGroupsCount": segmentGroupsCount,
                "translatedSegmentsCount": translatedSegmentsCount,
                "translatedLockedSegmentsCount": translatedLockedSegmentsCount,
                "wordsCount": wordsCount,
                "completedWordsCount": completedWordsCount,
                "confirmedWordsCount": confirmedWordsCount,
                "confirmedLockedWordsCount": confirmedLockedWordsCount,
                "lockedWordsCount": lockedWordsCount,
                "addedSegments": addedSegments,
                "addedWords": addedWords,
                "machineTranslationPostEditedSegmentsCount": machineTranslationPostEditedSegmentsCount,
                "machineTranslationRelevantSegmentsCount": machineTranslationRelevantSegmentsCount,
                "qualityAssurance": qualityAssurance,
                "qualityAssuranceResolved": qualityAssuranceResolved,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allConfirmed"]) -> MetaOapg.properties.allConfirmed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["charsCount"]) -> MetaOapg.properties.charsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["completedCharsCount"]) -> MetaOapg.properties.completedCharsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["confirmedCharsCount"]) -> MetaOapg.properties.confirmedCharsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["confirmedLockedCharsCount"]) -> MetaOapg.properties.confirmedLockedCharsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lockedCharsCount"]) -> MetaOapg.properties.lockedCharsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["segmentsCount"]) -> MetaOapg.properties.segmentsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["completedSegmentsCount"]) -> MetaOapg.properties.completedSegmentsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lockedSegmentsCount"]) -> MetaOapg.properties.lockedSegmentsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["segmentGroupsCount"]) -> MetaOapg.properties.segmentGroupsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["translatedSegmentsCount"]) -> MetaOapg.properties.translatedSegmentsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["translatedLockedSegmentsCount"]) -> MetaOapg.properties.translatedLockedSegmentsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wordsCount"]) -> MetaOapg.properties.wordsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["completedWordsCount"]) -> MetaOapg.properties.completedWordsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["confirmedWordsCount"]) -> MetaOapg.properties.confirmedWordsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["confirmedLockedWordsCount"]) -> MetaOapg.properties.confirmedLockedWordsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lockedWordsCount"]) -> MetaOapg.properties.lockedWordsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addedSegments"]) -> MetaOapg.properties.addedSegments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addedWords"]) -> MetaOapg.properties.addedWords: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["machineTranslationPostEditedSegmentsCount"]) -> MetaOapg.properties.machineTranslationPostEditedSegmentsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["machineTranslationRelevantSegmentsCount"]) -> MetaOapg.properties.machineTranslationRelevantSegmentsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qualityAssurance"]) -> 'QualityAssuranceDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qualityAssuranceResolved"]) -> MetaOapg.properties.qualityAssuranceResolved: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["allConfirmed", "charsCount", "completedCharsCount", "confirmedCharsCount", "confirmedLockedCharsCount", "lockedCharsCount", "segmentsCount", "completedSegmentsCount", "lockedSegmentsCount", "segmentGroupsCount", "translatedSegmentsCount", "translatedLockedSegmentsCount", "wordsCount", "completedWordsCount", "confirmedWordsCount", "confirmedLockedWordsCount", "lockedWordsCount", "addedSegments", "addedWords", "machineTranslationPostEditedSegmentsCount", "machineTranslationRelevantSegmentsCount", "qualityAssurance", "qualityAssuranceResolved", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allConfirmed"]) -> typing.Union[MetaOapg.properties.allConfirmed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["charsCount"]) -> typing.Union[MetaOapg.properties.charsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["completedCharsCount"]) -> typing.Union[MetaOapg.properties.completedCharsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["confirmedCharsCount"]) -> typing.Union[MetaOapg.properties.confirmedCharsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["confirmedLockedCharsCount"]) -> typing.Union[MetaOapg.properties.confirmedLockedCharsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lockedCharsCount"]) -> typing.Union[MetaOapg.properties.lockedCharsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["segmentsCount"]) -> typing.Union[MetaOapg.properties.segmentsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["completedSegmentsCount"]) -> typing.Union[MetaOapg.properties.completedSegmentsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lockedSegmentsCount"]) -> typing.Union[MetaOapg.properties.lockedSegmentsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["segmentGroupsCount"]) -> typing.Union[MetaOapg.properties.segmentGroupsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["translatedSegmentsCount"]) -> typing.Union[MetaOapg.properties.translatedSegmentsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["translatedLockedSegmentsCount"]) -> typing.Union[MetaOapg.properties.translatedLockedSegmentsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wordsCount"]) -> typing.Union[MetaOapg.properties.wordsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["completedWordsCount"]) -> typing.Union[MetaOapg.properties.completedWordsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["confirmedWordsCount"]) -> typing.Union[MetaOapg.properties.confirmedWordsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["confirmedLockedWordsCount"]) -> typing.Union[MetaOapg.properties.confirmedLockedWordsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lockedWordsCount"]) -> typing.Union[MetaOapg.properties.lockedWordsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addedSegments"]) -> typing.Union[MetaOapg.properties.addedSegments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addedWords"]) -> typing.Union[MetaOapg.properties.addedWords, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["machineTranslationPostEditedSegmentsCount"]) -> typing.Union[MetaOapg.properties.machineTranslationPostEditedSegmentsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["machineTranslationRelevantSegmentsCount"]) -> typing.Union[MetaOapg.properties.machineTranslationRelevantSegmentsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qualityAssurance"]) -> typing.Union['QualityAssuranceDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qualityAssuranceResolved"]) -> typing.Union[MetaOapg.properties.qualityAssuranceResolved, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["allConfirmed", "charsCount", "completedCharsCount", "confirmedCharsCount", "confirmedLockedCharsCount", "lockedCharsCount", "segmentsCount", "completedSegmentsCount", "lockedSegmentsCount", "segmentGroupsCount", "translatedSegmentsCount", "translatedLockedSegmentsCount", "wordsCount", "completedWordsCount", "confirmedWordsCount", "confirmedLockedWordsCount", "lockedWordsCount", "addedSegments", "addedWords", "machineTranslationPostEditedSegmentsCount", "machineTranslationRelevantSegmentsCount", "qualityAssurance", "qualityAssuranceResolved", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        allConfirmed: typing.Union[MetaOapg.properties.allConfirmed, bool, schemas.Unset] = schemas.unset,
        charsCount: typing.Union[MetaOapg.properties.charsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        completedCharsCount: typing.Union[MetaOapg.properties.completedCharsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        confirmedCharsCount: typing.Union[MetaOapg.properties.confirmedCharsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        confirmedLockedCharsCount: typing.Union[MetaOapg.properties.confirmedLockedCharsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        lockedCharsCount: typing.Union[MetaOapg.properties.lockedCharsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        segmentsCount: typing.Union[MetaOapg.properties.segmentsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        completedSegmentsCount: typing.Union[MetaOapg.properties.completedSegmentsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        lockedSegmentsCount: typing.Union[MetaOapg.properties.lockedSegmentsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        segmentGroupsCount: typing.Union[MetaOapg.properties.segmentGroupsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        translatedSegmentsCount: typing.Union[MetaOapg.properties.translatedSegmentsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        translatedLockedSegmentsCount: typing.Union[MetaOapg.properties.translatedLockedSegmentsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        wordsCount: typing.Union[MetaOapg.properties.wordsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        completedWordsCount: typing.Union[MetaOapg.properties.completedWordsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        confirmedWordsCount: typing.Union[MetaOapg.properties.confirmedWordsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        confirmedLockedWordsCount: typing.Union[MetaOapg.properties.confirmedLockedWordsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        lockedWordsCount: typing.Union[MetaOapg.properties.lockedWordsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        addedSegments: typing.Union[MetaOapg.properties.addedSegments, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        addedWords: typing.Union[MetaOapg.properties.addedWords, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        machineTranslationPostEditedSegmentsCount: typing.Union[MetaOapg.properties.machineTranslationPostEditedSegmentsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        machineTranslationRelevantSegmentsCount: typing.Union[MetaOapg.properties.machineTranslationRelevantSegmentsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        qualityAssurance: typing.Union['QualityAssuranceDto', schemas.Unset] = schemas.unset,
        qualityAssuranceResolved: typing.Union[MetaOapg.properties.qualityAssuranceResolved, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SegmentsCountsDto':
        return super().__new__(
            cls,
            *_args,
            allConfirmed=allConfirmed,
            charsCount=charsCount,
            completedCharsCount=completedCharsCount,
            confirmedCharsCount=confirmedCharsCount,
            confirmedLockedCharsCount=confirmedLockedCharsCount,
            lockedCharsCount=lockedCharsCount,
            segmentsCount=segmentsCount,
            completedSegmentsCount=completedSegmentsCount,
            lockedSegmentsCount=lockedSegmentsCount,
            segmentGroupsCount=segmentGroupsCount,
            translatedSegmentsCount=translatedSegmentsCount,
            translatedLockedSegmentsCount=translatedLockedSegmentsCount,
            wordsCount=wordsCount,
            completedWordsCount=completedWordsCount,
            confirmedWordsCount=confirmedWordsCount,
            confirmedLockedWordsCount=confirmedLockedWordsCount,
            lockedWordsCount=lockedWordsCount,
            addedSegments=addedSegments,
            addedWords=addedWords,
            machineTranslationPostEditedSegmentsCount=machineTranslationPostEditedSegmentsCount,
            machineTranslationRelevantSegmentsCount=machineTranslationRelevantSegmentsCount,
            qualityAssurance=qualityAssurance,
            qualityAssuranceResolved=qualityAssuranceResolved,
            _configuration=_configuration,
            **kwargs,
        )

from phrasetms_client.model.quality_assurance_dto import QualityAssuranceDto
