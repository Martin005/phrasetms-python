# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Marketo(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "connectorType",
                    "apiKey",
                    "identityURL",
                    "apiSecret",
                }
                
                class properties:
                    apiKey = schemas.StrSchema
                    apiSecret = schemas.StrSchema
                    identityURL = schemas.StrSchema
                    connectorType = schemas.StrSchema
                    
                    
                    class variables(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['VariableDto']:
                                return VariableDto
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple['VariableDto'], typing.List['VariableDto']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'variables':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'VariableDto':
                            return super().__getitem__(i)
                
                    @staticmethod
                    def segmentationMapping() -> typing.Type['MarketoSegmentationMappingDto']:
                        return MarketoSegmentationMappingDto
                    translateTokens = schemas.BoolSchema
                    debugMode = schemas.BoolSchema
                    __annotations__ = {
                        "apiKey": apiKey,
                        "apiSecret": apiSecret,
                        "identityURL": identityURL,
                        "connectorType": connectorType,
                        "variables": variables,
                        "segmentationMapping": segmentationMapping,
                        "translateTokens": translateTokens,
                        "debugMode": debugMode,
                    }
            
            connectorType: MetaOapg.properties.connectorType
            apiKey: MetaOapg.properties.apiKey
            identityURL: MetaOapg.properties.identityURL
            apiSecret: MetaOapg.properties.apiSecret
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["apiKey"]) -> MetaOapg.properties.apiKey: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["apiSecret"]) -> MetaOapg.properties.apiSecret: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["identityURL"]) -> MetaOapg.properties.identityURL: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["connectorType"]) -> MetaOapg.properties.connectorType: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["variables"]) -> MetaOapg.properties.variables: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["segmentationMapping"]) -> 'MarketoSegmentationMappingDto': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["translateTokens"]) -> MetaOapg.properties.translateTokens: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["debugMode"]) -> MetaOapg.properties.debugMode: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["apiKey", "apiSecret", "identityURL", "connectorType", "variables", "segmentationMapping", "translateTokens", "debugMode", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["apiKey"]) -> MetaOapg.properties.apiKey: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["apiSecret"]) -> MetaOapg.properties.apiSecret: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["identityURL"]) -> MetaOapg.properties.identityURL: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["connectorType"]) -> MetaOapg.properties.connectorType: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["variables"]) -> typing.Union[MetaOapg.properties.variables, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["segmentationMapping"]) -> typing.Union['MarketoSegmentationMappingDto', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["translateTokens"]) -> typing.Union[MetaOapg.properties.translateTokens, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["debugMode"]) -> typing.Union[MetaOapg.properties.debugMode, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["apiKey", "apiSecret", "identityURL", "connectorType", "variables", "segmentationMapping", "translateTokens", "debugMode", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                connectorType: typing.Union[MetaOapg.properties.connectorType, str, ],
                apiKey: typing.Union[MetaOapg.properties.apiKey, str, ],
                identityURL: typing.Union[MetaOapg.properties.identityURL, str, ],
                apiSecret: typing.Union[MetaOapg.properties.apiSecret, str, ],
                variables: typing.Union[MetaOapg.properties.variables, list, tuple, schemas.Unset] = schemas.unset,
                segmentationMapping: typing.Union['MarketoSegmentationMappingDto', schemas.Unset] = schemas.unset,
                translateTokens: typing.Union[MetaOapg.properties.translateTokens, bool, schemas.Unset] = schemas.unset,
                debugMode: typing.Union[MetaOapg.properties.debugMode, bool, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *_args,
                    connectorType=connectorType,
                    apiKey=apiKey,
                    identityURL=identityURL,
                    apiSecret=apiSecret,
                    variables=variables,
                    segmentationMapping=segmentationMapping,
                    translateTokens=translateTokens,
                    debugMode=debugMode,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                AbstractConnectorDto,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Marketo':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.abstract_connector_dto import AbstractConnectorDto
from openapi_client.model.marketo_segmentation_mapping_dto import MarketoSegmentationMappingDto
from openapi_client.model.variable_dto import VariableDto
