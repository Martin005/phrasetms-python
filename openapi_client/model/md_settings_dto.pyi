# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class MdSettingsDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            hardLineBreaksSegments = schemas.BoolSchema
            preserveWhiteSpaces = schemas.BoolSchema
            tagRegexp = schemas.StrSchema
            customElements = schemas.StrSchema
            ignoredBlockPrefixes = schemas.StrSchema
            
            
            class flavor(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def PLAIN(cls):
                    return cls("PLAIN")
                
                @schemas.classproperty
                def PHP(cls):
                    return cls("PHP")
                
                @schemas.classproperty
                def GITHUB(cls):
                    return cls("GITHUB")
            processJekyllFrontMatter = schemas.BoolSchema
            extractCodeBlocks = schemas.BoolSchema
            notEscapedCharacters = schemas.StrSchema
            excludeCodeElements = schemas.BoolSchema
            __annotations__ = {
                "hardLineBreaksSegments": hardLineBreaksSegments,
                "preserveWhiteSpaces": preserveWhiteSpaces,
                "tagRegexp": tagRegexp,
                "customElements": customElements,
                "ignoredBlockPrefixes": ignoredBlockPrefixes,
                "flavor": flavor,
                "processJekyllFrontMatter": processJekyllFrontMatter,
                "extractCodeBlocks": extractCodeBlocks,
                "notEscapedCharacters": notEscapedCharacters,
                "excludeCodeElements": excludeCodeElements,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hardLineBreaksSegments"]) -> MetaOapg.properties.hardLineBreaksSegments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preserveWhiteSpaces"]) -> MetaOapg.properties.preserveWhiteSpaces: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tagRegexp"]) -> MetaOapg.properties.tagRegexp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customElements"]) -> MetaOapg.properties.customElements: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ignoredBlockPrefixes"]) -> MetaOapg.properties.ignoredBlockPrefixes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flavor"]) -> MetaOapg.properties.flavor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["processJekyllFrontMatter"]) -> MetaOapg.properties.processJekyllFrontMatter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extractCodeBlocks"]) -> MetaOapg.properties.extractCodeBlocks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notEscapedCharacters"]) -> MetaOapg.properties.notEscapedCharacters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["excludeCodeElements"]) -> MetaOapg.properties.excludeCodeElements: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["hardLineBreaksSegments", "preserveWhiteSpaces", "tagRegexp", "customElements", "ignoredBlockPrefixes", "flavor", "processJekyllFrontMatter", "extractCodeBlocks", "notEscapedCharacters", "excludeCodeElements", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hardLineBreaksSegments"]) -> typing.Union[MetaOapg.properties.hardLineBreaksSegments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preserveWhiteSpaces"]) -> typing.Union[MetaOapg.properties.preserveWhiteSpaces, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tagRegexp"]) -> typing.Union[MetaOapg.properties.tagRegexp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customElements"]) -> typing.Union[MetaOapg.properties.customElements, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ignoredBlockPrefixes"]) -> typing.Union[MetaOapg.properties.ignoredBlockPrefixes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flavor"]) -> typing.Union[MetaOapg.properties.flavor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["processJekyllFrontMatter"]) -> typing.Union[MetaOapg.properties.processJekyllFrontMatter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extractCodeBlocks"]) -> typing.Union[MetaOapg.properties.extractCodeBlocks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notEscapedCharacters"]) -> typing.Union[MetaOapg.properties.notEscapedCharacters, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["excludeCodeElements"]) -> typing.Union[MetaOapg.properties.excludeCodeElements, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["hardLineBreaksSegments", "preserveWhiteSpaces", "tagRegexp", "customElements", "ignoredBlockPrefixes", "flavor", "processJekyllFrontMatter", "extractCodeBlocks", "notEscapedCharacters", "excludeCodeElements", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        hardLineBreaksSegments: typing.Union[MetaOapg.properties.hardLineBreaksSegments, bool, schemas.Unset] = schemas.unset,
        preserveWhiteSpaces: typing.Union[MetaOapg.properties.preserveWhiteSpaces, bool, schemas.Unset] = schemas.unset,
        tagRegexp: typing.Union[MetaOapg.properties.tagRegexp, str, schemas.Unset] = schemas.unset,
        customElements: typing.Union[MetaOapg.properties.customElements, str, schemas.Unset] = schemas.unset,
        ignoredBlockPrefixes: typing.Union[MetaOapg.properties.ignoredBlockPrefixes, str, schemas.Unset] = schemas.unset,
        flavor: typing.Union[MetaOapg.properties.flavor, str, schemas.Unset] = schemas.unset,
        processJekyllFrontMatter: typing.Union[MetaOapg.properties.processJekyllFrontMatter, bool, schemas.Unset] = schemas.unset,
        extractCodeBlocks: typing.Union[MetaOapg.properties.extractCodeBlocks, bool, schemas.Unset] = schemas.unset,
        notEscapedCharacters: typing.Union[MetaOapg.properties.notEscapedCharacters, str, schemas.Unset] = schemas.unset,
        excludeCodeElements: typing.Union[MetaOapg.properties.excludeCodeElements, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MdSettingsDto':
        return super().__new__(
            cls,
            *_args,
            hardLineBreaksSegments=hardLineBreaksSegments,
            preserveWhiteSpaces=preserveWhiteSpaces,
            tagRegexp=tagRegexp,
            customElements=customElements,
            ignoredBlockPrefixes=ignoredBlockPrefixes,
            flavor=flavor,
            processJekyllFrontMatter=processJekyllFrontMatter,
            extractCodeBlocks=extractCodeBlocks,
            notEscapedCharacters=notEscapedCharacters,
            excludeCodeElements=excludeCodeElements,
            _configuration=_configuration,
            **kwargs,
        )
