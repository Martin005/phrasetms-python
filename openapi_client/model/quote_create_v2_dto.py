# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class QuoteCreateV2Dto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "analyse",
            "name",
            "project",
            "priceList",
        }
        
        class properties:
            
            
            class name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 0
        
            @staticmethod
            def project() -> typing.Type['UidReference']:
                return UidReference
        
            @staticmethod
            def analyse() -> typing.Type['IdReference']:
                return IdReference
        
            @staticmethod
            def priceList() -> typing.Type['IdReference']:
                return IdReference
        
            @staticmethod
            def netRateScheme() -> typing.Type['IdReference']:
                return IdReference
        
            @staticmethod
            def provider() -> typing.Type['ProviderReference']:
                return ProviderReference
            
            
            class workflowSettings(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    
                    @staticmethod
                    def items() -> typing.Type['QuoteWorkflowSettingDto']:
                        return QuoteWorkflowSettingDto
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['QuoteWorkflowSettingDto'], typing.List['QuoteWorkflowSettingDto']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'workflowSettings':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'QuoteWorkflowSettingDto':
                    return super().__getitem__(i)
            
            
            class units(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['QuoteUnitsDto']:
                        return QuoteUnitsDto
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['QuoteUnitsDto'], typing.List['QuoteUnitsDto']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'units':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'QuoteUnitsDto':
                    return super().__getitem__(i)
            
            
            class additionalSteps(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'additionalSteps':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "name": name,
                "project": project,
                "analyse": analyse,
                "priceList": priceList,
                "netRateScheme": netRateScheme,
                "provider": provider,
                "workflowSettings": workflowSettings,
                "units": units,
                "additionalSteps": additionalSteps,
            }
    
    analyse: 'IdReference'
    name: MetaOapg.properties.name
    project: 'UidReference'
    priceList: 'IdReference'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project"]) -> 'UidReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["analyse"]) -> 'IdReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priceList"]) -> 'IdReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["netRateScheme"]) -> 'IdReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["provider"]) -> 'ProviderReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowSettings"]) -> MetaOapg.properties.workflowSettings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["units"]) -> MetaOapg.properties.units: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalSteps"]) -> MetaOapg.properties.additionalSteps: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "project", "analyse", "priceList", "netRateScheme", "provider", "workflowSettings", "units", "additionalSteps", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project"]) -> 'UidReference': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["analyse"]) -> 'IdReference': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priceList"]) -> 'IdReference': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["netRateScheme"]) -> typing.Union['IdReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["provider"]) -> typing.Union['ProviderReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowSettings"]) -> typing.Union[MetaOapg.properties.workflowSettings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["units"]) -> typing.Union[MetaOapg.properties.units, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalSteps"]) -> typing.Union[MetaOapg.properties.additionalSteps, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "project", "analyse", "priceList", "netRateScheme", "provider", "workflowSettings", "units", "additionalSteps", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        analyse: 'IdReference',
        name: typing.Union[MetaOapg.properties.name, str, ],
        project: 'UidReference',
        priceList: 'IdReference',
        netRateScheme: typing.Union['IdReference', schemas.Unset] = schemas.unset,
        provider: typing.Union['ProviderReference', schemas.Unset] = schemas.unset,
        workflowSettings: typing.Union[MetaOapg.properties.workflowSettings, list, tuple, schemas.Unset] = schemas.unset,
        units: typing.Union[MetaOapg.properties.units, list, tuple, schemas.Unset] = schemas.unset,
        additionalSteps: typing.Union[MetaOapg.properties.additionalSteps, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'QuoteCreateV2Dto':
        return super().__new__(
            cls,
            *_args,
            analyse=analyse,
            name=name,
            project=project,
            priceList=priceList,
            netRateScheme=netRateScheme,
            provider=provider,
            workflowSettings=workflowSettings,
            units=units,
            additionalSteps=additionalSteps,
            _configuration=_configuration,
            **kwargs,
        )

from phrasetms_client.model.id_reference import IdReference
from phrasetms_client.model.provider_reference import ProviderReference
from phrasetms_client.model.quote_units_dto import QuoteUnitsDto
from phrasetms_client.model.quote_workflow_setting_dto import QuoteWorkflowSettingDto
from phrasetms_client.model.uid_reference import UidReference
