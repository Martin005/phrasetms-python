# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class PoSettingsDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            tagRegexp = schemas.StrSchema
            exportMultiline = schemas.BoolSchema
            htmlSubFilter = schemas.BoolSchema
            segment = schemas.BoolSchema
            markupSubFilterTranslatable = schemas.StrSchema
            markupSubFilterNonTranslatable = schemas.StrSchema
            saveConfirmedSegments = schemas.BoolSchema
            
            
            class importSetSegmentConfirmedWhen(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "FUZZY": "FUZZY",
                        "NONFUZZY": "NONFUZZY",
                    }
                
                @schemas.classproperty
                def FUZZY(cls):
                    return cls("FUZZY")
                
                @schemas.classproperty
                def NONFUZZY(cls):
                    return cls("NONFUZZY")
            
            
            class importSetSegmentLockedWhen(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "FUZZY": "FUZZY",
                        "NONFUZZY": "NONFUZZY",
                    }
                
                @schemas.classproperty
                def FUZZY(cls):
                    return cls("FUZZY")
                
                @schemas.classproperty
                def NONFUZZY(cls):
                    return cls("NONFUZZY")
            
            
            class exportConfirmedLocked(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "FUZZY": "FUZZY",
                        "NONFUZZY": "NONFUZZY",
                    }
                
                @schemas.classproperty
                def FUZZY(cls):
                    return cls("FUZZY")
                
                @schemas.classproperty
                def NONFUZZY(cls):
                    return cls("NONFUZZY")
            
            
            class exportConfirmedNotLocked(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "FUZZY": "FUZZY",
                        "NONFUZZY": "NONFUZZY",
                    }
                
                @schemas.classproperty
                def FUZZY(cls):
                    return cls("FUZZY")
                
                @schemas.classproperty
                def NONFUZZY(cls):
                    return cls("NONFUZZY")
            
            
            class exportNotConfirmedLocked(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "FUZZY": "FUZZY",
                        "NONFUZZY": "NONFUZZY",
                    }
                
                @schemas.classproperty
                def FUZZY(cls):
                    return cls("FUZZY")
                
                @schemas.classproperty
                def NONFUZZY(cls):
                    return cls("NONFUZZY")
            
            
            class exportNotConfirmedNotLocked(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "FUZZY": "FUZZY",
                        "NONFUZZY": "NONFUZZY",
                    }
                
                @schemas.classproperty
                def FUZZY(cls):
                    return cls("FUZZY")
                
                @schemas.classproperty
                def NONFUZZY(cls):
                    return cls("NONFUZZY")
            icuSubFilter = schemas.BoolSchema
            __annotations__ = {
                "tagRegexp": tagRegexp,
                "exportMultiline": exportMultiline,
                "htmlSubFilter": htmlSubFilter,
                "segment": segment,
                "markupSubFilterTranslatable": markupSubFilterTranslatable,
                "markupSubFilterNonTranslatable": markupSubFilterNonTranslatable,
                "saveConfirmedSegments": saveConfirmedSegments,
                "importSetSegmentConfirmedWhen": importSetSegmentConfirmedWhen,
                "importSetSegmentLockedWhen": importSetSegmentLockedWhen,
                "exportConfirmedLocked": exportConfirmedLocked,
                "exportConfirmedNotLocked": exportConfirmedNotLocked,
                "exportNotConfirmedLocked": exportNotConfirmedLocked,
                "exportNotConfirmedNotLocked": exportNotConfirmedNotLocked,
                "icuSubFilter": icuSubFilter,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tagRegexp"]) -> MetaOapg.properties.tagRegexp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exportMultiline"]) -> MetaOapg.properties.exportMultiline: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["htmlSubFilter"]) -> MetaOapg.properties.htmlSubFilter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["segment"]) -> MetaOapg.properties.segment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["markupSubFilterTranslatable"]) -> MetaOapg.properties.markupSubFilterTranslatable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["markupSubFilterNonTranslatable"]) -> MetaOapg.properties.markupSubFilterNonTranslatable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["saveConfirmedSegments"]) -> MetaOapg.properties.saveConfirmedSegments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["importSetSegmentConfirmedWhen"]) -> MetaOapg.properties.importSetSegmentConfirmedWhen: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["importSetSegmentLockedWhen"]) -> MetaOapg.properties.importSetSegmentLockedWhen: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exportConfirmedLocked"]) -> MetaOapg.properties.exportConfirmedLocked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exportConfirmedNotLocked"]) -> MetaOapg.properties.exportConfirmedNotLocked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exportNotConfirmedLocked"]) -> MetaOapg.properties.exportNotConfirmedLocked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exportNotConfirmedNotLocked"]) -> MetaOapg.properties.exportNotConfirmedNotLocked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["icuSubFilter"]) -> MetaOapg.properties.icuSubFilter: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tagRegexp", "exportMultiline", "htmlSubFilter", "segment", "markupSubFilterTranslatable", "markupSubFilterNonTranslatable", "saveConfirmedSegments", "importSetSegmentConfirmedWhen", "importSetSegmentLockedWhen", "exportConfirmedLocked", "exportConfirmedNotLocked", "exportNotConfirmedLocked", "exportNotConfirmedNotLocked", "icuSubFilter", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tagRegexp"]) -> typing.Union[MetaOapg.properties.tagRegexp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exportMultiline"]) -> typing.Union[MetaOapg.properties.exportMultiline, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["htmlSubFilter"]) -> typing.Union[MetaOapg.properties.htmlSubFilter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["segment"]) -> typing.Union[MetaOapg.properties.segment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["markupSubFilterTranslatable"]) -> typing.Union[MetaOapg.properties.markupSubFilterTranslatable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["markupSubFilterNonTranslatable"]) -> typing.Union[MetaOapg.properties.markupSubFilterNonTranslatable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["saveConfirmedSegments"]) -> typing.Union[MetaOapg.properties.saveConfirmedSegments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["importSetSegmentConfirmedWhen"]) -> typing.Union[MetaOapg.properties.importSetSegmentConfirmedWhen, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["importSetSegmentLockedWhen"]) -> typing.Union[MetaOapg.properties.importSetSegmentLockedWhen, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exportConfirmedLocked"]) -> typing.Union[MetaOapg.properties.exportConfirmedLocked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exportConfirmedNotLocked"]) -> typing.Union[MetaOapg.properties.exportConfirmedNotLocked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exportNotConfirmedLocked"]) -> typing.Union[MetaOapg.properties.exportNotConfirmedLocked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exportNotConfirmedNotLocked"]) -> typing.Union[MetaOapg.properties.exportNotConfirmedNotLocked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["icuSubFilter"]) -> typing.Union[MetaOapg.properties.icuSubFilter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tagRegexp", "exportMultiline", "htmlSubFilter", "segment", "markupSubFilterTranslatable", "markupSubFilterNonTranslatable", "saveConfirmedSegments", "importSetSegmentConfirmedWhen", "importSetSegmentLockedWhen", "exportConfirmedLocked", "exportConfirmedNotLocked", "exportNotConfirmedLocked", "exportNotConfirmedNotLocked", "icuSubFilter", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        tagRegexp: typing.Union[MetaOapg.properties.tagRegexp, str, schemas.Unset] = schemas.unset,
        exportMultiline: typing.Union[MetaOapg.properties.exportMultiline, bool, schemas.Unset] = schemas.unset,
        htmlSubFilter: typing.Union[MetaOapg.properties.htmlSubFilter, bool, schemas.Unset] = schemas.unset,
        segment: typing.Union[MetaOapg.properties.segment, bool, schemas.Unset] = schemas.unset,
        markupSubFilterTranslatable: typing.Union[MetaOapg.properties.markupSubFilterTranslatable, str, schemas.Unset] = schemas.unset,
        markupSubFilterNonTranslatable: typing.Union[MetaOapg.properties.markupSubFilterNonTranslatable, str, schemas.Unset] = schemas.unset,
        saveConfirmedSegments: typing.Union[MetaOapg.properties.saveConfirmedSegments, bool, schemas.Unset] = schemas.unset,
        importSetSegmentConfirmedWhen: typing.Union[MetaOapg.properties.importSetSegmentConfirmedWhen, str, schemas.Unset] = schemas.unset,
        importSetSegmentLockedWhen: typing.Union[MetaOapg.properties.importSetSegmentLockedWhen, str, schemas.Unset] = schemas.unset,
        exportConfirmedLocked: typing.Union[MetaOapg.properties.exportConfirmedLocked, str, schemas.Unset] = schemas.unset,
        exportConfirmedNotLocked: typing.Union[MetaOapg.properties.exportConfirmedNotLocked, str, schemas.Unset] = schemas.unset,
        exportNotConfirmedLocked: typing.Union[MetaOapg.properties.exportNotConfirmedLocked, str, schemas.Unset] = schemas.unset,
        exportNotConfirmedNotLocked: typing.Union[MetaOapg.properties.exportNotConfirmedNotLocked, str, schemas.Unset] = schemas.unset,
        icuSubFilter: typing.Union[MetaOapg.properties.icuSubFilter, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PoSettingsDto':
        return super().__new__(
            cls,
            *_args,
            tagRegexp=tagRegexp,
            exportMultiline=exportMultiline,
            htmlSubFilter=htmlSubFilter,
            segment=segment,
            markupSubFilterTranslatable=markupSubFilterTranslatable,
            markupSubFilterNonTranslatable=markupSubFilterNonTranslatable,
            saveConfirmedSegments=saveConfirmedSegments,
            importSetSegmentConfirmedWhen=importSetSegmentConfirmedWhen,
            importSetSegmentLockedWhen=importSetSegmentLockedWhen,
            exportConfirmedLocked=exportConfirmedLocked,
            exportConfirmedNotLocked=exportConfirmedNotLocked,
            exportNotConfirmedLocked=exportNotConfirmedLocked,
            exportNotConfirmedNotLocked=exportNotConfirmedNotLocked,
            icuSubFilter=icuSubFilter,
            _configuration=_configuration,
            **kwargs,
        )
