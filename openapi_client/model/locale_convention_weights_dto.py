# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class LocaleConventionWeightsDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def localeConvention() -> typing.Type['ToggleableWeightDto']:
                return ToggleableWeightDto
        
            @staticmethod
            def addressFormat() -> typing.Type['ToggleableWeightDto']:
                return ToggleableWeightDto
        
            @staticmethod
            def dateFormat() -> typing.Type['ToggleableWeightDto']:
                return ToggleableWeightDto
        
            @staticmethod
            def currencyFormat() -> typing.Type['ToggleableWeightDto']:
                return ToggleableWeightDto
        
            @staticmethod
            def measurementFormat() -> typing.Type['ToggleableWeightDto']:
                return ToggleableWeightDto
        
            @staticmethod
            def shortcutKey() -> typing.Type['ToggleableWeightDto']:
                return ToggleableWeightDto
        
            @staticmethod
            def telephoneFormat() -> typing.Type['ToggleableWeightDto']:
                return ToggleableWeightDto
            __annotations__ = {
                "localeConvention": localeConvention,
                "addressFormat": addressFormat,
                "dateFormat": dateFormat,
                "currencyFormat": currencyFormat,
                "measurementFormat": measurementFormat,
                "shortcutKey": shortcutKey,
                "telephoneFormat": telephoneFormat,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["localeConvention"]) -> 'ToggleableWeightDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressFormat"]) -> 'ToggleableWeightDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateFormat"]) -> 'ToggleableWeightDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currencyFormat"]) -> 'ToggleableWeightDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["measurementFormat"]) -> 'ToggleableWeightDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shortcutKey"]) -> 'ToggleableWeightDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["telephoneFormat"]) -> 'ToggleableWeightDto': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["localeConvention", "addressFormat", "dateFormat", "currencyFormat", "measurementFormat", "shortcutKey", "telephoneFormat", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["localeConvention"]) -> typing.Union['ToggleableWeightDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressFormat"]) -> typing.Union['ToggleableWeightDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateFormat"]) -> typing.Union['ToggleableWeightDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currencyFormat"]) -> typing.Union['ToggleableWeightDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["measurementFormat"]) -> typing.Union['ToggleableWeightDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shortcutKey"]) -> typing.Union['ToggleableWeightDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["telephoneFormat"]) -> typing.Union['ToggleableWeightDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["localeConvention", "addressFormat", "dateFormat", "currencyFormat", "measurementFormat", "shortcutKey", "telephoneFormat", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        localeConvention: typing.Union['ToggleableWeightDto', schemas.Unset] = schemas.unset,
        addressFormat: typing.Union['ToggleableWeightDto', schemas.Unset] = schemas.unset,
        dateFormat: typing.Union['ToggleableWeightDto', schemas.Unset] = schemas.unset,
        currencyFormat: typing.Union['ToggleableWeightDto', schemas.Unset] = schemas.unset,
        measurementFormat: typing.Union['ToggleableWeightDto', schemas.Unset] = schemas.unset,
        shortcutKey: typing.Union['ToggleableWeightDto', schemas.Unset] = schemas.unset,
        telephoneFormat: typing.Union['ToggleableWeightDto', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LocaleConventionWeightsDto':
        return super().__new__(
            cls,
            *_args,
            localeConvention=localeConvention,
            addressFormat=addressFormat,
            dateFormat=dateFormat,
            currencyFormat=currencyFormat,
            measurementFormat=measurementFormat,
            shortcutKey=shortcutKey,
            telephoneFormat=telephoneFormat,
            _configuration=_configuration,
            **kwargs,
        )

from phrasetms_client.model.toggleable_weight_dto import ToggleableWeightDto
