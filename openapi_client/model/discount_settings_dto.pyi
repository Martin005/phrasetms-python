# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class DiscountSettingsDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            repetition = schemas.Float64Schema
            tm101 = schemas.Float64Schema
            tm100 = schemas.Float64Schema
            tm95 = schemas.Float64Schema
            tm85 = schemas.Float64Schema
            tm75 = schemas.Float64Schema
            tm50 = schemas.Float64Schema
            tm0 = schemas.Float64Schema
            mt100 = schemas.Float64Schema
            mt95 = schemas.Float64Schema
            mt85 = schemas.Float64Schema
            mt75 = schemas.Float64Schema
            mt50 = schemas.Float64Schema
            mt0 = schemas.Float64Schema
            nt100 = schemas.Float64Schema
            nt99 = schemas.Float64Schema
            nt85 = schemas.Float64Schema
            nt75 = schemas.Float64Schema
            nt50 = schemas.Float64Schema
            nt0 = schemas.Float64Schema
            if100 = schemas.Float64Schema
            if95 = schemas.Float64Schema
            if85 = schemas.Float64Schema
            if75 = schemas.Float64Schema
            if50 = schemas.Float64Schema
            if0 = schemas.Float64Schema
            __annotations__ = {
                "repetition": repetition,
                "tm101": tm101,
                "tm100": tm100,
                "tm95": tm95,
                "tm85": tm85,
                "tm75": tm75,
                "tm50": tm50,
                "tm0": tm0,
                "mt100": mt100,
                "mt95": mt95,
                "mt85": mt85,
                "mt75": mt75,
                "mt50": mt50,
                "mt0": mt0,
                "nt100": nt100,
                "nt99": nt99,
                "nt85": nt85,
                "nt75": nt75,
                "nt50": nt50,
                "nt0": nt0,
                "if100": if100,
                "if95": if95,
                "if85": if85,
                "if75": if75,
                "if50": if50,
                "if0": if0,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["repetition"]) -> MetaOapg.properties.repetition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tm101"]) -> MetaOapg.properties.tm101: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tm100"]) -> MetaOapg.properties.tm100: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tm95"]) -> MetaOapg.properties.tm95: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tm85"]) -> MetaOapg.properties.tm85: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tm75"]) -> MetaOapg.properties.tm75: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tm50"]) -> MetaOapg.properties.tm50: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tm0"]) -> MetaOapg.properties.tm0: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mt100"]) -> MetaOapg.properties.mt100: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mt95"]) -> MetaOapg.properties.mt95: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mt85"]) -> MetaOapg.properties.mt85: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mt75"]) -> MetaOapg.properties.mt75: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mt50"]) -> MetaOapg.properties.mt50: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mt0"]) -> MetaOapg.properties.mt0: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nt100"]) -> MetaOapg.properties.nt100: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nt99"]) -> MetaOapg.properties.nt99: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nt85"]) -> MetaOapg.properties.nt85: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nt75"]) -> MetaOapg.properties.nt75: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nt50"]) -> MetaOapg.properties.nt50: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nt0"]) -> MetaOapg.properties.nt0: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["if100"]) -> MetaOapg.properties.if100: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["if95"]) -> MetaOapg.properties.if95: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["if85"]) -> MetaOapg.properties.if85: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["if75"]) -> MetaOapg.properties.if75: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["if50"]) -> MetaOapg.properties.if50: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["if0"]) -> MetaOapg.properties.if0: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["repetition", "tm101", "tm100", "tm95", "tm85", "tm75", "tm50", "tm0", "mt100", "mt95", "mt85", "mt75", "mt50", "mt0", "nt100", "nt99", "nt85", "nt75", "nt50", "nt0", "if100", "if95", "if85", "if75", "if50", "if0", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["repetition"]) -> typing.Union[MetaOapg.properties.repetition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tm101"]) -> typing.Union[MetaOapg.properties.tm101, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tm100"]) -> typing.Union[MetaOapg.properties.tm100, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tm95"]) -> typing.Union[MetaOapg.properties.tm95, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tm85"]) -> typing.Union[MetaOapg.properties.tm85, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tm75"]) -> typing.Union[MetaOapg.properties.tm75, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tm50"]) -> typing.Union[MetaOapg.properties.tm50, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tm0"]) -> typing.Union[MetaOapg.properties.tm0, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mt100"]) -> typing.Union[MetaOapg.properties.mt100, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mt95"]) -> typing.Union[MetaOapg.properties.mt95, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mt85"]) -> typing.Union[MetaOapg.properties.mt85, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mt75"]) -> typing.Union[MetaOapg.properties.mt75, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mt50"]) -> typing.Union[MetaOapg.properties.mt50, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mt0"]) -> typing.Union[MetaOapg.properties.mt0, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nt100"]) -> typing.Union[MetaOapg.properties.nt100, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nt99"]) -> typing.Union[MetaOapg.properties.nt99, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nt85"]) -> typing.Union[MetaOapg.properties.nt85, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nt75"]) -> typing.Union[MetaOapg.properties.nt75, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nt50"]) -> typing.Union[MetaOapg.properties.nt50, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nt0"]) -> typing.Union[MetaOapg.properties.nt0, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["if100"]) -> typing.Union[MetaOapg.properties.if100, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["if95"]) -> typing.Union[MetaOapg.properties.if95, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["if85"]) -> typing.Union[MetaOapg.properties.if85, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["if75"]) -> typing.Union[MetaOapg.properties.if75, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["if50"]) -> typing.Union[MetaOapg.properties.if50, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["if0"]) -> typing.Union[MetaOapg.properties.if0, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["repetition", "tm101", "tm100", "tm95", "tm85", "tm75", "tm50", "tm0", "mt100", "mt95", "mt85", "mt75", "mt50", "mt0", "nt100", "nt99", "nt85", "nt75", "nt50", "nt0", "if100", "if95", "if85", "if75", "if50", "if0", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        repetition: typing.Union[MetaOapg.properties.repetition, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        tm101: typing.Union[MetaOapg.properties.tm101, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        tm100: typing.Union[MetaOapg.properties.tm100, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        tm95: typing.Union[MetaOapg.properties.tm95, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        tm85: typing.Union[MetaOapg.properties.tm85, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        tm75: typing.Union[MetaOapg.properties.tm75, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        tm50: typing.Union[MetaOapg.properties.tm50, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        tm0: typing.Union[MetaOapg.properties.tm0, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        mt100: typing.Union[MetaOapg.properties.mt100, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        mt95: typing.Union[MetaOapg.properties.mt95, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        mt85: typing.Union[MetaOapg.properties.mt85, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        mt75: typing.Union[MetaOapg.properties.mt75, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        mt50: typing.Union[MetaOapg.properties.mt50, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        mt0: typing.Union[MetaOapg.properties.mt0, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        nt100: typing.Union[MetaOapg.properties.nt100, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        nt99: typing.Union[MetaOapg.properties.nt99, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        nt85: typing.Union[MetaOapg.properties.nt85, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        nt75: typing.Union[MetaOapg.properties.nt75, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        nt50: typing.Union[MetaOapg.properties.nt50, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        nt0: typing.Union[MetaOapg.properties.nt0, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        if100: typing.Union[MetaOapg.properties.if100, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        if95: typing.Union[MetaOapg.properties.if95, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        if85: typing.Union[MetaOapg.properties.if85, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        if75: typing.Union[MetaOapg.properties.if75, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        if50: typing.Union[MetaOapg.properties.if50, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        if0: typing.Union[MetaOapg.properties.if0, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DiscountSettingsDto':
        return super().__new__(
            cls,
            *_args,
            repetition=repetition,
            tm101=tm101,
            tm100=tm100,
            tm95=tm95,
            tm85=tm85,
            tm75=tm75,
            tm50=tm50,
            tm0=tm0,
            mt100=mt100,
            mt95=mt95,
            mt85=mt85,
            mt75=mt75,
            mt50=mt50,
            mt0=mt0,
            nt100=nt100,
            nt99=nt99,
            nt85=nt85,
            nt75=nt75,
            nt50=nt50,
            nt0=nt0,
            if100=if100,
            if95=if95,
            if85=if85,
            if75=if75,
            if50=if50,
            if0=if0,
            _configuration=_configuration,
            **kwargs,
        )
