# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class OrganizationEmailTemplateDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            uid = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def JOB_ASSIGNED(cls):
                    return cls("JobAssigned")
                
                @schemas.classproperty
                def JOB_STATUS_CHANGED(cls):
                    return cls("JobStatusChanged")
                
                @schemas.classproperty
                def NEXT_WORKFLOW_STEP(cls):
                    return cls("NextWorkflowStep")
                
                @schemas.classproperty
                def JOB_REJECTED(cls):
                    return cls("JobRejected")
                
                @schemas.classproperty
                def LOGIN_INFO(cls):
                    return cls("LoginInfo")
                
                @schemas.classproperty
                def PROJECT_TRANSFERRED_TO_BUYER(cls):
                    return cls("ProjectTransferredToBuyer")
                
                @schemas.classproperty
                def SHARED_PROJECT_ASSIGNED(cls):
                    return cls("SharedProjectAssigned")
                
                @schemas.classproperty
                def SHARED_PROJECT_STATUS_CHANGED(cls):
                    return cls("SharedProjectStatusChanged")
                
                @schemas.classproperty
                def AUTOMATED_PROJECT_CREATED(cls):
                    return cls("AutomatedProjectCreated")
                
                @schemas.classproperty
                def AUTOMATED_PROJECT_SOURCE_UPDATED(cls):
                    return cls("AutomatedProjectSourceUpdated")
                
                @schemas.classproperty
                def AUTOMATED_PROJECT_STATUS_CHANGED(cls):
                    return cls("AutomatedProjectStatusChanged")
                
                @schemas.classproperty
                def JOB_WIDGET_PROJECT_QUOTE_PREPARED(cls):
                    return cls("JobWidgetProjectQuotePrepared")
                
                @schemas.classproperty
                def JOB_WIDGET_PROJECT_QUOTE_PREPARATION_FAILURE(cls):
                    return cls("JobWidgetProjectQuotePreparationFailure")
                
                @schemas.classproperty
                def JOB_WIDGET_PROJECT_CREATED(cls):
                    return cls("JobWidgetProjectCreated")
                
                @schemas.classproperty
                def JOB_WIDGET_PROJECT_COMPLETED(cls):
                    return cls("JobWidgetProjectCompleted")
                
                @schemas.classproperty
                def CMS_QUOTE_READY(cls):
                    return cls("CmsQuoteReady")
                
                @schemas.classproperty
                def CMS_WORK_COMPLETED(cls):
                    return cls("CmsWorkCompleted")
                
                @schemas.classproperty
                def CMS_JOB_REJECTED(cls):
                    return cls("CmsJobRejected")
                
                @schemas.classproperty
                def QUOTE_UPDATED(cls):
                    return cls("QUOTE_UPDATED")
                
                @schemas.classproperty
                def QUOTE_STATUS_CHANGED(cls):
                    return cls("QUOTE_STATUS_CHANGED")
                
                @schemas.classproperty
                def LQA_SHARE_REPORT(cls):
                    return cls("LQA_SHARE_REPORT")
            name = schemas.StrSchema
            subject = schemas.StrSchema
            body = schemas.StrSchema
            ccAddress = schemas.StrSchema
            bccAddress = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "uid": uid,
                "type": type,
                "name": name,
                "subject": subject,
                "body": body,
                "ccAddress": ccAddress,
                "bccAddress": bccAddress,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uid"]) -> MetaOapg.properties.uid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subject"]) -> MetaOapg.properties.subject: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["body"]) -> MetaOapg.properties.body: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ccAddress"]) -> MetaOapg.properties.ccAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bccAddress"]) -> MetaOapg.properties.bccAddress: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "uid", "type", "name", "subject", "body", "ccAddress", "bccAddress", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uid"]) -> typing.Union[MetaOapg.properties.uid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subject"]) -> typing.Union[MetaOapg.properties.subject, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["body"]) -> typing.Union[MetaOapg.properties.body, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ccAddress"]) -> typing.Union[MetaOapg.properties.ccAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bccAddress"]) -> typing.Union[MetaOapg.properties.bccAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "uid", "type", "name", "subject", "body", "ccAddress", "bccAddress", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        uid: typing.Union[MetaOapg.properties.uid, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        subject: typing.Union[MetaOapg.properties.subject, str, schemas.Unset] = schemas.unset,
        body: typing.Union[MetaOapg.properties.body, str, schemas.Unset] = schemas.unset,
        ccAddress: typing.Union[MetaOapg.properties.ccAddress, str, schemas.Unset] = schemas.unset,
        bccAddress: typing.Union[MetaOapg.properties.bccAddress, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OrganizationEmailTemplateDto':
        return super().__new__(
            cls,
            *_args,
            id=id,
            uid=uid,
            type=type,
            name=name,
            subject=subject,
            body=body,
            ccAddress=ccAddress,
            bccAddress=bccAddress,
            _configuration=_configuration,
            **kwargs,
        )
