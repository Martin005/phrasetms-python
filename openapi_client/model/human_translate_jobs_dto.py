# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class HumanTranslateJobsDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "jobs",
            "humanTranslateSettings",
        }
        
        class properties:
            
            
            class jobs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    max_items = 100
                    min_items = 1
                    
                    @staticmethod
                    def items() -> typing.Type['UidReference']:
                        return UidReference
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['UidReference'], typing.List['UidReference']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'jobs':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'UidReference':
                    return super().__getitem__(i)
        
            @staticmethod
            def humanTranslateSettings() -> typing.Type['IdReference']:
                return IdReference
            comment = schemas.StrSchema
            glossaryId = schemas.StrSchema
            usePreferredTranslators = schemas.BoolSchema
            
            
            class level(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "STANDARD": "STANDARD",
                        "PRO": "PRO",
                    }
                
                @schemas.classproperty
                def STANDARD(cls):
                    return cls("STANDARD")
                
                @schemas.classproperty
                def PRO(cls):
                    return cls("PRO")
            callbackUrl = schemas.StrSchema
            __annotations__ = {
                "jobs": jobs,
                "humanTranslateSettings": humanTranslateSettings,
                "comment": comment,
                "glossaryId": glossaryId,
                "usePreferredTranslators": usePreferredTranslators,
                "level": level,
                "callbackUrl": callbackUrl,
            }
    
    jobs: MetaOapg.properties.jobs
    humanTranslateSettings: 'IdReference'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobs"]) -> MetaOapg.properties.jobs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["humanTranslateSettings"]) -> 'IdReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["glossaryId"]) -> MetaOapg.properties.glossaryId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usePreferredTranslators"]) -> MetaOapg.properties.usePreferredTranslators: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["level"]) -> MetaOapg.properties.level: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["callbackUrl"]) -> MetaOapg.properties.callbackUrl: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["jobs", "humanTranslateSettings", "comment", "glossaryId", "usePreferredTranslators", "level", "callbackUrl", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobs"]) -> MetaOapg.properties.jobs: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["humanTranslateSettings"]) -> 'IdReference': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> typing.Union[MetaOapg.properties.comment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["glossaryId"]) -> typing.Union[MetaOapg.properties.glossaryId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usePreferredTranslators"]) -> typing.Union[MetaOapg.properties.usePreferredTranslators, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["level"]) -> typing.Union[MetaOapg.properties.level, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["callbackUrl"]) -> typing.Union[MetaOapg.properties.callbackUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["jobs", "humanTranslateSettings", "comment", "glossaryId", "usePreferredTranslators", "level", "callbackUrl", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        jobs: typing.Union[MetaOapg.properties.jobs, list, tuple, ],
        humanTranslateSettings: 'IdReference',
        comment: typing.Union[MetaOapg.properties.comment, str, schemas.Unset] = schemas.unset,
        glossaryId: typing.Union[MetaOapg.properties.glossaryId, str, schemas.Unset] = schemas.unset,
        usePreferredTranslators: typing.Union[MetaOapg.properties.usePreferredTranslators, bool, schemas.Unset] = schemas.unset,
        level: typing.Union[MetaOapg.properties.level, str, schemas.Unset] = schemas.unset,
        callbackUrl: typing.Union[MetaOapg.properties.callbackUrl, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'HumanTranslateJobsDto':
        return super().__new__(
            cls,
            *_args,
            jobs=jobs,
            humanTranslateSettings=humanTranslateSettings,
            comment=comment,
            glossaryId=glossaryId,
            usePreferredTranslators=usePreferredTranslators,
            level=level,
            callbackUrl=callbackUrl,
            _configuration=_configuration,
            **kwargs,
        )

from phrasetms_client.model.id_reference import IdReference
from phrasetms_client.model.uid_reference import UidReference
