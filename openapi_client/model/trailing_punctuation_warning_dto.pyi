# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class TrailingPunctuationWarningDto(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                
                    @staticmethod
                    def srcPosition() -> typing.Type['Position']:
                        return Position
                    srcEndPunctuation = schemas.StrSchema
                
                    @staticmethod
                    def tgtPosition() -> typing.Type['Position']:
                        return Position
                    tgtEndPunctuation = schemas.StrSchema
                    __annotations__ = {
                        "srcPosition": srcPosition,
                        "srcEndPunctuation": srcEndPunctuation,
                        "tgtPosition": tgtPosition,
                        "tgtEndPunctuation": tgtEndPunctuation,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["srcPosition"]) -> 'Position': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["srcEndPunctuation"]) -> MetaOapg.properties.srcEndPunctuation: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["tgtPosition"]) -> 'Position': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["tgtEndPunctuation"]) -> MetaOapg.properties.tgtEndPunctuation: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["srcPosition", "srcEndPunctuation", "tgtPosition", "tgtEndPunctuation", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["srcPosition"]) -> typing.Union['Position', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["srcEndPunctuation"]) -> typing.Union[MetaOapg.properties.srcEndPunctuation, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["tgtPosition"]) -> typing.Union['Position', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["tgtEndPunctuation"]) -> typing.Union[MetaOapg.properties.tgtEndPunctuation, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["srcPosition", "srcEndPunctuation", "tgtPosition", "tgtEndPunctuation", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                srcPosition: typing.Union['Position', schemas.Unset] = schemas.unset,
                srcEndPunctuation: typing.Union[MetaOapg.properties.srcEndPunctuation, str, schemas.Unset] = schemas.unset,
                tgtPosition: typing.Union['Position', schemas.Unset] = schemas.unset,
                tgtEndPunctuation: typing.Union[MetaOapg.properties.tgtEndPunctuation, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *_args,
                    srcPosition=srcPosition,
                    srcEndPunctuation=srcEndPunctuation,
                    tgtPosition=tgtPosition,
                    tgtEndPunctuation=tgtEndPunctuation,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                SegmentWarning,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TrailingPunctuationWarningDto':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from phrasetms_client.model.position import Position
from phrasetms_client.model.segment_warning import SegmentWarning
