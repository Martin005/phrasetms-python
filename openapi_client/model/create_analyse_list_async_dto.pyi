# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class CreateAnalyseListAsyncDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "jobs",
        }
        
        class properties:
            
            
            class jobs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['UidReference']:
                        return UidReference
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['UidReference'], typing.List['UidReference']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'jobs':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'UidReference':
                    return super().__getitem__(i)
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def PRE_ANALYSE(cls):
                    return cls("PreAnalyse")
                
                @schemas.classproperty
                def POST_ANALYSE(cls):
                    return cls("PostAnalyse")
                
                @schemas.classproperty
                def COMPARE(cls):
                    return cls("Compare")
            includeFuzzyRepetitions = schemas.BoolSchema
            separateFuzzyRepetitions = schemas.BoolSchema
            includeConfirmedSegments = schemas.BoolSchema
            includeNumbers = schemas.BoolSchema
            includeLockedSegments = schemas.BoolSchema
            countSourceUnits = schemas.BoolSchema
            includeTransMemory = schemas.BoolSchema
            includeNonTranslatables = schemas.BoolSchema
            includeMachineTranslationMatches = schemas.BoolSchema
            transMemoryPostEditing = schemas.BoolSchema
            nonTranslatablePostEditing = schemas.BoolSchema
            machineTranslatePostEditing = schemas.BoolSchema
            
            
            class name(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def netRateScheme() -> typing.Type['IdReference']:
                return IdReference
            
            
            class compareWorkflowLevel(
                schemas.Int32Schema
            ):
                pass
            useProjectAnalysisSettings = schemas.BoolSchema
            callbackUrl = schemas.StrSchema
            __annotations__ = {
                "jobs": jobs,
                "type": type,
                "includeFuzzyRepetitions": includeFuzzyRepetitions,
                "separateFuzzyRepetitions": separateFuzzyRepetitions,
                "includeConfirmedSegments": includeConfirmedSegments,
                "includeNumbers": includeNumbers,
                "includeLockedSegments": includeLockedSegments,
                "countSourceUnits": countSourceUnits,
                "includeTransMemory": includeTransMemory,
                "includeNonTranslatables": includeNonTranslatables,
                "includeMachineTranslationMatches": includeMachineTranslationMatches,
                "transMemoryPostEditing": transMemoryPostEditing,
                "nonTranslatablePostEditing": nonTranslatablePostEditing,
                "machineTranslatePostEditing": machineTranslatePostEditing,
                "name": name,
                "netRateScheme": netRateScheme,
                "compareWorkflowLevel": compareWorkflowLevel,
                "useProjectAnalysisSettings": useProjectAnalysisSettings,
                "callbackUrl": callbackUrl,
            }
    
    jobs: MetaOapg.properties.jobs
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobs"]) -> MetaOapg.properties.jobs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includeFuzzyRepetitions"]) -> MetaOapg.properties.includeFuzzyRepetitions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["separateFuzzyRepetitions"]) -> MetaOapg.properties.separateFuzzyRepetitions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includeConfirmedSegments"]) -> MetaOapg.properties.includeConfirmedSegments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includeNumbers"]) -> MetaOapg.properties.includeNumbers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includeLockedSegments"]) -> MetaOapg.properties.includeLockedSegments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countSourceUnits"]) -> MetaOapg.properties.countSourceUnits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includeTransMemory"]) -> MetaOapg.properties.includeTransMemory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includeNonTranslatables"]) -> MetaOapg.properties.includeNonTranslatables: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includeMachineTranslationMatches"]) -> MetaOapg.properties.includeMachineTranslationMatches: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transMemoryPostEditing"]) -> MetaOapg.properties.transMemoryPostEditing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nonTranslatablePostEditing"]) -> MetaOapg.properties.nonTranslatablePostEditing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["machineTranslatePostEditing"]) -> MetaOapg.properties.machineTranslatePostEditing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["netRateScheme"]) -> 'IdReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["compareWorkflowLevel"]) -> MetaOapg.properties.compareWorkflowLevel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["useProjectAnalysisSettings"]) -> MetaOapg.properties.useProjectAnalysisSettings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["callbackUrl"]) -> MetaOapg.properties.callbackUrl: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["jobs", "type", "includeFuzzyRepetitions", "separateFuzzyRepetitions", "includeConfirmedSegments", "includeNumbers", "includeLockedSegments", "countSourceUnits", "includeTransMemory", "includeNonTranslatables", "includeMachineTranslationMatches", "transMemoryPostEditing", "nonTranslatablePostEditing", "machineTranslatePostEditing", "name", "netRateScheme", "compareWorkflowLevel", "useProjectAnalysisSettings", "callbackUrl", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobs"]) -> MetaOapg.properties.jobs: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includeFuzzyRepetitions"]) -> typing.Union[MetaOapg.properties.includeFuzzyRepetitions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["separateFuzzyRepetitions"]) -> typing.Union[MetaOapg.properties.separateFuzzyRepetitions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includeConfirmedSegments"]) -> typing.Union[MetaOapg.properties.includeConfirmedSegments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includeNumbers"]) -> typing.Union[MetaOapg.properties.includeNumbers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includeLockedSegments"]) -> typing.Union[MetaOapg.properties.includeLockedSegments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countSourceUnits"]) -> typing.Union[MetaOapg.properties.countSourceUnits, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includeTransMemory"]) -> typing.Union[MetaOapg.properties.includeTransMemory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includeNonTranslatables"]) -> typing.Union[MetaOapg.properties.includeNonTranslatables, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includeMachineTranslationMatches"]) -> typing.Union[MetaOapg.properties.includeMachineTranslationMatches, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transMemoryPostEditing"]) -> typing.Union[MetaOapg.properties.transMemoryPostEditing, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nonTranslatablePostEditing"]) -> typing.Union[MetaOapg.properties.nonTranslatablePostEditing, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["machineTranslatePostEditing"]) -> typing.Union[MetaOapg.properties.machineTranslatePostEditing, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["netRateScheme"]) -> typing.Union['IdReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["compareWorkflowLevel"]) -> typing.Union[MetaOapg.properties.compareWorkflowLevel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["useProjectAnalysisSettings"]) -> typing.Union[MetaOapg.properties.useProjectAnalysisSettings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["callbackUrl"]) -> typing.Union[MetaOapg.properties.callbackUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["jobs", "type", "includeFuzzyRepetitions", "separateFuzzyRepetitions", "includeConfirmedSegments", "includeNumbers", "includeLockedSegments", "countSourceUnits", "includeTransMemory", "includeNonTranslatables", "includeMachineTranslationMatches", "transMemoryPostEditing", "nonTranslatablePostEditing", "machineTranslatePostEditing", "name", "netRateScheme", "compareWorkflowLevel", "useProjectAnalysisSettings", "callbackUrl", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        jobs: typing.Union[MetaOapg.properties.jobs, list, tuple, ],
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        includeFuzzyRepetitions: typing.Union[MetaOapg.properties.includeFuzzyRepetitions, bool, schemas.Unset] = schemas.unset,
        separateFuzzyRepetitions: typing.Union[MetaOapg.properties.separateFuzzyRepetitions, bool, schemas.Unset] = schemas.unset,
        includeConfirmedSegments: typing.Union[MetaOapg.properties.includeConfirmedSegments, bool, schemas.Unset] = schemas.unset,
        includeNumbers: typing.Union[MetaOapg.properties.includeNumbers, bool, schemas.Unset] = schemas.unset,
        includeLockedSegments: typing.Union[MetaOapg.properties.includeLockedSegments, bool, schemas.Unset] = schemas.unset,
        countSourceUnits: typing.Union[MetaOapg.properties.countSourceUnits, bool, schemas.Unset] = schemas.unset,
        includeTransMemory: typing.Union[MetaOapg.properties.includeTransMemory, bool, schemas.Unset] = schemas.unset,
        includeNonTranslatables: typing.Union[MetaOapg.properties.includeNonTranslatables, bool, schemas.Unset] = schemas.unset,
        includeMachineTranslationMatches: typing.Union[MetaOapg.properties.includeMachineTranslationMatches, bool, schemas.Unset] = schemas.unset,
        transMemoryPostEditing: typing.Union[MetaOapg.properties.transMemoryPostEditing, bool, schemas.Unset] = schemas.unset,
        nonTranslatablePostEditing: typing.Union[MetaOapg.properties.nonTranslatablePostEditing, bool, schemas.Unset] = schemas.unset,
        machineTranslatePostEditing: typing.Union[MetaOapg.properties.machineTranslatePostEditing, bool, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        netRateScheme: typing.Union['IdReference', schemas.Unset] = schemas.unset,
        compareWorkflowLevel: typing.Union[MetaOapg.properties.compareWorkflowLevel, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        useProjectAnalysisSettings: typing.Union[MetaOapg.properties.useProjectAnalysisSettings, bool, schemas.Unset] = schemas.unset,
        callbackUrl: typing.Union[MetaOapg.properties.callbackUrl, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateAnalyseListAsyncDto':
        return super().__new__(
            cls,
            *_args,
            jobs=jobs,
            type=type,
            includeFuzzyRepetitions=includeFuzzyRepetitions,
            separateFuzzyRepetitions=separateFuzzyRepetitions,
            includeConfirmedSegments=includeConfirmedSegments,
            includeNumbers=includeNumbers,
            includeLockedSegments=includeLockedSegments,
            countSourceUnits=countSourceUnits,
            includeTransMemory=includeTransMemory,
            includeNonTranslatables=includeNonTranslatables,
            includeMachineTranslationMatches=includeMachineTranslationMatches,
            transMemoryPostEditing=transMemoryPostEditing,
            nonTranslatablePostEditing=nonTranslatablePostEditing,
            machineTranslatePostEditing=machineTranslatePostEditing,
            name=name,
            netRateScheme=netRateScheme,
            compareWorkflowLevel=compareWorkflowLevel,
            useProjectAnalysisSettings=useProjectAnalysisSettings,
            callbackUrl=callbackUrl,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.id_reference import IdReference
from openapi_client.model.uid_reference import UidReference
