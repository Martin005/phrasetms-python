# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class LQAReferences(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "segmentId",
            "lqa",
            "transGroupId",
        }
        
        class properties:
            
            
            class transGroupId(
                schemas.Int32Schema
            ):
                pass
            segmentId = schemas.StrSchema
            
            
            class lqa(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['LQAReference']:
                        return LQAReference
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['LQAReference'], typing.List['LQAReference']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'lqa':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'LQAReference':
                    return super().__getitem__(i)
            taskId = schemas.StrSchema
            jobPartUid = schemas.StrSchema
            conversationTitle = schemas.StrSchema
            
            
            class conversationTitleOffset(
                schemas.Int32Schema
            ):
                pass
            commentedText = schemas.StrSchema
        
            @staticmethod
            def correlation() -> typing.Type['ReferenceCorrelation']:
                return ReferenceCorrelation
            __annotations__ = {
                "transGroupId": transGroupId,
                "segmentId": segmentId,
                "lqa": lqa,
                "taskId": taskId,
                "jobPartUid": jobPartUid,
                "conversationTitle": conversationTitle,
                "conversationTitleOffset": conversationTitleOffset,
                "commentedText": commentedText,
                "correlation": correlation,
            }
    
    segmentId: MetaOapg.properties.segmentId
    lqa: MetaOapg.properties.lqa
    transGroupId: MetaOapg.properties.transGroupId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transGroupId"]) -> MetaOapg.properties.transGroupId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["segmentId"]) -> MetaOapg.properties.segmentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lqa"]) -> MetaOapg.properties.lqa: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taskId"]) -> MetaOapg.properties.taskId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobPartUid"]) -> MetaOapg.properties.jobPartUid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conversationTitle"]) -> MetaOapg.properties.conversationTitle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conversationTitleOffset"]) -> MetaOapg.properties.conversationTitleOffset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["commentedText"]) -> MetaOapg.properties.commentedText: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["correlation"]) -> 'ReferenceCorrelation': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["transGroupId", "segmentId", "lqa", "taskId", "jobPartUid", "conversationTitle", "conversationTitleOffset", "commentedText", "correlation", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transGroupId"]) -> MetaOapg.properties.transGroupId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["segmentId"]) -> MetaOapg.properties.segmentId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lqa"]) -> MetaOapg.properties.lqa: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taskId"]) -> typing.Union[MetaOapg.properties.taskId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobPartUid"]) -> typing.Union[MetaOapg.properties.jobPartUid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conversationTitle"]) -> typing.Union[MetaOapg.properties.conversationTitle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conversationTitleOffset"]) -> typing.Union[MetaOapg.properties.conversationTitleOffset, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["commentedText"]) -> typing.Union[MetaOapg.properties.commentedText, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["correlation"]) -> typing.Union['ReferenceCorrelation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["transGroupId", "segmentId", "lqa", "taskId", "jobPartUid", "conversationTitle", "conversationTitleOffset", "commentedText", "correlation", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        segmentId: typing.Union[MetaOapg.properties.segmentId, str, ],
        lqa: typing.Union[MetaOapg.properties.lqa, list, tuple, ],
        transGroupId: typing.Union[MetaOapg.properties.transGroupId, decimal.Decimal, int, ],
        taskId: typing.Union[MetaOapg.properties.taskId, str, schemas.Unset] = schemas.unset,
        jobPartUid: typing.Union[MetaOapg.properties.jobPartUid, str, schemas.Unset] = schemas.unset,
        conversationTitle: typing.Union[MetaOapg.properties.conversationTitle, str, schemas.Unset] = schemas.unset,
        conversationTitleOffset: typing.Union[MetaOapg.properties.conversationTitleOffset, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        commentedText: typing.Union[MetaOapg.properties.commentedText, str, schemas.Unset] = schemas.unset,
        correlation: typing.Union['ReferenceCorrelation', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LQAReferences':
        return super().__new__(
            cls,
            *_args,
            segmentId=segmentId,
            lqa=lqa,
            transGroupId=transGroupId,
            taskId=taskId,
            jobPartUid=jobPartUid,
            conversationTitle=conversationTitle,
            conversationTitleOffset=conversationTitleOffset,
            commentedText=commentedText,
            correlation=correlation,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.lqa_reference import LQAReference
from openapi_client.model.reference_correlation import ReferenceCorrelation
