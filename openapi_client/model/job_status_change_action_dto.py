# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class JobStatusChangeActionDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class requestedStatus(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "NEW": "NEW",
                        "ACCEPTED": "ACCEPTED",
                        "DECLINED": "DECLINED",
                        "REJECTED": "REJECTED",
                        "DELIVERED": "DELIVERED",
                        "EMAILED": "EMAILED",
                        "COMPLETED": "COMPLETED",
                        "CANCELLED": "CANCELLED",
                    }
                
                @schemas.classproperty
                def NEW(cls):
                    return cls("NEW")
                
                @schemas.classproperty
                def ACCEPTED(cls):
                    return cls("ACCEPTED")
                
                @schemas.classproperty
                def DECLINED(cls):
                    return cls("DECLINED")
                
                @schemas.classproperty
                def REJECTED(cls):
                    return cls("REJECTED")
                
                @schemas.classproperty
                def DELIVERED(cls):
                    return cls("DELIVERED")
                
                @schemas.classproperty
                def EMAILED(cls):
                    return cls("EMAILED")
                
                @schemas.classproperty
                def COMPLETED(cls):
                    return cls("COMPLETED")
                
                @schemas.classproperty
                def CANCELLED(cls):
                    return cls("CANCELLED")
            notifyOwner = schemas.BoolSchema
            propagateStatus = schemas.BoolSchema
            __annotations__ = {
                "requestedStatus": requestedStatus,
                "notifyOwner": notifyOwner,
                "propagateStatus": propagateStatus,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requestedStatus"]) -> MetaOapg.properties.requestedStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notifyOwner"]) -> MetaOapg.properties.notifyOwner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["propagateStatus"]) -> MetaOapg.properties.propagateStatus: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["requestedStatus", "notifyOwner", "propagateStatus", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requestedStatus"]) -> typing.Union[MetaOapg.properties.requestedStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notifyOwner"]) -> typing.Union[MetaOapg.properties.notifyOwner, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["propagateStatus"]) -> typing.Union[MetaOapg.properties.propagateStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["requestedStatus", "notifyOwner", "propagateStatus", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        requestedStatus: typing.Union[MetaOapg.properties.requestedStatus, str, schemas.Unset] = schemas.unset,
        notifyOwner: typing.Union[MetaOapg.properties.notifyOwner, bool, schemas.Unset] = schemas.unset,
        propagateStatus: typing.Union[MetaOapg.properties.propagateStatus, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JobStatusChangeActionDto':
        return super().__new__(
            cls,
            *_args,
            requestedStatus=requestedStatus,
            notifyOwner=notifyOwner,
            propagateStatus=propagateStatus,
            _configuration=_configuration,
            **kwargs,
        )
