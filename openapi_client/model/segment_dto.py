# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class SegmentDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "targetLang",
            "targetSegment",
            "sourceSegment",
        }
        
        class properties:
            targetLang = schemas.StrSchema
            sourceSegment = schemas.StrSchema
            targetSegment = schemas.StrSchema
            previousSourceSegment = schemas.StrSchema
            nextSourceSegment = schemas.StrSchema
            
            
            class sourceTagMetadata(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TagMetadataDto']:
                        return TagMetadataDto
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['TagMetadataDto'], typing.List['TagMetadataDto']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sourceTagMetadata':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TagMetadataDto':
                    return super().__getitem__(i)
            
            
            class targetTagMetadata(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TagMetadataDto']:
                        return TagMetadataDto
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['TagMetadataDto'], typing.List['TagMetadataDto']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'targetTagMetadata':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TagMetadataDto':
                    return super().__getitem__(i)
            __annotations__ = {
                "targetLang": targetLang,
                "sourceSegment": sourceSegment,
                "targetSegment": targetSegment,
                "previousSourceSegment": previousSourceSegment,
                "nextSourceSegment": nextSourceSegment,
                "sourceTagMetadata": sourceTagMetadata,
                "targetTagMetadata": targetTagMetadata,
            }
    
    targetLang: MetaOapg.properties.targetLang
    targetSegment: MetaOapg.properties.targetSegment
    sourceSegment: MetaOapg.properties.sourceSegment
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetLang"]) -> MetaOapg.properties.targetLang: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceSegment"]) -> MetaOapg.properties.sourceSegment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetSegment"]) -> MetaOapg.properties.targetSegment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["previousSourceSegment"]) -> MetaOapg.properties.previousSourceSegment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nextSourceSegment"]) -> MetaOapg.properties.nextSourceSegment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceTagMetadata"]) -> MetaOapg.properties.sourceTagMetadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetTagMetadata"]) -> MetaOapg.properties.targetTagMetadata: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["targetLang", "sourceSegment", "targetSegment", "previousSourceSegment", "nextSourceSegment", "sourceTagMetadata", "targetTagMetadata", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetLang"]) -> MetaOapg.properties.targetLang: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceSegment"]) -> MetaOapg.properties.sourceSegment: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetSegment"]) -> MetaOapg.properties.targetSegment: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["previousSourceSegment"]) -> typing.Union[MetaOapg.properties.previousSourceSegment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nextSourceSegment"]) -> typing.Union[MetaOapg.properties.nextSourceSegment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceTagMetadata"]) -> typing.Union[MetaOapg.properties.sourceTagMetadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetTagMetadata"]) -> typing.Union[MetaOapg.properties.targetTagMetadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["targetLang", "sourceSegment", "targetSegment", "previousSourceSegment", "nextSourceSegment", "sourceTagMetadata", "targetTagMetadata", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        targetLang: typing.Union[MetaOapg.properties.targetLang, str, ],
        targetSegment: typing.Union[MetaOapg.properties.targetSegment, str, ],
        sourceSegment: typing.Union[MetaOapg.properties.sourceSegment, str, ],
        previousSourceSegment: typing.Union[MetaOapg.properties.previousSourceSegment, str, schemas.Unset] = schemas.unset,
        nextSourceSegment: typing.Union[MetaOapg.properties.nextSourceSegment, str, schemas.Unset] = schemas.unset,
        sourceTagMetadata: typing.Union[MetaOapg.properties.sourceTagMetadata, list, tuple, schemas.Unset] = schemas.unset,
        targetTagMetadata: typing.Union[MetaOapg.properties.targetTagMetadata, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SegmentDto':
        return super().__new__(
            cls,
            *_args,
            targetLang=targetLang,
            targetSegment=targetSegment,
            sourceSegment=sourceSegment,
            previousSourceSegment=previousSourceSegment,
            nextSourceSegment=nextSourceSegment,
            sourceTagMetadata=sourceTagMetadata,
            targetTagMetadata=targetTagMetadata,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.tag_metadata_dto import TagMetadataDto
