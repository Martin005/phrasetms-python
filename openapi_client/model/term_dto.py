# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class TermDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "text",
        }
        
        class properties:
            text = schemas.StrSchema
            id = schemas.StrSchema
            lang = schemas.StrSchema
            rtl = schemas.BoolSchema
            modifiedAt = schemas.DateTimeSchema
            createdAt = schemas.DateTimeSchema
        
            @staticmethod
            def modifiedBy() -> typing.Type['UserReference']:
                return UserReference
        
            @staticmethod
            def createdBy() -> typing.Type['UserReference']:
                return UserReference
            caseSensitive = schemas.BoolSchema
            exactMatch = schemas.BoolSchema
            forbidden = schemas.BoolSchema
            preferred = schemas.BoolSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "New": "NEW",
                        "Approved": "APPROVED",
                    }
                
                @schemas.classproperty
                def NEW(cls):
                    return cls("New")
                
                @schemas.classproperty
                def APPROVED(cls):
                    return cls("Approved")
            conceptId = schemas.StrSchema
            usage = schemas.StrSchema
            note = schemas.StrSchema
            writable = schemas.BoolSchema
            shortTranslation = schemas.StrSchema
            termType = schemas.StrSchema
            partOfSpeech = schemas.StrSchema
            gender = schemas.StrSchema
            number = schemas.StrSchema
            definition = schemas.StrSchema
            domain = schemas.StrSchema
            
            
            class subDomains(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'subDomains':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            url = schemas.StrSchema
            conceptNote = schemas.StrSchema
            __annotations__ = {
                "text": text,
                "id": id,
                "lang": lang,
                "rtl": rtl,
                "modifiedAt": modifiedAt,
                "createdAt": createdAt,
                "modifiedBy": modifiedBy,
                "createdBy": createdBy,
                "caseSensitive": caseSensitive,
                "exactMatch": exactMatch,
                "forbidden": forbidden,
                "preferred": preferred,
                "status": status,
                "conceptId": conceptId,
                "usage": usage,
                "note": note,
                "writable": writable,
                "shortTranslation": shortTranslation,
                "termType": termType,
                "partOfSpeech": partOfSpeech,
                "gender": gender,
                "number": number,
                "definition": definition,
                "domain": domain,
                "subDomains": subDomains,
                "url": url,
                "conceptNote": conceptNote,
            }
    
    text: MetaOapg.properties.text
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lang"]) -> MetaOapg.properties.lang: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rtl"]) -> MetaOapg.properties.rtl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modifiedAt"]) -> MetaOapg.properties.modifiedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modifiedBy"]) -> 'UserReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdBy"]) -> 'UserReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseSensitive"]) -> MetaOapg.properties.caseSensitive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exactMatch"]) -> MetaOapg.properties.exactMatch: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["forbidden"]) -> MetaOapg.properties.forbidden: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preferred"]) -> MetaOapg.properties.preferred: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conceptId"]) -> MetaOapg.properties.conceptId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usage"]) -> MetaOapg.properties.usage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["writable"]) -> MetaOapg.properties.writable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shortTranslation"]) -> MetaOapg.properties.shortTranslation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["termType"]) -> MetaOapg.properties.termType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partOfSpeech"]) -> MetaOapg.properties.partOfSpeech: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gender"]) -> MetaOapg.properties.gender: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["number"]) -> MetaOapg.properties.number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["definition"]) -> MetaOapg.properties.definition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain"]) -> MetaOapg.properties.domain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subDomains"]) -> MetaOapg.properties.subDomains: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conceptNote"]) -> MetaOapg.properties.conceptNote: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["text", "id", "lang", "rtl", "modifiedAt", "createdAt", "modifiedBy", "createdBy", "caseSensitive", "exactMatch", "forbidden", "preferred", "status", "conceptId", "usage", "note", "writable", "shortTranslation", "termType", "partOfSpeech", "gender", "number", "definition", "domain", "subDomains", "url", "conceptNote", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lang"]) -> typing.Union[MetaOapg.properties.lang, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rtl"]) -> typing.Union[MetaOapg.properties.rtl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modifiedAt"]) -> typing.Union[MetaOapg.properties.modifiedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> typing.Union[MetaOapg.properties.createdAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modifiedBy"]) -> typing.Union['UserReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdBy"]) -> typing.Union['UserReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseSensitive"]) -> typing.Union[MetaOapg.properties.caseSensitive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exactMatch"]) -> typing.Union[MetaOapg.properties.exactMatch, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["forbidden"]) -> typing.Union[MetaOapg.properties.forbidden, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preferred"]) -> typing.Union[MetaOapg.properties.preferred, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conceptId"]) -> typing.Union[MetaOapg.properties.conceptId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usage"]) -> typing.Union[MetaOapg.properties.usage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["writable"]) -> typing.Union[MetaOapg.properties.writable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shortTranslation"]) -> typing.Union[MetaOapg.properties.shortTranslation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["termType"]) -> typing.Union[MetaOapg.properties.termType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partOfSpeech"]) -> typing.Union[MetaOapg.properties.partOfSpeech, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gender"]) -> typing.Union[MetaOapg.properties.gender, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["number"]) -> typing.Union[MetaOapg.properties.number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["definition"]) -> typing.Union[MetaOapg.properties.definition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domain"]) -> typing.Union[MetaOapg.properties.domain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subDomains"]) -> typing.Union[MetaOapg.properties.subDomains, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conceptNote"]) -> typing.Union[MetaOapg.properties.conceptNote, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["text", "id", "lang", "rtl", "modifiedAt", "createdAt", "modifiedBy", "createdBy", "caseSensitive", "exactMatch", "forbidden", "preferred", "status", "conceptId", "usage", "note", "writable", "shortTranslation", "termType", "partOfSpeech", "gender", "number", "definition", "domain", "subDomains", "url", "conceptNote", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        text: typing.Union[MetaOapg.properties.text, str, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        lang: typing.Union[MetaOapg.properties.lang, str, schemas.Unset] = schemas.unset,
        rtl: typing.Union[MetaOapg.properties.rtl, bool, schemas.Unset] = schemas.unset,
        modifiedAt: typing.Union[MetaOapg.properties.modifiedAt, str, datetime, schemas.Unset] = schemas.unset,
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, datetime, schemas.Unset] = schemas.unset,
        modifiedBy: typing.Union['UserReference', schemas.Unset] = schemas.unset,
        createdBy: typing.Union['UserReference', schemas.Unset] = schemas.unset,
        caseSensitive: typing.Union[MetaOapg.properties.caseSensitive, bool, schemas.Unset] = schemas.unset,
        exactMatch: typing.Union[MetaOapg.properties.exactMatch, bool, schemas.Unset] = schemas.unset,
        forbidden: typing.Union[MetaOapg.properties.forbidden, bool, schemas.Unset] = schemas.unset,
        preferred: typing.Union[MetaOapg.properties.preferred, bool, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        conceptId: typing.Union[MetaOapg.properties.conceptId, str, schemas.Unset] = schemas.unset,
        usage: typing.Union[MetaOapg.properties.usage, str, schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        writable: typing.Union[MetaOapg.properties.writable, bool, schemas.Unset] = schemas.unset,
        shortTranslation: typing.Union[MetaOapg.properties.shortTranslation, str, schemas.Unset] = schemas.unset,
        termType: typing.Union[MetaOapg.properties.termType, str, schemas.Unset] = schemas.unset,
        partOfSpeech: typing.Union[MetaOapg.properties.partOfSpeech, str, schemas.Unset] = schemas.unset,
        gender: typing.Union[MetaOapg.properties.gender, str, schemas.Unset] = schemas.unset,
        number: typing.Union[MetaOapg.properties.number, str, schemas.Unset] = schemas.unset,
        definition: typing.Union[MetaOapg.properties.definition, str, schemas.Unset] = schemas.unset,
        domain: typing.Union[MetaOapg.properties.domain, str, schemas.Unset] = schemas.unset,
        subDomains: typing.Union[MetaOapg.properties.subDomains, list, tuple, schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        conceptNote: typing.Union[MetaOapg.properties.conceptNote, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TermDto':
        return super().__new__(
            cls,
            *_args,
            text=text,
            id=id,
            lang=lang,
            rtl=rtl,
            modifiedAt=modifiedAt,
            createdAt=createdAt,
            modifiedBy=modifiedBy,
            createdBy=createdBy,
            caseSensitive=caseSensitive,
            exactMatch=exactMatch,
            forbidden=forbidden,
            preferred=preferred,
            status=status,
            conceptId=conceptId,
            usage=usage,
            note=note,
            writable=writable,
            shortTranslation=shortTranslation,
            termType=termType,
            partOfSpeech=partOfSpeech,
            gender=gender,
            number=number,
            definition=definition,
            domain=domain,
            subDomains=subDomains,
            url=url,
            conceptNote=conceptNote,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.user_reference import UserReference
