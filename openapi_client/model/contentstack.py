# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class Contentstack(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "apiKey",
                    "authType",
                }
                
                class properties:
                    authType = schemas.StrSchema
                    region = schemas.StrSchema
                    nonLocalizableBlocksUids = schemas.StrSchema
                    targetLangsFieldId = schemas.StrSchema
                    apiKey = schemas.StrSchema
                    sourceLang = schemas.StrSchema
                    translateUrls = schemas.BoolSchema
                    translateTags = schemas.BoolSchema
                    managementToken = schemas.StrSchema
                    password = schemas.StrSchema
                    userName = schemas.StrSchema
                    stackWFObserved = schemas.StrSchema
                    stackWFUponImport = schemas.StrSchema
                    stackWFExportSource = schemas.StrSchema
                    stackWFExportTranslate = schemas.StrSchema
                    __annotations__ = {
                        "authType": authType,
                        "region": region,
                        "nonLocalizableBlocksUids": nonLocalizableBlocksUids,
                        "targetLangsFieldId": targetLangsFieldId,
                        "apiKey": apiKey,
                        "sourceLang": sourceLang,
                        "translateUrls": translateUrls,
                        "translateTags": translateTags,
                        "managementToken": managementToken,
                        "password": password,
                        "userName": userName,
                        "stackWFObserved": stackWFObserved,
                        "stackWFUponImport": stackWFUponImport,
                        "stackWFExportSource": stackWFExportSource,
                        "stackWFExportTranslate": stackWFExportTranslate,
                    }
            
            apiKey: MetaOapg.properties.apiKey
            authType: MetaOapg.properties.authType
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["authType"]) -> MetaOapg.properties.authType: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["region"]) -> MetaOapg.properties.region: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["nonLocalizableBlocksUids"]) -> MetaOapg.properties.nonLocalizableBlocksUids: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["targetLangsFieldId"]) -> MetaOapg.properties.targetLangsFieldId: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["apiKey"]) -> MetaOapg.properties.apiKey: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["sourceLang"]) -> MetaOapg.properties.sourceLang: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["translateUrls"]) -> MetaOapg.properties.translateUrls: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["translateTags"]) -> MetaOapg.properties.translateTags: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["managementToken"]) -> MetaOapg.properties.managementToken: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["password"]) -> MetaOapg.properties.password: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["userName"]) -> MetaOapg.properties.userName: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["stackWFObserved"]) -> MetaOapg.properties.stackWFObserved: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["stackWFUponImport"]) -> MetaOapg.properties.stackWFUponImport: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["stackWFExportSource"]) -> MetaOapg.properties.stackWFExportSource: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["stackWFExportTranslate"]) -> MetaOapg.properties.stackWFExportTranslate: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["authType", "region", "nonLocalizableBlocksUids", "targetLangsFieldId", "apiKey", "sourceLang", "translateUrls", "translateTags", "managementToken", "password", "userName", "stackWFObserved", "stackWFUponImport", "stackWFExportSource", "stackWFExportTranslate", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["authType"]) -> MetaOapg.properties.authType: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["region"]) -> typing.Union[MetaOapg.properties.region, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["nonLocalizableBlocksUids"]) -> typing.Union[MetaOapg.properties.nonLocalizableBlocksUids, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["targetLangsFieldId"]) -> typing.Union[MetaOapg.properties.targetLangsFieldId, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["apiKey"]) -> MetaOapg.properties.apiKey: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["sourceLang"]) -> typing.Union[MetaOapg.properties.sourceLang, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["translateUrls"]) -> typing.Union[MetaOapg.properties.translateUrls, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["translateTags"]) -> typing.Union[MetaOapg.properties.translateTags, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["managementToken"]) -> typing.Union[MetaOapg.properties.managementToken, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["password"]) -> typing.Union[MetaOapg.properties.password, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["userName"]) -> typing.Union[MetaOapg.properties.userName, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["stackWFObserved"]) -> typing.Union[MetaOapg.properties.stackWFObserved, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["stackWFUponImport"]) -> typing.Union[MetaOapg.properties.stackWFUponImport, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["stackWFExportSource"]) -> typing.Union[MetaOapg.properties.stackWFExportSource, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["stackWFExportTranslate"]) -> typing.Union[MetaOapg.properties.stackWFExportTranslate, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["authType", "region", "nonLocalizableBlocksUids", "targetLangsFieldId", "apiKey", "sourceLang", "translateUrls", "translateTags", "managementToken", "password", "userName", "stackWFObserved", "stackWFUponImport", "stackWFExportSource", "stackWFExportTranslate", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                apiKey: typing.Union[MetaOapg.properties.apiKey, str, ],
                authType: typing.Union[MetaOapg.properties.authType, str, ],
                region: typing.Union[MetaOapg.properties.region, str, schemas.Unset] = schemas.unset,
                nonLocalizableBlocksUids: typing.Union[MetaOapg.properties.nonLocalizableBlocksUids, str, schemas.Unset] = schemas.unset,
                targetLangsFieldId: typing.Union[MetaOapg.properties.targetLangsFieldId, str, schemas.Unset] = schemas.unset,
                sourceLang: typing.Union[MetaOapg.properties.sourceLang, str, schemas.Unset] = schemas.unset,
                translateUrls: typing.Union[MetaOapg.properties.translateUrls, bool, schemas.Unset] = schemas.unset,
                translateTags: typing.Union[MetaOapg.properties.translateTags, bool, schemas.Unset] = schemas.unset,
                managementToken: typing.Union[MetaOapg.properties.managementToken, str, schemas.Unset] = schemas.unset,
                password: typing.Union[MetaOapg.properties.password, str, schemas.Unset] = schemas.unset,
                userName: typing.Union[MetaOapg.properties.userName, str, schemas.Unset] = schemas.unset,
                stackWFObserved: typing.Union[MetaOapg.properties.stackWFObserved, str, schemas.Unset] = schemas.unset,
                stackWFUponImport: typing.Union[MetaOapg.properties.stackWFUponImport, str, schemas.Unset] = schemas.unset,
                stackWFExportSource: typing.Union[MetaOapg.properties.stackWFExportSource, str, schemas.Unset] = schemas.unset,
                stackWFExportTranslate: typing.Union[MetaOapg.properties.stackWFExportTranslate, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *_args,
                    apiKey=apiKey,
                    authType=authType,
                    region=region,
                    nonLocalizableBlocksUids=nonLocalizableBlocksUids,
                    targetLangsFieldId=targetLangsFieldId,
                    sourceLang=sourceLang,
                    translateUrls=translateUrls,
                    translateTags=translateTags,
                    managementToken=managementToken,
                    password=password,
                    userName=userName,
                    stackWFObserved=stackWFObserved,
                    stackWFUponImport=stackWFUponImport,
                    stackWFExportSource=stackWFExportSource,
                    stackWFExportTranslate=stackWFExportTranslate,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                AbstractConnectorDto,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Contentstack':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from phrasetms_client.model.abstract_connector_dto import AbstractConnectorDto
