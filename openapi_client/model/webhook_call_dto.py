# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class WebhookCallDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            uid = schemas.StrSchema
            parentUid = schemas.StrSchema
            eventUid = schemas.StrSchema
        
            @staticmethod
            def webhookSettings() -> typing.Type['UidReference']:
                return UidReference
            createdAt = schemas.DateTimeSchema
            url = schemas.StrSchema
            forced = schemas.BoolSchema
            lastForcedAt = schemas.DateTimeSchema
            body = schemas.StrSchema
            
            
            class triggerEvent(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "JOB_STATUS_CHANGED": "JOB_STATUS_CHANGED",
                        "JOB_CREATED": "JOB_CREATED",
                        "JOB_DELETED": "JOB_DELETED",
                        "JOB_ASSIGNED": "JOB_ASSIGNED",
                        "JOB_DUE_DATE_CHANGED": "JOB_DUE_DATE_CHANGED",
                        "JOB_UPDATED": "JOB_UPDATED",
                        "JOB_TARGET_UPDATED": "JOB_TARGET_UPDATED",
                        "JOB_EXPORTED": "JOB_EXPORTED",
                        "JOB_UNEXPORTED": "JOB_UNEXPORTED",
                        "PROJECT_CREATED": "PROJECT_CREATED",
                        "PROJECT_DELETED": "PROJECT_DELETED",
                        "PROJECT_STATUS_CHANGED": "PROJECT_STATUS_CHANGED",
                        "PROJECT_DUE_DATE_CHANGED": "PROJECT_DUE_DATE_CHANGED",
                        "SHARED_PROJECT_ASSIGNED": "SHARED_PROJECT_ASSIGNED",
                        "PROJECT_METADATA_UPDATED": "PROJECT_METADATA_UPDATED",
                        "PRE_TRANSLATION_FINISHED": "PRE_TRANSLATION_FINISHED",
                        "ANALYSIS_CREATED": "ANALYSIS_CREATED",
                        "CONTINUOUS_JOB_UPDATED": "CONTINUOUS_JOB_UPDATED",
                        "PROJECT_TEMPLATE_CREATED": "PROJECT_TEMPLATE_CREATED",
                        "PROJECT_TEMPLATE_UPDATED": "PROJECT_TEMPLATE_UPDATED",
                        "PROJECT_TEMPLATE_DELETED": "PROJECT_TEMPLATE_DELETED",
                    }
                
                @schemas.classproperty
                def JOB_STATUS_CHANGED(cls):
                    return cls("JOB_STATUS_CHANGED")
                
                @schemas.classproperty
                def JOB_CREATED(cls):
                    return cls("JOB_CREATED")
                
                @schemas.classproperty
                def JOB_DELETED(cls):
                    return cls("JOB_DELETED")
                
                @schemas.classproperty
                def JOB_ASSIGNED(cls):
                    return cls("JOB_ASSIGNED")
                
                @schemas.classproperty
                def JOB_DUE_DATE_CHANGED(cls):
                    return cls("JOB_DUE_DATE_CHANGED")
                
                @schemas.classproperty
                def JOB_UPDATED(cls):
                    return cls("JOB_UPDATED")
                
                @schemas.classproperty
                def JOB_TARGET_UPDATED(cls):
                    return cls("JOB_TARGET_UPDATED")
                
                @schemas.classproperty
                def JOB_EXPORTED(cls):
                    return cls("JOB_EXPORTED")
                
                @schemas.classproperty
                def JOB_UNEXPORTED(cls):
                    return cls("JOB_UNEXPORTED")
                
                @schemas.classproperty
                def PROJECT_CREATED(cls):
                    return cls("PROJECT_CREATED")
                
                @schemas.classproperty
                def PROJECT_DELETED(cls):
                    return cls("PROJECT_DELETED")
                
                @schemas.classproperty
                def PROJECT_STATUS_CHANGED(cls):
                    return cls("PROJECT_STATUS_CHANGED")
                
                @schemas.classproperty
                def PROJECT_DUE_DATE_CHANGED(cls):
                    return cls("PROJECT_DUE_DATE_CHANGED")
                
                @schemas.classproperty
                def SHARED_PROJECT_ASSIGNED(cls):
                    return cls("SHARED_PROJECT_ASSIGNED")
                
                @schemas.classproperty
                def PROJECT_METADATA_UPDATED(cls):
                    return cls("PROJECT_METADATA_UPDATED")
                
                @schemas.classproperty
                def PRE_TRANSLATION_FINISHED(cls):
                    return cls("PRE_TRANSLATION_FINISHED")
                
                @schemas.classproperty
                def ANALYSIS_CREATED(cls):
                    return cls("ANALYSIS_CREATED")
                
                @schemas.classproperty
                def CONTINUOUS_JOB_UPDATED(cls):
                    return cls("CONTINUOUS_JOB_UPDATED")
                
                @schemas.classproperty
                def PROJECT_TEMPLATE_CREATED(cls):
                    return cls("PROJECT_TEMPLATE_CREATED")
                
                @schemas.classproperty
                def PROJECT_TEMPLATE_UPDATED(cls):
                    return cls("PROJECT_TEMPLATE_UPDATED")
                
                @schemas.classproperty
                def PROJECT_TEMPLATE_DELETED(cls):
                    return cls("PROJECT_TEMPLATE_DELETED")
            retryAttempt = schemas.Int64Schema
            statusCode = schemas.Int64Schema
            errorMessage = schemas.StrSchema
            __annotations__ = {
                "uid": uid,
                "parentUid": parentUid,
                "eventUid": eventUid,
                "webhookSettings": webhookSettings,
                "createdAt": createdAt,
                "url": url,
                "forced": forced,
                "lastForcedAt": lastForcedAt,
                "body": body,
                "triggerEvent": triggerEvent,
                "retryAttempt": retryAttempt,
                "statusCode": statusCode,
                "errorMessage": errorMessage,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uid"]) -> MetaOapg.properties.uid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parentUid"]) -> MetaOapg.properties.parentUid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eventUid"]) -> MetaOapg.properties.eventUid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["webhookSettings"]) -> 'UidReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["forced"]) -> MetaOapg.properties.forced: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastForcedAt"]) -> MetaOapg.properties.lastForcedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["body"]) -> MetaOapg.properties.body: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["triggerEvent"]) -> MetaOapg.properties.triggerEvent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["retryAttempt"]) -> MetaOapg.properties.retryAttempt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusCode"]) -> MetaOapg.properties.statusCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errorMessage"]) -> MetaOapg.properties.errorMessage: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["uid", "parentUid", "eventUid", "webhookSettings", "createdAt", "url", "forced", "lastForcedAt", "body", "triggerEvent", "retryAttempt", "statusCode", "errorMessage", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uid"]) -> typing.Union[MetaOapg.properties.uid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parentUid"]) -> typing.Union[MetaOapg.properties.parentUid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eventUid"]) -> typing.Union[MetaOapg.properties.eventUid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["webhookSettings"]) -> typing.Union['UidReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> typing.Union[MetaOapg.properties.createdAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["forced"]) -> typing.Union[MetaOapg.properties.forced, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastForcedAt"]) -> typing.Union[MetaOapg.properties.lastForcedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["body"]) -> typing.Union[MetaOapg.properties.body, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["triggerEvent"]) -> typing.Union[MetaOapg.properties.triggerEvent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["retryAttempt"]) -> typing.Union[MetaOapg.properties.retryAttempt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusCode"]) -> typing.Union[MetaOapg.properties.statusCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errorMessage"]) -> typing.Union[MetaOapg.properties.errorMessage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["uid", "parentUid", "eventUid", "webhookSettings", "createdAt", "url", "forced", "lastForcedAt", "body", "triggerEvent", "retryAttempt", "statusCode", "errorMessage", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        uid: typing.Union[MetaOapg.properties.uid, str, schemas.Unset] = schemas.unset,
        parentUid: typing.Union[MetaOapg.properties.parentUid, str, schemas.Unset] = schemas.unset,
        eventUid: typing.Union[MetaOapg.properties.eventUid, str, schemas.Unset] = schemas.unset,
        webhookSettings: typing.Union['UidReference', schemas.Unset] = schemas.unset,
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, datetime, schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        forced: typing.Union[MetaOapg.properties.forced, bool, schemas.Unset] = schemas.unset,
        lastForcedAt: typing.Union[MetaOapg.properties.lastForcedAt, str, datetime, schemas.Unset] = schemas.unset,
        body: typing.Union[MetaOapg.properties.body, str, schemas.Unset] = schemas.unset,
        triggerEvent: typing.Union[MetaOapg.properties.triggerEvent, str, schemas.Unset] = schemas.unset,
        retryAttempt: typing.Union[MetaOapg.properties.retryAttempt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        statusCode: typing.Union[MetaOapg.properties.statusCode, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        errorMessage: typing.Union[MetaOapg.properties.errorMessage, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WebhookCallDto':
        return super().__new__(
            cls,
            *_args,
            uid=uid,
            parentUid=parentUid,
            eventUid=eventUid,
            webhookSettings=webhookSettings,
            createdAt=createdAt,
            url=url,
            forced=forced,
            lastForcedAt=lastForcedAt,
            body=body,
            triggerEvent=triggerEvent,
            retryAttempt=retryAttempt,
            statusCode=statusCode,
            errorMessage=errorMessage,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.uid_reference import UidReference
