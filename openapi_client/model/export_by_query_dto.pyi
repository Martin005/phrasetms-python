# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class ExportByQueryDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "queryLangs",
            "exportTargetLangs",
            "queries",
        }
        
        class properties:
            
            
            class exportTargetLangs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'exportTargetLangs':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class queries(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'queries':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class queryLangs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'queryLangs':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            createdAtMin = schemas.DateTimeSchema
            createdAtMax = schemas.DateTimeSchema
            modifiedAtMin = schemas.DateTimeSchema
            modifiedAtMax = schemas.DateTimeSchema
        
            @staticmethod
            def createdBy() -> typing.Type['IdReference']:
                return IdReference
        
            @staticmethod
            def modifiedBy() -> typing.Type['IdReference']:
                return IdReference
            filename = schemas.StrSchema
        
            @staticmethod
            def project() -> typing.Type['UidReference']:
                return UidReference
            callbackUrl = schemas.StrSchema
            __annotations__ = {
                "exportTargetLangs": exportTargetLangs,
                "queries": queries,
                "queryLangs": queryLangs,
                "createdAtMin": createdAtMin,
                "createdAtMax": createdAtMax,
                "modifiedAtMin": modifiedAtMin,
                "modifiedAtMax": modifiedAtMax,
                "createdBy": createdBy,
                "modifiedBy": modifiedBy,
                "filename": filename,
                "project": project,
                "callbackUrl": callbackUrl,
            }
    
    queryLangs: MetaOapg.properties.queryLangs
    exportTargetLangs: MetaOapg.properties.exportTargetLangs
    queries: MetaOapg.properties.queries
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exportTargetLangs"]) -> MetaOapg.properties.exportTargetLangs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["queries"]) -> MetaOapg.properties.queries: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["queryLangs"]) -> MetaOapg.properties.queryLangs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAtMin"]) -> MetaOapg.properties.createdAtMin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAtMax"]) -> MetaOapg.properties.createdAtMax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modifiedAtMin"]) -> MetaOapg.properties.modifiedAtMin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modifiedAtMax"]) -> MetaOapg.properties.modifiedAtMax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdBy"]) -> 'IdReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modifiedBy"]) -> 'IdReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filename"]) -> MetaOapg.properties.filename: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project"]) -> 'UidReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["callbackUrl"]) -> MetaOapg.properties.callbackUrl: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["exportTargetLangs", "queries", "queryLangs", "createdAtMin", "createdAtMax", "modifiedAtMin", "modifiedAtMax", "createdBy", "modifiedBy", "filename", "project", "callbackUrl", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exportTargetLangs"]) -> MetaOapg.properties.exportTargetLangs: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["queries"]) -> MetaOapg.properties.queries: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["queryLangs"]) -> MetaOapg.properties.queryLangs: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAtMin"]) -> typing.Union[MetaOapg.properties.createdAtMin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAtMax"]) -> typing.Union[MetaOapg.properties.createdAtMax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modifiedAtMin"]) -> typing.Union[MetaOapg.properties.modifiedAtMin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modifiedAtMax"]) -> typing.Union[MetaOapg.properties.modifiedAtMax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdBy"]) -> typing.Union['IdReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modifiedBy"]) -> typing.Union['IdReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filename"]) -> typing.Union[MetaOapg.properties.filename, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project"]) -> typing.Union['UidReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["callbackUrl"]) -> typing.Union[MetaOapg.properties.callbackUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["exportTargetLangs", "queries", "queryLangs", "createdAtMin", "createdAtMax", "modifiedAtMin", "modifiedAtMax", "createdBy", "modifiedBy", "filename", "project", "callbackUrl", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        queryLangs: typing.Union[MetaOapg.properties.queryLangs, list, tuple, ],
        exportTargetLangs: typing.Union[MetaOapg.properties.exportTargetLangs, list, tuple, ],
        queries: typing.Union[MetaOapg.properties.queries, list, tuple, ],
        createdAtMin: typing.Union[MetaOapg.properties.createdAtMin, str, datetime, schemas.Unset] = schemas.unset,
        createdAtMax: typing.Union[MetaOapg.properties.createdAtMax, str, datetime, schemas.Unset] = schemas.unset,
        modifiedAtMin: typing.Union[MetaOapg.properties.modifiedAtMin, str, datetime, schemas.Unset] = schemas.unset,
        modifiedAtMax: typing.Union[MetaOapg.properties.modifiedAtMax, str, datetime, schemas.Unset] = schemas.unset,
        createdBy: typing.Union['IdReference', schemas.Unset] = schemas.unset,
        modifiedBy: typing.Union['IdReference', schemas.Unset] = schemas.unset,
        filename: typing.Union[MetaOapg.properties.filename, str, schemas.Unset] = schemas.unset,
        project: typing.Union['UidReference', schemas.Unset] = schemas.unset,
        callbackUrl: typing.Union[MetaOapg.properties.callbackUrl, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ExportByQueryDto':
        return super().__new__(
            cls,
            *_args,
            queryLangs=queryLangs,
            exportTargetLangs=exportTargetLangs,
            queries=queries,
            createdAtMin=createdAtMin,
            createdAtMax=createdAtMax,
            modifiedAtMin=modifiedAtMin,
            modifiedAtMax=modifiedAtMax,
            createdBy=createdBy,
            modifiedBy=modifiedBy,
            filename=filename,
            project=project,
            callbackUrl=callbackUrl,
            _configuration=_configuration,
            **kwargs,
        )

from phrasetms_client.model.id_reference import IdReference
from phrasetms_client.model.uid_reference import UidReference
