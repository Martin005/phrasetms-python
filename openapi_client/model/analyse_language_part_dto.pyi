# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class AnalyseLanguagePartDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            sourceLang = schemas.StrSchema
            targetLang = schemas.StrSchema
        
            @staticmethod
            def data() -> typing.Type['DataDtoV1']:
                return DataDtoV1
        
            @staticmethod
            def discountedData() -> typing.Type['DataDtoV1']:
                return DataDtoV1
            
            
            class jobs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AnalyseJobReference']:
                        return AnalyseJobReference
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['AnalyseJobReference'], typing.List['AnalyseJobReference']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'jobs':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AnalyseJobReference':
                    return super().__getitem__(i)
            __annotations__ = {
                "id": id,
                "sourceLang": sourceLang,
                "targetLang": targetLang,
                "data": data,
                "discountedData": discountedData,
                "jobs": jobs,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceLang"]) -> MetaOapg.properties.sourceLang: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetLang"]) -> MetaOapg.properties.targetLang: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> 'DataDtoV1': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["discountedData"]) -> 'DataDtoV1': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobs"]) -> MetaOapg.properties.jobs: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "sourceLang", "targetLang", "data", "discountedData", "jobs", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceLang"]) -> typing.Union[MetaOapg.properties.sourceLang, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetLang"]) -> typing.Union[MetaOapg.properties.targetLang, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union['DataDtoV1', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["discountedData"]) -> typing.Union['DataDtoV1', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobs"]) -> typing.Union[MetaOapg.properties.jobs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "sourceLang", "targetLang", "data", "discountedData", "jobs", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        sourceLang: typing.Union[MetaOapg.properties.sourceLang, str, schemas.Unset] = schemas.unset,
        targetLang: typing.Union[MetaOapg.properties.targetLang, str, schemas.Unset] = schemas.unset,
        data: typing.Union['DataDtoV1', schemas.Unset] = schemas.unset,
        discountedData: typing.Union['DataDtoV1', schemas.Unset] = schemas.unset,
        jobs: typing.Union[MetaOapg.properties.jobs, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AnalyseLanguagePartDto':
        return super().__new__(
            cls,
            *_args,
            id=id,
            sourceLang=sourceLang,
            targetLang=targetLang,
            data=data,
            discountedData=discountedData,
            jobs=jobs,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.analyse_job_reference import AnalyseJobReference
from openapi_client.model.data_dto_v1 import DataDtoV1
