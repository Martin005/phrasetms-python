# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class SearchTMRequestDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "segment",
            "targetLangs",
        }
        
        class properties:
            segment = schemas.StrSchema
            
            
            class targetLangs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    max_items = 2147483647
                    min_items = 1
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'targetLangs':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class workflowLevel(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 15
                    inclusive_minimum = 1
            
            
            class scoreThreshold(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 1.01
                    inclusive_minimum = 0
            previousSegment = schemas.StrSchema
            nextSegment = schemas.StrSchema
            contextKey = schemas.StrSchema
            
            
            class maxSegments(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 5
                    inclusive_minimum = 0
            
            
            class maxSubSegments(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 5
                    inclusive_minimum = 0
            
            
            class tagMetadata(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TagMetadataDto']:
                        return TagMetadataDto
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['TagMetadataDto'], typing.List['TagMetadataDto']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tagMetadata':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TagMetadataDto':
                    return super().__getitem__(i)
            __annotations__ = {
                "segment": segment,
                "targetLangs": targetLangs,
                "workflowLevel": workflowLevel,
                "scoreThreshold": scoreThreshold,
                "previousSegment": previousSegment,
                "nextSegment": nextSegment,
                "contextKey": contextKey,
                "maxSegments": maxSegments,
                "maxSubSegments": maxSubSegments,
                "tagMetadata": tagMetadata,
            }
    
    segment: MetaOapg.properties.segment
    targetLangs: MetaOapg.properties.targetLangs
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["segment"]) -> MetaOapg.properties.segment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetLangs"]) -> MetaOapg.properties.targetLangs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowLevel"]) -> MetaOapg.properties.workflowLevel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scoreThreshold"]) -> MetaOapg.properties.scoreThreshold: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["previousSegment"]) -> MetaOapg.properties.previousSegment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nextSegment"]) -> MetaOapg.properties.nextSegment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contextKey"]) -> MetaOapg.properties.contextKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxSegments"]) -> MetaOapg.properties.maxSegments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxSubSegments"]) -> MetaOapg.properties.maxSubSegments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tagMetadata"]) -> MetaOapg.properties.tagMetadata: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["segment", "targetLangs", "workflowLevel", "scoreThreshold", "previousSegment", "nextSegment", "contextKey", "maxSegments", "maxSubSegments", "tagMetadata", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["segment"]) -> MetaOapg.properties.segment: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetLangs"]) -> MetaOapg.properties.targetLangs: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowLevel"]) -> typing.Union[MetaOapg.properties.workflowLevel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scoreThreshold"]) -> typing.Union[MetaOapg.properties.scoreThreshold, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["previousSegment"]) -> typing.Union[MetaOapg.properties.previousSegment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nextSegment"]) -> typing.Union[MetaOapg.properties.nextSegment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contextKey"]) -> typing.Union[MetaOapg.properties.contextKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxSegments"]) -> typing.Union[MetaOapg.properties.maxSegments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxSubSegments"]) -> typing.Union[MetaOapg.properties.maxSubSegments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tagMetadata"]) -> typing.Union[MetaOapg.properties.tagMetadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["segment", "targetLangs", "workflowLevel", "scoreThreshold", "previousSegment", "nextSegment", "contextKey", "maxSegments", "maxSubSegments", "tagMetadata", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        segment: typing.Union[MetaOapg.properties.segment, str, ],
        targetLangs: typing.Union[MetaOapg.properties.targetLangs, list, tuple, ],
        workflowLevel: typing.Union[MetaOapg.properties.workflowLevel, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        scoreThreshold: typing.Union[MetaOapg.properties.scoreThreshold, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        previousSegment: typing.Union[MetaOapg.properties.previousSegment, str, schemas.Unset] = schemas.unset,
        nextSegment: typing.Union[MetaOapg.properties.nextSegment, str, schemas.Unset] = schemas.unset,
        contextKey: typing.Union[MetaOapg.properties.contextKey, str, schemas.Unset] = schemas.unset,
        maxSegments: typing.Union[MetaOapg.properties.maxSegments, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        maxSubSegments: typing.Union[MetaOapg.properties.maxSubSegments, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tagMetadata: typing.Union[MetaOapg.properties.tagMetadata, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SearchTMRequestDto':
        return super().__new__(
            cls,
            *_args,
            segment=segment,
            targetLangs=targetLangs,
            workflowLevel=workflowLevel,
            scoreThreshold=scoreThreshold,
            previousSegment=previousSegment,
            nextSegment=nextSegment,
            contextKey=contextKey,
            maxSegments=maxSegments,
            maxSubSegments=maxSubSegments,
            tagMetadata=tagMetadata,
            _configuration=_configuration,
            **kwargs,
        )

from phrasetms_client.model.tag_metadata_dto import TagMetadataDto
