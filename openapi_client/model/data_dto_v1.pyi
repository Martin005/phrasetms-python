# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class DataDtoV1(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            available = schemas.BoolSchema
        
            @staticmethod
            def all() -> typing.Type['CountsDto']:
                return CountsDto
        
            @staticmethod
            def repetitions() -> typing.Type['CountsDto']:
                return CountsDto
        
            @staticmethod
            def transMemoryMatches() -> typing.Type['MatchCounts101Dto']:
                return MatchCounts101Dto
        
            @staticmethod
            def machineTranslationMatches() -> typing.Type['MatchCountsDto']:
                return MatchCountsDto
        
            @staticmethod
            def nonTranslatablesMatches() -> typing.Type['MatchCountsNTDtoV1']:
                return MatchCountsNTDtoV1
        
            @staticmethod
            def internalFuzzyMatches() -> typing.Type['MatchCountsDto']:
                return MatchCountsDto
            __annotations__ = {
                "available": available,
                "all": all,
                "repetitions": repetitions,
                "transMemoryMatches": transMemoryMatches,
                "machineTranslationMatches": machineTranslationMatches,
                "nonTranslatablesMatches": nonTranslatablesMatches,
                "internalFuzzyMatches": internalFuzzyMatches,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["available"]) -> MetaOapg.properties.available: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["all"]) -> 'CountsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["repetitions"]) -> 'CountsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transMemoryMatches"]) -> 'MatchCounts101Dto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["machineTranslationMatches"]) -> 'MatchCountsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nonTranslatablesMatches"]) -> 'MatchCountsNTDtoV1': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["internalFuzzyMatches"]) -> 'MatchCountsDto': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["available", "all", "repetitions", "transMemoryMatches", "machineTranslationMatches", "nonTranslatablesMatches", "internalFuzzyMatches", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["available"]) -> typing.Union[MetaOapg.properties.available, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["all"]) -> typing.Union['CountsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["repetitions"]) -> typing.Union['CountsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transMemoryMatches"]) -> typing.Union['MatchCounts101Dto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["machineTranslationMatches"]) -> typing.Union['MatchCountsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nonTranslatablesMatches"]) -> typing.Union['MatchCountsNTDtoV1', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["internalFuzzyMatches"]) -> typing.Union['MatchCountsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["available", "all", "repetitions", "transMemoryMatches", "machineTranslationMatches", "nonTranslatablesMatches", "internalFuzzyMatches", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        available: typing.Union[MetaOapg.properties.available, bool, schemas.Unset] = schemas.unset,
        all: typing.Union['CountsDto', schemas.Unset] = schemas.unset,
        repetitions: typing.Union['CountsDto', schemas.Unset] = schemas.unset,
        transMemoryMatches: typing.Union['MatchCounts101Dto', schemas.Unset] = schemas.unset,
        machineTranslationMatches: typing.Union['MatchCountsDto', schemas.Unset] = schemas.unset,
        nonTranslatablesMatches: typing.Union['MatchCountsNTDtoV1', schemas.Unset] = schemas.unset,
        internalFuzzyMatches: typing.Union['MatchCountsDto', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DataDtoV1':
        return super().__new__(
            cls,
            *_args,
            available=available,
            all=all,
            repetitions=repetitions,
            transMemoryMatches=transMemoryMatches,
            machineTranslationMatches=machineTranslationMatches,
            nonTranslatablesMatches=nonTranslatablesMatches,
            internalFuzzyMatches=internalFuzzyMatches,
            _configuration=_configuration,
            **kwargs,
        )

from phrasetms_client.model.counts_dto import CountsDto
from phrasetms_client.model.match_counts101_dto import MatchCounts101Dto
from phrasetms_client.model.match_counts_dto import MatchCountsDto
from phrasetms_client.model.match_counts_nt_dto_v1 import MatchCountsNTDtoV1
