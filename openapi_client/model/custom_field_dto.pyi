# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class CustomFieldDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            uid = schemas.StrSchema
            name = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def MULTI_SELECT(cls):
                    return cls("MULTI_SELECT")
                
                @schemas.classproperty
                def SINGLE_SELECT(cls):
                    return cls("SINGLE_SELECT")
                
                @schemas.classproperty
                def STRING(cls):
                    return cls("STRING")
                
                @schemas.classproperty
                def NUMBER(cls):
                    return cls("NUMBER")
                
                @schemas.classproperty
                def URL(cls):
                    return cls("URL")
                
                @schemas.classproperty
                def DATE(cls):
                    return cls("DATE")
            
            
            class allowedEntities(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def PROJECT(cls):
                            return cls("PROJECT")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'allowedEntities':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def options() -> typing.Type['CustomFieldOptionsTruncatedDto']:
                return CustomFieldOptionsTruncatedDto
            createdAt = schemas.DateTimeSchema
        
            @staticmethod
            def createdBy() -> typing.Type['UserReference']:
                return UserReference
            lastModified = schemas.DateTimeSchema
        
            @staticmethod
            def lastModifiedBy() -> typing.Type['UserReference']:
                return UserReference
            requiredFrom = schemas.DateTimeSchema
            required = schemas.BoolSchema
            description = schemas.StrSchema
            __annotations__ = {
                "uid": uid,
                "name": name,
                "type": type,
                "allowedEntities": allowedEntities,
                "options": options,
                "createdAt": createdAt,
                "createdBy": createdBy,
                "lastModified": lastModified,
                "lastModifiedBy": lastModifiedBy,
                "requiredFrom": requiredFrom,
                "required": required,
                "description": description,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uid"]) -> MetaOapg.properties.uid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowedEntities"]) -> MetaOapg.properties.allowedEntities: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["options"]) -> 'CustomFieldOptionsTruncatedDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdBy"]) -> 'UserReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastModified"]) -> MetaOapg.properties.lastModified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastModifiedBy"]) -> 'UserReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requiredFrom"]) -> MetaOapg.properties.requiredFrom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["required"]) -> MetaOapg.properties.required: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["uid", "name", "type", "allowedEntities", "options", "createdAt", "createdBy", "lastModified", "lastModifiedBy", "requiredFrom", "required", "description", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uid"]) -> typing.Union[MetaOapg.properties.uid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowedEntities"]) -> typing.Union[MetaOapg.properties.allowedEntities, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["options"]) -> typing.Union['CustomFieldOptionsTruncatedDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> typing.Union[MetaOapg.properties.createdAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdBy"]) -> typing.Union['UserReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastModified"]) -> typing.Union[MetaOapg.properties.lastModified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastModifiedBy"]) -> typing.Union['UserReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requiredFrom"]) -> typing.Union[MetaOapg.properties.requiredFrom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["required"]) -> typing.Union[MetaOapg.properties.required, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["uid", "name", "type", "allowedEntities", "options", "createdAt", "createdBy", "lastModified", "lastModifiedBy", "requiredFrom", "required", "description", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        uid: typing.Union[MetaOapg.properties.uid, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        allowedEntities: typing.Union[MetaOapg.properties.allowedEntities, list, tuple, schemas.Unset] = schemas.unset,
        options: typing.Union['CustomFieldOptionsTruncatedDto', schemas.Unset] = schemas.unset,
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, datetime, schemas.Unset] = schemas.unset,
        createdBy: typing.Union['UserReference', schemas.Unset] = schemas.unset,
        lastModified: typing.Union[MetaOapg.properties.lastModified, str, datetime, schemas.Unset] = schemas.unset,
        lastModifiedBy: typing.Union['UserReference', schemas.Unset] = schemas.unset,
        requiredFrom: typing.Union[MetaOapg.properties.requiredFrom, str, datetime, schemas.Unset] = schemas.unset,
        required: typing.Union[MetaOapg.properties.required, bool, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CustomFieldDto':
        return super().__new__(
            cls,
            *_args,
            uid=uid,
            name=name,
            type=type,
            allowedEntities=allowedEntities,
            options=options,
            createdAt=createdAt,
            createdBy=createdBy,
            lastModified=lastModified,
            lastModifiedBy=lastModifiedBy,
            requiredFrom=requiredFrom,
            required=required,
            description=description,
            _configuration=_configuration,
            **kwargs,
        )

from phrasetms_client.model.custom_field_options_truncated_dto import CustomFieldOptionsTruncatedDto
from phrasetms_client.model.user_reference import UserReference
