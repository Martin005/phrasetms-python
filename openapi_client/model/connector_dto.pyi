# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class ConnectorDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            name = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def DROPBOX(cls):
                    return cls("DROPBOX")
                
                @schemas.classproperty
                def GOOGLE(cls):
                    return cls("GOOGLE")
                
                @schemas.classproperty
                def FTP(cls):
                    return cls("FTP")
                
                @schemas.classproperty
                def WORDPRESS(cls):
                    return cls("WORDPRESS")
                
                @schemas.classproperty
                def GITHUB(cls):
                    return cls("GITHUB")
                
                @schemas.classproperty
                def SFTP(cls):
                    return cls("SFTP")
                
                @schemas.classproperty
                def DRUPAL(cls):
                    return cls("DRUPAL")
                
                @schemas.classproperty
                def BOX(cls):
                    return cls("BOX")
                
                @schemas.classproperty
                def GIT(cls):
                    return cls("GIT")
                
                @schemas.classproperty
                def ZENDESK(cls):
                    return cls("ZENDESK")
                
                @schemas.classproperty
                def ONEDRIVE(cls):
                    return cls("ONEDRIVE")
                
                @schemas.classproperty
                def GITLAB(cls):
                    return cls("GITLAB")
                
                @schemas.classproperty
                def MARKETO(cls):
                    return cls("MARKETO")
                
                @schemas.classproperty
                def HUBSPOT(cls):
                    return cls("HUBSPOT")
                
                @schemas.classproperty
                def HELPSCOUT(cls):
                    return cls("HELPSCOUT")
                
                @schemas.classproperty
                def SALESFORCE(cls):
                    return cls("SALESFORCE")
                
                @schemas.classproperty
                def BITBUCKET(cls):
                    return cls("BITBUCKET")
                
                @schemas.classproperty
                def BITBUCKETSERVER(cls):
                    return cls("BITBUCKETSERVER")
                
                @schemas.classproperty
                def BRAZE(cls):
                    return cls("BRAZE")
                
                @schemas.classproperty
                def SHAREPOINT(cls):
                    return cls("SHAREPOINT")
                
                @schemas.classproperty
                def AZURE(cls):
                    return cls("AZURE")
                
                @schemas.classproperty
                def SITECORE(cls):
                    return cls("SITECORE")
                
                @schemas.classproperty
                def KENTICO(cls):
                    return cls("KENTICO")
                
                @schemas.classproperty
                def KENTICO_KONTENT(cls):
                    return cls("KENTICO_KONTENT")
                
                @schemas.classproperty
                def MAGENTO(cls):
                    return cls("MAGENTO")
                
                @schemas.classproperty
                def CONTENTFULENTRYLEVEL(cls):
                    return cls("CONTENTFULENTRYLEVEL")
                
                @schemas.classproperty
                def CONTENTFUL(cls):
                    return cls("CONTENTFUL")
                
                @schemas.classproperty
                def CONTENTSTACK(cls):
                    return cls("CONTENTSTACK")
                
                @schemas.classproperty
                def JOOMLA(cls):
                    return cls("JOOMLA")
                
                @schemas.classproperty
                def CONFLUENCE(cls):
                    return cls("CONFLUENCE")
                
                @schemas.classproperty
                def TRIDION(cls):
                    return cls("TRIDION")
                
                @schemas.classproperty
                def TYPO3(cls):
                    return cls("TYPO3")
                
                @schemas.classproperty
                def AEM_PLUGIN(cls):
                    return cls("AEM_PLUGIN")
                
                @schemas.classproperty
                def DRUPAL_PLUGIN(cls):
                    return cls("DRUPAL_PLUGIN")
                
                @schemas.classproperty
                def AMAZON_S3(cls):
                    return cls("AMAZON_S3")
                
                @schemas.classproperty
                def PARDOT(cls):
                    return cls("PARDOT")
                
                @schemas.classproperty
                def PHRASE(cls):
                    return cls("PHRASE")
        
            @staticmethod
            def organization() -> typing.Type['NameDto']:
                return NameDto
        
            @staticmethod
            def createdBy() -> typing.Type['NameDto']:
                return NameDto
            createdAt = schemas.DateTimeSchema
            localToken = schemas.StrSchema
            
            
            class automatedProjectSettings(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AutomatedProjectSettingsDto']:
                        return AutomatedProjectSettingsDto
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['AutomatedProjectSettingsDto'], typing.List['AutomatedProjectSettingsDto']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'automatedProjectSettings':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AutomatedProjectSettingsDto':
                    return super().__getitem__(i)
            __annotations__ = {
                "id": id,
                "name": name,
                "type": type,
                "organization": organization,
                "createdBy": createdBy,
                "createdAt": createdAt,
                "localToken": localToken,
                "automatedProjectSettings": automatedProjectSettings,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organization"]) -> 'NameDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdBy"]) -> 'NameDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["localToken"]) -> MetaOapg.properties.localToken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["automatedProjectSettings"]) -> MetaOapg.properties.automatedProjectSettings: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "type", "organization", "createdBy", "createdAt", "localToken", "automatedProjectSettings", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organization"]) -> typing.Union['NameDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdBy"]) -> typing.Union['NameDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> typing.Union[MetaOapg.properties.createdAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["localToken"]) -> typing.Union[MetaOapg.properties.localToken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["automatedProjectSettings"]) -> typing.Union[MetaOapg.properties.automatedProjectSettings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "type", "organization", "createdBy", "createdAt", "localToken", "automatedProjectSettings", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        organization: typing.Union['NameDto', schemas.Unset] = schemas.unset,
        createdBy: typing.Union['NameDto', schemas.Unset] = schemas.unset,
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, datetime, schemas.Unset] = schemas.unset,
        localToken: typing.Union[MetaOapg.properties.localToken, str, schemas.Unset] = schemas.unset,
        automatedProjectSettings: typing.Union[MetaOapg.properties.automatedProjectSettings, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ConnectorDto':
        return super().__new__(
            cls,
            *_args,
            id=id,
            name=name,
            type=type,
            organization=organization,
            createdBy=createdBy,
            createdAt=createdAt,
            localToken=localToken,
            automatedProjectSettings=automatedProjectSettings,
            _configuration=_configuration,
            **kwargs,
        )

from phrasetms_client.model.automated_project_settings_dto import AutomatedProjectSettingsDto
from phrasetms_client.model.name_dto import NameDto
