# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class SearchTMSegmentDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            text = schemas.StrSchema
            lang = schemas.StrSchema
            rtl = schemas.BoolSchema
            modifiedAt = schemas.Int64Schema
            createdAt = schemas.Int64Schema
        
            @staticmethod
            def modifiedBy() -> typing.Type['UserReference']:
                return UserReference
        
            @staticmethod
            def createdBy() -> typing.Type['UserReference']:
                return UserReference
            filename = schemas.StrSchema
        
            @staticmethod
            def project() -> typing.Type['SearchTMProjectDto']:
                return SearchTMProjectDto
        
            @staticmethod
            def client() -> typing.Type['SearchTMClientDto']:
                return SearchTMClientDto
        
            @staticmethod
            def domain() -> typing.Type['SearchTMDomainDto']:
                return SearchTMDomainDto
        
            @staticmethod
            def subDomain() -> typing.Type['SearchTMSubDomainDto']:
                return SearchTMSubDomainDto
            
            
            class tagMetadata(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TagMetadata']:
                        return TagMetadata
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['TagMetadata'], typing.List['TagMetadata']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tagMetadata':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TagMetadata':
                    return super().__getitem__(i)
            previousSegment = schemas.StrSchema
            nextSegment = schemas.StrSchema
            key = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "text": text,
                "lang": lang,
                "rtl": rtl,
                "modifiedAt": modifiedAt,
                "createdAt": createdAt,
                "modifiedBy": modifiedBy,
                "createdBy": createdBy,
                "filename": filename,
                "project": project,
                "client": client,
                "domain": domain,
                "subDomain": subDomain,
                "tagMetadata": tagMetadata,
                "previousSegment": previousSegment,
                "nextSegment": nextSegment,
                "key": key,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lang"]) -> MetaOapg.properties.lang: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rtl"]) -> MetaOapg.properties.rtl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modifiedAt"]) -> MetaOapg.properties.modifiedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modifiedBy"]) -> 'UserReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdBy"]) -> 'UserReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filename"]) -> MetaOapg.properties.filename: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project"]) -> 'SearchTMProjectDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client"]) -> 'SearchTMClientDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain"]) -> 'SearchTMDomainDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subDomain"]) -> 'SearchTMSubDomainDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tagMetadata"]) -> MetaOapg.properties.tagMetadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["previousSegment"]) -> MetaOapg.properties.previousSegment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nextSegment"]) -> MetaOapg.properties.nextSegment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "text", "lang", "rtl", "modifiedAt", "createdAt", "modifiedBy", "createdBy", "filename", "project", "client", "domain", "subDomain", "tagMetadata", "previousSegment", "nextSegment", "key", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> typing.Union[MetaOapg.properties.text, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lang"]) -> typing.Union[MetaOapg.properties.lang, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rtl"]) -> typing.Union[MetaOapg.properties.rtl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modifiedAt"]) -> typing.Union[MetaOapg.properties.modifiedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> typing.Union[MetaOapg.properties.createdAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modifiedBy"]) -> typing.Union['UserReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdBy"]) -> typing.Union['UserReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filename"]) -> typing.Union[MetaOapg.properties.filename, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project"]) -> typing.Union['SearchTMProjectDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client"]) -> typing.Union['SearchTMClientDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domain"]) -> typing.Union['SearchTMDomainDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subDomain"]) -> typing.Union['SearchTMSubDomainDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tagMetadata"]) -> typing.Union[MetaOapg.properties.tagMetadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["previousSegment"]) -> typing.Union[MetaOapg.properties.previousSegment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nextSegment"]) -> typing.Union[MetaOapg.properties.nextSegment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key"]) -> typing.Union[MetaOapg.properties.key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "text", "lang", "rtl", "modifiedAt", "createdAt", "modifiedBy", "createdBy", "filename", "project", "client", "domain", "subDomain", "tagMetadata", "previousSegment", "nextSegment", "key", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        text: typing.Union[MetaOapg.properties.text, str, schemas.Unset] = schemas.unset,
        lang: typing.Union[MetaOapg.properties.lang, str, schemas.Unset] = schemas.unset,
        rtl: typing.Union[MetaOapg.properties.rtl, bool, schemas.Unset] = schemas.unset,
        modifiedAt: typing.Union[MetaOapg.properties.modifiedAt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        createdAt: typing.Union[MetaOapg.properties.createdAt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        modifiedBy: typing.Union['UserReference', schemas.Unset] = schemas.unset,
        createdBy: typing.Union['UserReference', schemas.Unset] = schemas.unset,
        filename: typing.Union[MetaOapg.properties.filename, str, schemas.Unset] = schemas.unset,
        project: typing.Union['SearchTMProjectDto', schemas.Unset] = schemas.unset,
        client: typing.Union['SearchTMClientDto', schemas.Unset] = schemas.unset,
        domain: typing.Union['SearchTMDomainDto', schemas.Unset] = schemas.unset,
        subDomain: typing.Union['SearchTMSubDomainDto', schemas.Unset] = schemas.unset,
        tagMetadata: typing.Union[MetaOapg.properties.tagMetadata, list, tuple, schemas.Unset] = schemas.unset,
        previousSegment: typing.Union[MetaOapg.properties.previousSegment, str, schemas.Unset] = schemas.unset,
        nextSegment: typing.Union[MetaOapg.properties.nextSegment, str, schemas.Unset] = schemas.unset,
        key: typing.Union[MetaOapg.properties.key, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SearchTMSegmentDto':
        return super().__new__(
            cls,
            *_args,
            id=id,
            text=text,
            lang=lang,
            rtl=rtl,
            modifiedAt=modifiedAt,
            createdAt=createdAt,
            modifiedBy=modifiedBy,
            createdBy=createdBy,
            filename=filename,
            project=project,
            client=client,
            domain=domain,
            subDomain=subDomain,
            tagMetadata=tagMetadata,
            previousSegment=previousSegment,
            nextSegment=nextSegment,
            key=key,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.search_tm_client_dto import SearchTMClientDto
from openapi_client.model.search_tm_domain_dto import SearchTMDomainDto
from openapi_client.model.search_tm_project_dto import SearchTMProjectDto
from openapi_client.model.search_tm_sub_domain_dto import SearchTMSubDomainDto
from openapi_client.model.tag_metadata import TagMetadata
from openapi_client.model.user_reference import UserReference
