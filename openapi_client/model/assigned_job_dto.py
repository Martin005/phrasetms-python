# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class AssignedJobDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            uid = schemas.StrSchema
            innerId = schemas.StrSchema
            filename = schemas.StrSchema
            dateDue = schemas.DateTimeSchema
            dateCreated = schemas.DateTimeSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "NEW": "NEW",
                        "ACCEPTED": "ACCEPTED",
                        "DECLINED": "DECLINED",
                        "REJECTED": "REJECTED",
                        "DELIVERED": "DELIVERED",
                        "EMAILED": "EMAILED",
                        "COMPLETED": "COMPLETED",
                        "CANCELLED": "CANCELLED",
                    }
                
                @schemas.classproperty
                def NEW(cls):
                    return cls("NEW")
                
                @schemas.classproperty
                def ACCEPTED(cls):
                    return cls("ACCEPTED")
                
                @schemas.classproperty
                def DECLINED(cls):
                    return cls("DECLINED")
                
                @schemas.classproperty
                def REJECTED(cls):
                    return cls("REJECTED")
                
                @schemas.classproperty
                def DELIVERED(cls):
                    return cls("DELIVERED")
                
                @schemas.classproperty
                def EMAILED(cls):
                    return cls("EMAILED")
                
                @schemas.classproperty
                def COMPLETED(cls):
                    return cls("COMPLETED")
                
                @schemas.classproperty
                def CANCELLED(cls):
                    return cls("CANCELLED")
            targetLang = schemas.StrSchema
            sourceLang = schemas.StrSchema
        
            @staticmethod
            def project() -> typing.Type['ProjectReference']:
                return ProjectReference
        
            @staticmethod
            def workflowStep() -> typing.Type['ProjectWorkflowStepReference']:
                return ProjectWorkflowStepReference
        
            @staticmethod
            def importStatus() -> typing.Type['ImportStatusDto']:
                return ImportStatusDto
            imported = schemas.BoolSchema
            __annotations__ = {
                "uid": uid,
                "innerId": innerId,
                "filename": filename,
                "dateDue": dateDue,
                "dateCreated": dateCreated,
                "status": status,
                "targetLang": targetLang,
                "sourceLang": sourceLang,
                "project": project,
                "workflowStep": workflowStep,
                "importStatus": importStatus,
                "imported": imported,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uid"]) -> MetaOapg.properties.uid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["innerId"]) -> MetaOapg.properties.innerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filename"]) -> MetaOapg.properties.filename: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateDue"]) -> MetaOapg.properties.dateDue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetLang"]) -> MetaOapg.properties.targetLang: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceLang"]) -> MetaOapg.properties.sourceLang: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project"]) -> 'ProjectReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowStep"]) -> 'ProjectWorkflowStepReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["importStatus"]) -> 'ImportStatusDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["imported"]) -> MetaOapg.properties.imported: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["uid", "innerId", "filename", "dateDue", "dateCreated", "status", "targetLang", "sourceLang", "project", "workflowStep", "importStatus", "imported", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uid"]) -> typing.Union[MetaOapg.properties.uid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["innerId"]) -> typing.Union[MetaOapg.properties.innerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filename"]) -> typing.Union[MetaOapg.properties.filename, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateDue"]) -> typing.Union[MetaOapg.properties.dateDue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> typing.Union[MetaOapg.properties.dateCreated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetLang"]) -> typing.Union[MetaOapg.properties.targetLang, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceLang"]) -> typing.Union[MetaOapg.properties.sourceLang, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project"]) -> typing.Union['ProjectReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowStep"]) -> typing.Union['ProjectWorkflowStepReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["importStatus"]) -> typing.Union['ImportStatusDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["imported"]) -> typing.Union[MetaOapg.properties.imported, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["uid", "innerId", "filename", "dateDue", "dateCreated", "status", "targetLang", "sourceLang", "project", "workflowStep", "importStatus", "imported", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        uid: typing.Union[MetaOapg.properties.uid, str, schemas.Unset] = schemas.unset,
        innerId: typing.Union[MetaOapg.properties.innerId, str, schemas.Unset] = schemas.unset,
        filename: typing.Union[MetaOapg.properties.filename, str, schemas.Unset] = schemas.unset,
        dateDue: typing.Union[MetaOapg.properties.dateDue, str, datetime, schemas.Unset] = schemas.unset,
        dateCreated: typing.Union[MetaOapg.properties.dateCreated, str, datetime, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        targetLang: typing.Union[MetaOapg.properties.targetLang, str, schemas.Unset] = schemas.unset,
        sourceLang: typing.Union[MetaOapg.properties.sourceLang, str, schemas.Unset] = schemas.unset,
        project: typing.Union['ProjectReference', schemas.Unset] = schemas.unset,
        workflowStep: typing.Union['ProjectWorkflowStepReference', schemas.Unset] = schemas.unset,
        importStatus: typing.Union['ImportStatusDto', schemas.Unset] = schemas.unset,
        imported: typing.Union[MetaOapg.properties.imported, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AssignedJobDto':
        return super().__new__(
            cls,
            *_args,
            uid=uid,
            innerId=innerId,
            filename=filename,
            dateDue=dateDue,
            dateCreated=dateCreated,
            status=status,
            targetLang=targetLang,
            sourceLang=sourceLang,
            project=project,
            workflowStep=workflowStep,
            importStatus=importStatus,
            imported=imported,
            _configuration=_configuration,
            **kwargs,
        )

from phrasetms_client.model.import_status_dto import ImportStatusDto
from phrasetms_client.model.project_reference import ProjectReference
from phrasetms_client.model.project_workflow_step_reference import ProjectWorkflowStepReference
