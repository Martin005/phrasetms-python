# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class NetRateScheme(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            uid = schemas.StrSchema
            name = schemas.StrSchema
        
            @staticmethod
            def organization() -> typing.Type['OrganizationReference']:
                return OrganizationReference
            dateCreated = schemas.DateTimeSchema
        
            @staticmethod
            def createdBy() -> typing.Type['UserReference']:
                return UserReference
            
            
            class workflowStepNetSchemes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['NetRateSchemeWorkflowStepReference']:
                        return NetRateSchemeWorkflowStepReference
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['NetRateSchemeWorkflowStepReference'], typing.List['NetRateSchemeWorkflowStepReference']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'workflowStepNetSchemes':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'NetRateSchemeWorkflowStepReference':
                    return super().__getitem__(i)
        
            @staticmethod
            def rates() -> typing.Type['DiscountSettingsDto']:
                return DiscountSettingsDto
            __annotations__ = {
                "id": id,
                "uid": uid,
                "name": name,
                "organization": organization,
                "dateCreated": dateCreated,
                "createdBy": createdBy,
                "workflowStepNetSchemes": workflowStepNetSchemes,
                "rates": rates,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uid"]) -> MetaOapg.properties.uid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organization"]) -> 'OrganizationReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdBy"]) -> 'UserReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowStepNetSchemes"]) -> MetaOapg.properties.workflowStepNetSchemes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rates"]) -> 'DiscountSettingsDto': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "uid", "name", "organization", "dateCreated", "createdBy", "workflowStepNetSchemes", "rates", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uid"]) -> typing.Union[MetaOapg.properties.uid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organization"]) -> typing.Union['OrganizationReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> typing.Union[MetaOapg.properties.dateCreated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdBy"]) -> typing.Union['UserReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowStepNetSchemes"]) -> typing.Union[MetaOapg.properties.workflowStepNetSchemes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rates"]) -> typing.Union['DiscountSettingsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "uid", "name", "organization", "dateCreated", "createdBy", "workflowStepNetSchemes", "rates", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        uid: typing.Union[MetaOapg.properties.uid, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        organization: typing.Union['OrganizationReference', schemas.Unset] = schemas.unset,
        dateCreated: typing.Union[MetaOapg.properties.dateCreated, str, datetime, schemas.Unset] = schemas.unset,
        createdBy: typing.Union['UserReference', schemas.Unset] = schemas.unset,
        workflowStepNetSchemes: typing.Union[MetaOapg.properties.workflowStepNetSchemes, list, tuple, schemas.Unset] = schemas.unset,
        rates: typing.Union['DiscountSettingsDto', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NetRateScheme':
        return super().__new__(
            cls,
            *_args,
            id=id,
            uid=uid,
            name=name,
            organization=organization,
            dateCreated=dateCreated,
            createdBy=createdBy,
            workflowStepNetSchemes=workflowStepNetSchemes,
            rates=rates,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.discount_settings_dto import DiscountSettingsDto
from openapi_client.model.net_rate_scheme_workflow_step_reference import NetRateSchemeWorkflowStepReference
from openapi_client.model.organization_reference import OrganizationReference
from openapi_client.model.user_reference import UserReference
