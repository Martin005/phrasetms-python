# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class AbstractUserEditDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "firstName",
            "lastName",
            "role",
            "timezone",
            "userName",
            "email",
        }
        
        @staticmethod
        def discriminator():
            return {
                'role': {
                    'ADMIN_EDIT': ADMINEDIT,
                    'GUEST_EDIT': GUESTEDIT,
                    'LINGUIST_EDIT': LINGUISTEDIT,
                    'PROJECT_MANAGER_EDIT': PROJECTMANAGEREDIT,
                    'SUBMITTER_EDIT': SUBMITTEREDIT,
                }
            }
        
        class properties:
            
            
            class userName(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 0
            
            
            class firstName(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 0
            
            
            class lastName(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 0
            
            
            class email(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 0
            
            
            class role(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "SYS_ADMIN": "SYS_ADMIN",
                        "SYS_ADMIN_READ": "SYS_ADMIN_READ",
                        "ADMIN": "ADMIN",
                        "PROJECT_MANAGER": "PROJECT_MANAGER",
                        "LINGUIST": "LINGUIST",
                        "GUEST": "GUEST",
                        "SUBMITTER": "SUBMITTER",
                    }
                
                @schemas.classproperty
                def SYS_ADMIN(cls):
                    return cls("SYS_ADMIN")
                
                @schemas.classproperty
                def SYS_ADMIN_READ(cls):
                    return cls("SYS_ADMIN_READ")
                
                @schemas.classproperty
                def ADMIN(cls):
                    return cls("ADMIN")
                
                @schemas.classproperty
                def PROJECT_MANAGER(cls):
                    return cls("PROJECT_MANAGER")
                
                @schemas.classproperty
                def LINGUIST(cls):
                    return cls("LINGUIST")
                
                @schemas.classproperty
                def GUEST(cls):
                    return cls("GUEST")
                
                @schemas.classproperty
                def SUBMITTER(cls):
                    return cls("SUBMITTER")
            
            
            class timezone(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 0
            receiveNewsletter = schemas.BoolSchema
            
            
            class note(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 4096
                    min_length = 0
            active = schemas.BoolSchema
            __annotations__ = {
                "userName": userName,
                "firstName": firstName,
                "lastName": lastName,
                "email": email,
                "role": role,
                "timezone": timezone,
                "receiveNewsletter": receiveNewsletter,
                "note": note,
                "active": active,
            }
    
    firstName: MetaOapg.properties.firstName
    lastName: MetaOapg.properties.lastName
    role: MetaOapg.properties.role
    timezone: MetaOapg.properties.timezone
    userName: MetaOapg.properties.userName
    email: MetaOapg.properties.email
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userName"]) -> MetaOapg.properties.userName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["role"]) -> MetaOapg.properties.role: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["receiveNewsletter"]) -> MetaOapg.properties.receiveNewsletter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["userName", "firstName", "lastName", "email", "role", "timezone", "receiveNewsletter", "note", "active", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userName"]) -> MetaOapg.properties.userName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["role"]) -> MetaOapg.properties.role: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["receiveNewsletter"]) -> typing.Union[MetaOapg.properties.receiveNewsletter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> typing.Union[MetaOapg.properties.active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["userName", "firstName", "lastName", "email", "role", "timezone", "receiveNewsletter", "note", "active", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        firstName: typing.Union[MetaOapg.properties.firstName, str, ],
        lastName: typing.Union[MetaOapg.properties.lastName, str, ],
        role: typing.Union[MetaOapg.properties.role, str, ],
        timezone: typing.Union[MetaOapg.properties.timezone, str, ],
        userName: typing.Union[MetaOapg.properties.userName, str, ],
        email: typing.Union[MetaOapg.properties.email, str, ],
        receiveNewsletter: typing.Union[MetaOapg.properties.receiveNewsletter, bool, schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        active: typing.Union[MetaOapg.properties.active, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AbstractUserEditDto':
        return super().__new__(
            cls,
            *_args,
            firstName=firstName,
            lastName=lastName,
            role=role,
            timezone=timezone,
            userName=userName,
            email=email,
            receiveNewsletter=receiveNewsletter,
            note=note,
            active=active,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.adminedit import ADMINEDIT
from openapi_client.model.guestedit import GUESTEDIT
from openapi_client.model.linguistedit import LINGUISTEDIT
from openapi_client.model.projectmanageredit import PROJECTMANAGEREDIT
from openapi_client.model.submitteredit import SUBMITTEREDIT
