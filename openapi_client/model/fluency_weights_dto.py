# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class FluencyWeightsDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def fluency() -> typing.Type['ToggleableWeightDto']:
                return ToggleableWeightDto
        
            @staticmethod
            def punctuation() -> typing.Type['ToggleableWeightDto']:
                return ToggleableWeightDto
        
            @staticmethod
            def spelling() -> typing.Type['ToggleableWeightDto']:
                return ToggleableWeightDto
        
            @staticmethod
            def grammar() -> typing.Type['ToggleableWeightDto']:
                return ToggleableWeightDto
        
            @staticmethod
            def grammaticalRegister() -> typing.Type['ToggleableWeightDto']:
                return ToggleableWeightDto
        
            @staticmethod
            def inconsistency() -> typing.Type['ToggleableWeightDto']:
                return ToggleableWeightDto
        
            @staticmethod
            def crossReference() -> typing.Type['ToggleableWeightDto']:
                return ToggleableWeightDto
        
            @staticmethod
            def characterEncoding() -> typing.Type['ToggleableWeightDto']:
                return ToggleableWeightDto
            __annotations__ = {
                "fluency": fluency,
                "punctuation": punctuation,
                "spelling": spelling,
                "grammar": grammar,
                "grammaticalRegister": grammaticalRegister,
                "inconsistency": inconsistency,
                "crossReference": crossReference,
                "characterEncoding": characterEncoding,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fluency"]) -> 'ToggleableWeightDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["punctuation"]) -> 'ToggleableWeightDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spelling"]) -> 'ToggleableWeightDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grammar"]) -> 'ToggleableWeightDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grammaticalRegister"]) -> 'ToggleableWeightDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inconsistency"]) -> 'ToggleableWeightDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["crossReference"]) -> 'ToggleableWeightDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["characterEncoding"]) -> 'ToggleableWeightDto': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["fluency", "punctuation", "spelling", "grammar", "grammaticalRegister", "inconsistency", "crossReference", "characterEncoding", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fluency"]) -> typing.Union['ToggleableWeightDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["punctuation"]) -> typing.Union['ToggleableWeightDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spelling"]) -> typing.Union['ToggleableWeightDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grammar"]) -> typing.Union['ToggleableWeightDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grammaticalRegister"]) -> typing.Union['ToggleableWeightDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inconsistency"]) -> typing.Union['ToggleableWeightDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["crossReference"]) -> typing.Union['ToggleableWeightDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["characterEncoding"]) -> typing.Union['ToggleableWeightDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["fluency", "punctuation", "spelling", "grammar", "grammaticalRegister", "inconsistency", "crossReference", "characterEncoding", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        fluency: typing.Union['ToggleableWeightDto', schemas.Unset] = schemas.unset,
        punctuation: typing.Union['ToggleableWeightDto', schemas.Unset] = schemas.unset,
        spelling: typing.Union['ToggleableWeightDto', schemas.Unset] = schemas.unset,
        grammar: typing.Union['ToggleableWeightDto', schemas.Unset] = schemas.unset,
        grammaticalRegister: typing.Union['ToggleableWeightDto', schemas.Unset] = schemas.unset,
        inconsistency: typing.Union['ToggleableWeightDto', schemas.Unset] = schemas.unset,
        crossReference: typing.Union['ToggleableWeightDto', schemas.Unset] = schemas.unset,
        characterEncoding: typing.Union['ToggleableWeightDto', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FluencyWeightsDto':
        return super().__new__(
            cls,
            *_args,
            fluency=fluency,
            punctuation=punctuation,
            spelling=spelling,
            grammar=grammar,
            grammaticalRegister=grammaticalRegister,
            inconsistency=inconsistency,
            crossReference=crossReference,
            characterEncoding=characterEncoding,
            _configuration=_configuration,
            **kwargs,
        )

from phrasetms_client.model.toggleable_weight_dto import ToggleableWeightDto
