# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class AnalyseV3Dto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            uid = schemas.StrSchema
            innerId = schemas.Int32Schema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def PRE_ANALYSE(cls):
                    return cls("PreAnalyse")
                
                @schemas.classproperty
                def POST_ANALYSE(cls):
                    return cls("PostAnalyse")
                
                @schemas.classproperty
                def PRE_ANALYSE_TARGET(cls):
                    return cls("PreAnalyseTarget")
                
                @schemas.classproperty
                def COMPARE(cls):
                    return cls("Compare")
                
                @schemas.classproperty
                def PRE_ANALYSE_PROVIDER(cls):
                    return cls("PreAnalyseProvider")
            name = schemas.StrSchema
        
            @staticmethod
            def provider() -> typing.Type['ProviderReference']:
                return ProviderReference
        
            @staticmethod
            def createdBy() -> typing.Type['UserReference']:
                return UserReference
            dateCreated = schemas.DateTimeSchema
        
            @staticmethod
            def netRateScheme() -> typing.Type['NetRateSchemeReference']:
                return NetRateSchemeReference
            canChangeNetRateScheme = schemas.BoolSchema
            
            
            class analyseLanguageParts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AnalyseLanguagePartV3Dto']:
                        return AnalyseLanguagePartV3Dto
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['AnalyseLanguagePartV3Dto'], typing.List['AnalyseLanguagePartV3Dto']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'analyseLanguageParts':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AnalyseLanguagePartV3Dto':
                    return super().__getitem__(i)
        
            @staticmethod
            def settings() -> typing.Type['AbstractAnalyseSettingsDto']:
                return AbstractAnalyseSettingsDto
            outdated = schemas.BoolSchema
        
            @staticmethod
            def importStatus() -> typing.Type['ImportStatusDto']:
                return ImportStatusDto
            
            
            class pureWarnings(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pureWarnings':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def project() -> typing.Type['ProjectReference']:
                return ProjectReference
            __annotations__ = {
                "id": id,
                "uid": uid,
                "innerId": innerId,
                "type": type,
                "name": name,
                "provider": provider,
                "createdBy": createdBy,
                "dateCreated": dateCreated,
                "netRateScheme": netRateScheme,
                "canChangeNetRateScheme": canChangeNetRateScheme,
                "analyseLanguageParts": analyseLanguageParts,
                "settings": settings,
                "outdated": outdated,
                "importStatus": importStatus,
                "pureWarnings": pureWarnings,
                "project": project,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uid"]) -> MetaOapg.properties.uid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["innerId"]) -> MetaOapg.properties.innerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["provider"]) -> 'ProviderReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdBy"]) -> 'UserReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["netRateScheme"]) -> 'NetRateSchemeReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["canChangeNetRateScheme"]) -> MetaOapg.properties.canChangeNetRateScheme: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["analyseLanguageParts"]) -> MetaOapg.properties.analyseLanguageParts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["settings"]) -> 'AbstractAnalyseSettingsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["outdated"]) -> MetaOapg.properties.outdated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["importStatus"]) -> 'ImportStatusDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pureWarnings"]) -> MetaOapg.properties.pureWarnings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project"]) -> 'ProjectReference': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "uid", "innerId", "type", "name", "provider", "createdBy", "dateCreated", "netRateScheme", "canChangeNetRateScheme", "analyseLanguageParts", "settings", "outdated", "importStatus", "pureWarnings", "project", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uid"]) -> typing.Union[MetaOapg.properties.uid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["innerId"]) -> typing.Union[MetaOapg.properties.innerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["provider"]) -> typing.Union['ProviderReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdBy"]) -> typing.Union['UserReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> typing.Union[MetaOapg.properties.dateCreated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["netRateScheme"]) -> typing.Union['NetRateSchemeReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["canChangeNetRateScheme"]) -> typing.Union[MetaOapg.properties.canChangeNetRateScheme, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["analyseLanguageParts"]) -> typing.Union[MetaOapg.properties.analyseLanguageParts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["settings"]) -> typing.Union['AbstractAnalyseSettingsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["outdated"]) -> typing.Union[MetaOapg.properties.outdated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["importStatus"]) -> typing.Union['ImportStatusDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pureWarnings"]) -> typing.Union[MetaOapg.properties.pureWarnings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project"]) -> typing.Union['ProjectReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "uid", "innerId", "type", "name", "provider", "createdBy", "dateCreated", "netRateScheme", "canChangeNetRateScheme", "analyseLanguageParts", "settings", "outdated", "importStatus", "pureWarnings", "project", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        uid: typing.Union[MetaOapg.properties.uid, str, schemas.Unset] = schemas.unset,
        innerId: typing.Union[MetaOapg.properties.innerId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        provider: typing.Union['ProviderReference', schemas.Unset] = schemas.unset,
        createdBy: typing.Union['UserReference', schemas.Unset] = schemas.unset,
        dateCreated: typing.Union[MetaOapg.properties.dateCreated, str, datetime, schemas.Unset] = schemas.unset,
        netRateScheme: typing.Union['NetRateSchemeReference', schemas.Unset] = schemas.unset,
        canChangeNetRateScheme: typing.Union[MetaOapg.properties.canChangeNetRateScheme, bool, schemas.Unset] = schemas.unset,
        analyseLanguageParts: typing.Union[MetaOapg.properties.analyseLanguageParts, list, tuple, schemas.Unset] = schemas.unset,
        settings: typing.Union['AbstractAnalyseSettingsDto', schemas.Unset] = schemas.unset,
        outdated: typing.Union[MetaOapg.properties.outdated, bool, schemas.Unset] = schemas.unset,
        importStatus: typing.Union['ImportStatusDto', schemas.Unset] = schemas.unset,
        pureWarnings: typing.Union[MetaOapg.properties.pureWarnings, list, tuple, schemas.Unset] = schemas.unset,
        project: typing.Union['ProjectReference', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AnalyseV3Dto':
        return super().__new__(
            cls,
            *_args,
            id=id,
            uid=uid,
            innerId=innerId,
            type=type,
            name=name,
            provider=provider,
            createdBy=createdBy,
            dateCreated=dateCreated,
            netRateScheme=netRateScheme,
            canChangeNetRateScheme=canChangeNetRateScheme,
            analyseLanguageParts=analyseLanguageParts,
            settings=settings,
            outdated=outdated,
            importStatus=importStatus,
            pureWarnings=pureWarnings,
            project=project,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.abstract_analyse_settings_dto import AbstractAnalyseSettingsDto
from openapi_client.model.analyse_language_part_v3_dto import AnalyseLanguagePartV3Dto
from openapi_client.model.import_status_dto import ImportStatusDto
from openapi_client.model.net_rate_scheme_reference import NetRateSchemeReference
from openapi_client.model.project_reference import ProjectReference
from openapi_client.model.provider_reference import ProviderReference
from openapi_client.model.user_reference import UserReference
