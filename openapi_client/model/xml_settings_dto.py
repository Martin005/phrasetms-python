# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class XmlSettingsDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class rulesFormat(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "PLAIN": "PLAIN",
                        "XPATH": "XPATH",
                    }
                
                @schemas.classproperty
                def PLAIN(cls):
                    return cls("PLAIN")
                
                @schemas.classproperty
                def XPATH(cls):
                    return cls("XPATH")
            includeElementsPlain = schemas.StrSchema
            excludeElementsPlain = schemas.StrSchema
            includeAttributesPlain = schemas.StrSchema
            excludeAttributesPlain = schemas.StrSchema
            inlineElementsNonTranslatablePlain = schemas.StrSchema
            inlineElementsPlain = schemas.StrSchema
            inlineElementsAutoPlain = schemas.BoolSchema
            htmlSubfilterElementsPlain = schemas.StrSchema
            entities = schemas.BoolSchema
            lockElementsPlain = schemas.StrSchema
            lockAttributesPlain = schemas.StrSchema
            includeXPath = schemas.StrSchema
            inlineElementsXpath = schemas.StrSchema
            inlineElementsNonTranslatableXPath = schemas.StrSchema
            inlineElementsAutoXPath = schemas.BoolSchema
            htmlSubfilterElementsXpath = schemas.StrSchema
            lockXPath = schemas.StrSchema
            segmentation = schemas.BoolSchema
            tagRegexp = schemas.StrSchema
            contextNoteXpath = schemas.StrSchema
            maxLenXPath = schemas.StrSchema
            preserveWhitespaceXPath = schemas.StrSchema
            preserveCharEntities = schemas.StrSchema
            contextKeyXPath = schemas.StrSchema
            xslUrl = schemas.StrSchema
            xslFile = schemas.StrSchema
            importComments = schemas.BoolSchema
            icuSubFilter = schemas.BoolSchema
            __annotations__ = {
                "rulesFormat": rulesFormat,
                "includeElementsPlain": includeElementsPlain,
                "excludeElementsPlain": excludeElementsPlain,
                "includeAttributesPlain": includeAttributesPlain,
                "excludeAttributesPlain": excludeAttributesPlain,
                "inlineElementsNonTranslatablePlain": inlineElementsNonTranslatablePlain,
                "inlineElementsPlain": inlineElementsPlain,
                "inlineElementsAutoPlain": inlineElementsAutoPlain,
                "htmlSubfilterElementsPlain": htmlSubfilterElementsPlain,
                "entities": entities,
                "lockElementsPlain": lockElementsPlain,
                "lockAttributesPlain": lockAttributesPlain,
                "includeXPath": includeXPath,
                "inlineElementsXpath": inlineElementsXpath,
                "inlineElementsNonTranslatableXPath": inlineElementsNonTranslatableXPath,
                "inlineElementsAutoXPath": inlineElementsAutoXPath,
                "htmlSubfilterElementsXpath": htmlSubfilterElementsXpath,
                "lockXPath": lockXPath,
                "segmentation": segmentation,
                "tagRegexp": tagRegexp,
                "contextNoteXpath": contextNoteXpath,
                "maxLenXPath": maxLenXPath,
                "preserveWhitespaceXPath": preserveWhitespaceXPath,
                "preserveCharEntities": preserveCharEntities,
                "contextKeyXPath": contextKeyXPath,
                "xslUrl": xslUrl,
                "xslFile": xslFile,
                "importComments": importComments,
                "icuSubFilter": icuSubFilter,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rulesFormat"]) -> MetaOapg.properties.rulesFormat: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includeElementsPlain"]) -> MetaOapg.properties.includeElementsPlain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["excludeElementsPlain"]) -> MetaOapg.properties.excludeElementsPlain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includeAttributesPlain"]) -> MetaOapg.properties.includeAttributesPlain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["excludeAttributesPlain"]) -> MetaOapg.properties.excludeAttributesPlain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inlineElementsNonTranslatablePlain"]) -> MetaOapg.properties.inlineElementsNonTranslatablePlain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inlineElementsPlain"]) -> MetaOapg.properties.inlineElementsPlain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inlineElementsAutoPlain"]) -> MetaOapg.properties.inlineElementsAutoPlain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["htmlSubfilterElementsPlain"]) -> MetaOapg.properties.htmlSubfilterElementsPlain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entities"]) -> MetaOapg.properties.entities: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lockElementsPlain"]) -> MetaOapg.properties.lockElementsPlain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lockAttributesPlain"]) -> MetaOapg.properties.lockAttributesPlain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includeXPath"]) -> MetaOapg.properties.includeXPath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inlineElementsXpath"]) -> MetaOapg.properties.inlineElementsXpath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inlineElementsNonTranslatableXPath"]) -> MetaOapg.properties.inlineElementsNonTranslatableXPath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inlineElementsAutoXPath"]) -> MetaOapg.properties.inlineElementsAutoXPath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["htmlSubfilterElementsXpath"]) -> MetaOapg.properties.htmlSubfilterElementsXpath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lockXPath"]) -> MetaOapg.properties.lockXPath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["segmentation"]) -> MetaOapg.properties.segmentation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tagRegexp"]) -> MetaOapg.properties.tagRegexp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contextNoteXpath"]) -> MetaOapg.properties.contextNoteXpath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxLenXPath"]) -> MetaOapg.properties.maxLenXPath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preserveWhitespaceXPath"]) -> MetaOapg.properties.preserveWhitespaceXPath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preserveCharEntities"]) -> MetaOapg.properties.preserveCharEntities: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contextKeyXPath"]) -> MetaOapg.properties.contextKeyXPath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["xslUrl"]) -> MetaOapg.properties.xslUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["xslFile"]) -> MetaOapg.properties.xslFile: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["importComments"]) -> MetaOapg.properties.importComments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["icuSubFilter"]) -> MetaOapg.properties.icuSubFilter: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["rulesFormat", "includeElementsPlain", "excludeElementsPlain", "includeAttributesPlain", "excludeAttributesPlain", "inlineElementsNonTranslatablePlain", "inlineElementsPlain", "inlineElementsAutoPlain", "htmlSubfilterElementsPlain", "entities", "lockElementsPlain", "lockAttributesPlain", "includeXPath", "inlineElementsXpath", "inlineElementsNonTranslatableXPath", "inlineElementsAutoXPath", "htmlSubfilterElementsXpath", "lockXPath", "segmentation", "tagRegexp", "contextNoteXpath", "maxLenXPath", "preserveWhitespaceXPath", "preserveCharEntities", "contextKeyXPath", "xslUrl", "xslFile", "importComments", "icuSubFilter", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rulesFormat"]) -> typing.Union[MetaOapg.properties.rulesFormat, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includeElementsPlain"]) -> typing.Union[MetaOapg.properties.includeElementsPlain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["excludeElementsPlain"]) -> typing.Union[MetaOapg.properties.excludeElementsPlain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includeAttributesPlain"]) -> typing.Union[MetaOapg.properties.includeAttributesPlain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["excludeAttributesPlain"]) -> typing.Union[MetaOapg.properties.excludeAttributesPlain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inlineElementsNonTranslatablePlain"]) -> typing.Union[MetaOapg.properties.inlineElementsNonTranslatablePlain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inlineElementsPlain"]) -> typing.Union[MetaOapg.properties.inlineElementsPlain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inlineElementsAutoPlain"]) -> typing.Union[MetaOapg.properties.inlineElementsAutoPlain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["htmlSubfilterElementsPlain"]) -> typing.Union[MetaOapg.properties.htmlSubfilterElementsPlain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entities"]) -> typing.Union[MetaOapg.properties.entities, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lockElementsPlain"]) -> typing.Union[MetaOapg.properties.lockElementsPlain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lockAttributesPlain"]) -> typing.Union[MetaOapg.properties.lockAttributesPlain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includeXPath"]) -> typing.Union[MetaOapg.properties.includeXPath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inlineElementsXpath"]) -> typing.Union[MetaOapg.properties.inlineElementsXpath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inlineElementsNonTranslatableXPath"]) -> typing.Union[MetaOapg.properties.inlineElementsNonTranslatableXPath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inlineElementsAutoXPath"]) -> typing.Union[MetaOapg.properties.inlineElementsAutoXPath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["htmlSubfilterElementsXpath"]) -> typing.Union[MetaOapg.properties.htmlSubfilterElementsXpath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lockXPath"]) -> typing.Union[MetaOapg.properties.lockXPath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["segmentation"]) -> typing.Union[MetaOapg.properties.segmentation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tagRegexp"]) -> typing.Union[MetaOapg.properties.tagRegexp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contextNoteXpath"]) -> typing.Union[MetaOapg.properties.contextNoteXpath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxLenXPath"]) -> typing.Union[MetaOapg.properties.maxLenXPath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preserveWhitespaceXPath"]) -> typing.Union[MetaOapg.properties.preserveWhitespaceXPath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preserveCharEntities"]) -> typing.Union[MetaOapg.properties.preserveCharEntities, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contextKeyXPath"]) -> typing.Union[MetaOapg.properties.contextKeyXPath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["xslUrl"]) -> typing.Union[MetaOapg.properties.xslUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["xslFile"]) -> typing.Union[MetaOapg.properties.xslFile, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["importComments"]) -> typing.Union[MetaOapg.properties.importComments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["icuSubFilter"]) -> typing.Union[MetaOapg.properties.icuSubFilter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["rulesFormat", "includeElementsPlain", "excludeElementsPlain", "includeAttributesPlain", "excludeAttributesPlain", "inlineElementsNonTranslatablePlain", "inlineElementsPlain", "inlineElementsAutoPlain", "htmlSubfilterElementsPlain", "entities", "lockElementsPlain", "lockAttributesPlain", "includeXPath", "inlineElementsXpath", "inlineElementsNonTranslatableXPath", "inlineElementsAutoXPath", "htmlSubfilterElementsXpath", "lockXPath", "segmentation", "tagRegexp", "contextNoteXpath", "maxLenXPath", "preserveWhitespaceXPath", "preserveCharEntities", "contextKeyXPath", "xslUrl", "xslFile", "importComments", "icuSubFilter", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        rulesFormat: typing.Union[MetaOapg.properties.rulesFormat, str, schemas.Unset] = schemas.unset,
        includeElementsPlain: typing.Union[MetaOapg.properties.includeElementsPlain, str, schemas.Unset] = schemas.unset,
        excludeElementsPlain: typing.Union[MetaOapg.properties.excludeElementsPlain, str, schemas.Unset] = schemas.unset,
        includeAttributesPlain: typing.Union[MetaOapg.properties.includeAttributesPlain, str, schemas.Unset] = schemas.unset,
        excludeAttributesPlain: typing.Union[MetaOapg.properties.excludeAttributesPlain, str, schemas.Unset] = schemas.unset,
        inlineElementsNonTranslatablePlain: typing.Union[MetaOapg.properties.inlineElementsNonTranslatablePlain, str, schemas.Unset] = schemas.unset,
        inlineElementsPlain: typing.Union[MetaOapg.properties.inlineElementsPlain, str, schemas.Unset] = schemas.unset,
        inlineElementsAutoPlain: typing.Union[MetaOapg.properties.inlineElementsAutoPlain, bool, schemas.Unset] = schemas.unset,
        htmlSubfilterElementsPlain: typing.Union[MetaOapg.properties.htmlSubfilterElementsPlain, str, schemas.Unset] = schemas.unset,
        entities: typing.Union[MetaOapg.properties.entities, bool, schemas.Unset] = schemas.unset,
        lockElementsPlain: typing.Union[MetaOapg.properties.lockElementsPlain, str, schemas.Unset] = schemas.unset,
        lockAttributesPlain: typing.Union[MetaOapg.properties.lockAttributesPlain, str, schemas.Unset] = schemas.unset,
        includeXPath: typing.Union[MetaOapg.properties.includeXPath, str, schemas.Unset] = schemas.unset,
        inlineElementsXpath: typing.Union[MetaOapg.properties.inlineElementsXpath, str, schemas.Unset] = schemas.unset,
        inlineElementsNonTranslatableXPath: typing.Union[MetaOapg.properties.inlineElementsNonTranslatableXPath, str, schemas.Unset] = schemas.unset,
        inlineElementsAutoXPath: typing.Union[MetaOapg.properties.inlineElementsAutoXPath, bool, schemas.Unset] = schemas.unset,
        htmlSubfilterElementsXpath: typing.Union[MetaOapg.properties.htmlSubfilterElementsXpath, str, schemas.Unset] = schemas.unset,
        lockXPath: typing.Union[MetaOapg.properties.lockXPath, str, schemas.Unset] = schemas.unset,
        segmentation: typing.Union[MetaOapg.properties.segmentation, bool, schemas.Unset] = schemas.unset,
        tagRegexp: typing.Union[MetaOapg.properties.tagRegexp, str, schemas.Unset] = schemas.unset,
        contextNoteXpath: typing.Union[MetaOapg.properties.contextNoteXpath, str, schemas.Unset] = schemas.unset,
        maxLenXPath: typing.Union[MetaOapg.properties.maxLenXPath, str, schemas.Unset] = schemas.unset,
        preserveWhitespaceXPath: typing.Union[MetaOapg.properties.preserveWhitespaceXPath, str, schemas.Unset] = schemas.unset,
        preserveCharEntities: typing.Union[MetaOapg.properties.preserveCharEntities, str, schemas.Unset] = schemas.unset,
        contextKeyXPath: typing.Union[MetaOapg.properties.contextKeyXPath, str, schemas.Unset] = schemas.unset,
        xslUrl: typing.Union[MetaOapg.properties.xslUrl, str, schemas.Unset] = schemas.unset,
        xslFile: typing.Union[MetaOapg.properties.xslFile, str, schemas.Unset] = schemas.unset,
        importComments: typing.Union[MetaOapg.properties.importComments, bool, schemas.Unset] = schemas.unset,
        icuSubFilter: typing.Union[MetaOapg.properties.icuSubFilter, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XmlSettingsDto':
        return super().__new__(
            cls,
            *_args,
            rulesFormat=rulesFormat,
            includeElementsPlain=includeElementsPlain,
            excludeElementsPlain=excludeElementsPlain,
            includeAttributesPlain=includeAttributesPlain,
            excludeAttributesPlain=excludeAttributesPlain,
            inlineElementsNonTranslatablePlain=inlineElementsNonTranslatablePlain,
            inlineElementsPlain=inlineElementsPlain,
            inlineElementsAutoPlain=inlineElementsAutoPlain,
            htmlSubfilterElementsPlain=htmlSubfilterElementsPlain,
            entities=entities,
            lockElementsPlain=lockElementsPlain,
            lockAttributesPlain=lockAttributesPlain,
            includeXPath=includeXPath,
            inlineElementsXpath=inlineElementsXpath,
            inlineElementsNonTranslatableXPath=inlineElementsNonTranslatableXPath,
            inlineElementsAutoXPath=inlineElementsAutoXPath,
            htmlSubfilterElementsXpath=htmlSubfilterElementsXpath,
            lockXPath=lockXPath,
            segmentation=segmentation,
            tagRegexp=tagRegexp,
            contextNoteXpath=contextNoteXpath,
            maxLenXPath=maxLenXPath,
            preserveWhitespaceXPath=preserveWhitespaceXPath,
            preserveCharEntities=preserveCharEntities,
            contextKeyXPath=contextKeyXPath,
            xslUrl=xslUrl,
            xslFile=xslFile,
            importComments=importComments,
            icuSubFilter=icuSubFilter,
            _configuration=_configuration,
            **kwargs,
        )
