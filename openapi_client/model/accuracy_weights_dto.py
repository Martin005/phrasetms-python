# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class AccuracyWeightsDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def accuracy() -> typing.Type['ToggleableWeightDto']:
                return ToggleableWeightDto
        
            @staticmethod
            def addition() -> typing.Type['ToggleableWeightDto']:
                return ToggleableWeightDto
        
            @staticmethod
            def omission() -> typing.Type['ToggleableWeightDto']:
                return ToggleableWeightDto
        
            @staticmethod
            def mistranslation() -> typing.Type['ToggleableWeightDto']:
                return ToggleableWeightDto
        
            @staticmethod
            def underTranslation() -> typing.Type['ToggleableWeightDto']:
                return ToggleableWeightDto
        
            @staticmethod
            def untranslated() -> typing.Type['ToggleableWeightDto']:
                return ToggleableWeightDto
        
            @staticmethod
            def improperTmMatch() -> typing.Type['ToggleableWeightDto']:
                return ToggleableWeightDto
        
            @staticmethod
            def overTranslation() -> typing.Type['ToggleableWeightDto']:
                return ToggleableWeightDto
            __annotations__ = {
                "accuracy": accuracy,
                "addition": addition,
                "omission": omission,
                "mistranslation": mistranslation,
                "underTranslation": underTranslation,
                "untranslated": untranslated,
                "improperTmMatch": improperTmMatch,
                "overTranslation": overTranslation,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accuracy"]) -> 'ToggleableWeightDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addition"]) -> 'ToggleableWeightDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["omission"]) -> 'ToggleableWeightDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mistranslation"]) -> 'ToggleableWeightDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["underTranslation"]) -> 'ToggleableWeightDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["untranslated"]) -> 'ToggleableWeightDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["improperTmMatch"]) -> 'ToggleableWeightDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["overTranslation"]) -> 'ToggleableWeightDto': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["accuracy", "addition", "omission", "mistranslation", "underTranslation", "untranslated", "improperTmMatch", "overTranslation", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accuracy"]) -> typing.Union['ToggleableWeightDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addition"]) -> typing.Union['ToggleableWeightDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["omission"]) -> typing.Union['ToggleableWeightDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mistranslation"]) -> typing.Union['ToggleableWeightDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["underTranslation"]) -> typing.Union['ToggleableWeightDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["untranslated"]) -> typing.Union['ToggleableWeightDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["improperTmMatch"]) -> typing.Union['ToggleableWeightDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["overTranslation"]) -> typing.Union['ToggleableWeightDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["accuracy", "addition", "omission", "mistranslation", "underTranslation", "untranslated", "improperTmMatch", "overTranslation", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        accuracy: typing.Union['ToggleableWeightDto', schemas.Unset] = schemas.unset,
        addition: typing.Union['ToggleableWeightDto', schemas.Unset] = schemas.unset,
        omission: typing.Union['ToggleableWeightDto', schemas.Unset] = schemas.unset,
        mistranslation: typing.Union['ToggleableWeightDto', schemas.Unset] = schemas.unset,
        underTranslation: typing.Union['ToggleableWeightDto', schemas.Unset] = schemas.unset,
        untranslated: typing.Union['ToggleableWeightDto', schemas.Unset] = schemas.unset,
        improperTmMatch: typing.Union['ToggleableWeightDto', schemas.Unset] = schemas.unset,
        overTranslation: typing.Union['ToggleableWeightDto', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AccuracyWeightsDto':
        return super().__new__(
            cls,
            *_args,
            accuracy=accuracy,
            addition=addition,
            omission=omission,
            mistranslation=mistranslation,
            underTranslation=underTranslation,
            untranslated=untranslated,
            improperTmMatch=improperTmMatch,
            overTranslation=overTranslation,
            _configuration=_configuration,
            **kwargs,
        )

from phrasetms_client.model.toggleable_weight_dto import ToggleableWeightDto
