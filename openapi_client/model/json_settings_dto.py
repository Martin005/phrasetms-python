# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class JsonSettingsDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            tagRegexp = schemas.StrSchema
            htmlSubFilter = schemas.BoolSchema
            icuSubFilter = schemas.BoolSchema
            excludeKeyRegexp = schemas.StrSchema
            includeKeyRegexp = schemas.StrSchema
            contextNotePath = schemas.StrSchema
            maxLenPath = schemas.StrSchema
            contextKeyPath = schemas.StrSchema
            __annotations__ = {
                "tagRegexp": tagRegexp,
                "htmlSubFilter": htmlSubFilter,
                "icuSubFilter": icuSubFilter,
                "excludeKeyRegexp": excludeKeyRegexp,
                "includeKeyRegexp": includeKeyRegexp,
                "contextNotePath": contextNotePath,
                "maxLenPath": maxLenPath,
                "contextKeyPath": contextKeyPath,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tagRegexp"]) -> MetaOapg.properties.tagRegexp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["htmlSubFilter"]) -> MetaOapg.properties.htmlSubFilter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["icuSubFilter"]) -> MetaOapg.properties.icuSubFilter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["excludeKeyRegexp"]) -> MetaOapg.properties.excludeKeyRegexp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includeKeyRegexp"]) -> MetaOapg.properties.includeKeyRegexp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contextNotePath"]) -> MetaOapg.properties.contextNotePath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxLenPath"]) -> MetaOapg.properties.maxLenPath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contextKeyPath"]) -> MetaOapg.properties.contextKeyPath: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tagRegexp", "htmlSubFilter", "icuSubFilter", "excludeKeyRegexp", "includeKeyRegexp", "contextNotePath", "maxLenPath", "contextKeyPath", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tagRegexp"]) -> typing.Union[MetaOapg.properties.tagRegexp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["htmlSubFilter"]) -> typing.Union[MetaOapg.properties.htmlSubFilter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["icuSubFilter"]) -> typing.Union[MetaOapg.properties.icuSubFilter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["excludeKeyRegexp"]) -> typing.Union[MetaOapg.properties.excludeKeyRegexp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includeKeyRegexp"]) -> typing.Union[MetaOapg.properties.includeKeyRegexp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contextNotePath"]) -> typing.Union[MetaOapg.properties.contextNotePath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxLenPath"]) -> typing.Union[MetaOapg.properties.maxLenPath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contextKeyPath"]) -> typing.Union[MetaOapg.properties.contextKeyPath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tagRegexp", "htmlSubFilter", "icuSubFilter", "excludeKeyRegexp", "includeKeyRegexp", "contextNotePath", "maxLenPath", "contextKeyPath", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        tagRegexp: typing.Union[MetaOapg.properties.tagRegexp, str, schemas.Unset] = schemas.unset,
        htmlSubFilter: typing.Union[MetaOapg.properties.htmlSubFilter, bool, schemas.Unset] = schemas.unset,
        icuSubFilter: typing.Union[MetaOapg.properties.icuSubFilter, bool, schemas.Unset] = schemas.unset,
        excludeKeyRegexp: typing.Union[MetaOapg.properties.excludeKeyRegexp, str, schemas.Unset] = schemas.unset,
        includeKeyRegexp: typing.Union[MetaOapg.properties.includeKeyRegexp, str, schemas.Unset] = schemas.unset,
        contextNotePath: typing.Union[MetaOapg.properties.contextNotePath, str, schemas.Unset] = schemas.unset,
        maxLenPath: typing.Union[MetaOapg.properties.maxLenPath, str, schemas.Unset] = schemas.unset,
        contextKeyPath: typing.Union[MetaOapg.properties.contextKeyPath, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JsonSettingsDto':
        return super().__new__(
            cls,
            *_args,
            tagRegexp=tagRegexp,
            htmlSubFilter=htmlSubFilter,
            icuSubFilter=icuSubFilter,
            excludeKeyRegexp=excludeKeyRegexp,
            includeKeyRegexp=includeKeyRegexp,
            contextNotePath=contextNotePath,
            maxLenPath=maxLenPath,
            contextKeyPath=contextKeyPath,
            _configuration=_configuration,
            **kwargs,
        )
