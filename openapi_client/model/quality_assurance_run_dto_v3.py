# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phrasetms_client import schemas  # noqa: F401


class QualityAssuranceRunDtoV3(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def initialSegment() -> typing.Type['SegmentReference']:
                return SegmentReference
            
            
            class maxQaWarningsCount(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 1000
                    inclusive_minimum = 1
            
            
            class warningTypes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    max_items = 100
                    min_items = 0
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "EmptyTranslation": "EMPTY_TRANSLATION",
                                "TrailingPunctuation": "TRAILING_PUNCTUATION",
                                "Formatting": "FORMATTING",
                                "JoinTags": "JOIN_TAGS",
                                "MissingNumbersV3": "MISSING_NUMBERS_V3",
                                "MultipleSpacesV3": "MULTIPLE_SPACES_V3",
                                "NonConformingTerm": "NON_CONFORMING_TERM",
                                "NotConfirmed": "NOT_CONFIRMED",
                                "TranslationLength": "TRANSLATION_LENGTH",
                                "AbsoluteLength": "ABSOLUTE_LENGTH",
                                "RelativeLength": "RELATIVE_LENGTH",
                                "UnresolvedComment": "UNRESOLVED_COMMENT",
                                "EmptyPairTags": "EMPTY_PAIR_TAGS",
                                "InconsistentTranslationTargetSource": "INCONSISTENT_TRANSLATION_TARGET_SOURCE",
                                "InconsistentTranslationSourceTarget": "INCONSISTENT_TRANSLATION_SOURCE_TARGET",
                                "ForbiddenString": "FORBIDDEN_STRING",
                                "SpellCheck": "SPELL_CHECK",
                                "RepeatedWord": "REPEATED_WORD",
                                "InconsistentTagContent": "INCONSISTENT_TAG_CONTENT",
                                "EmptyTagContent": "EMPTY_TAG_CONTENT",
                                "Malformed": "MALFORMED",
                                "ForbiddenTerm": "FORBIDDEN_TERM",
                                "NewerAtLowerLevel": "NEWER_AT_LOWER_LEVEL",
                                "LeadingAndTrailingSpaces": "LEADING_AND_TRAILING_SPACES",
                                "LeadingSpaces": "LEADING_SPACES",
                                "TrailingSpaces": "TRAILING_SPACES",
                                "TargetSourceIdentical": "TARGET_SOURCE_IDENTICAL",
                                "SourceOrTargetRegexp": "SOURCE_OR_TARGET_REGEXP",
                                "UnmodifiedFuzzyTranslation": "UNMODIFIED_FUZZY_TRANSLATION",
                                "UnmodifiedFuzzyTranslationTM": "UNMODIFIED_FUZZY_TRANSLATION_TM",
                                "UnmodifiedFuzzyTranslationMTNT": "UNMODIFIED_FUZZY_TRANSLATION_MTNT",
                                "Moravia": "MORAVIA",
                                "ExtraNumbersV3": "EXTRA_NUMBERS_V3",
                                "UnresolvedConversation": "UNRESOLVED_CONVERSATION",
                                "NestedTags": "NESTED_TAGS",
                                "FuzzyInconsistencyTargetSource": "FUZZY_INCONSISTENCY_TARGET_SOURCE",
                                "FuzzyInconsistencySourceTarget": "FUZZY_INCONSISTENCY_SOURCE_TARGET",
                                "CustomQA": "CUSTOM_QA",
                            }
                        
                        @schemas.classproperty
                        def EMPTY_TRANSLATION(cls):
                            return cls("EmptyTranslation")
                        
                        @schemas.classproperty
                        def TRAILING_PUNCTUATION(cls):
                            return cls("TrailingPunctuation")
                        
                        @schemas.classproperty
                        def FORMATTING(cls):
                            return cls("Formatting")
                        
                        @schemas.classproperty
                        def JOIN_TAGS(cls):
                            return cls("JoinTags")
                        
                        @schemas.classproperty
                        def MISSING_NUMBERS_V3(cls):
                            return cls("MissingNumbersV3")
                        
                        @schemas.classproperty
                        def MULTIPLE_SPACES_V3(cls):
                            return cls("MultipleSpacesV3")
                        
                        @schemas.classproperty
                        def NON_CONFORMING_TERM(cls):
                            return cls("NonConformingTerm")
                        
                        @schemas.classproperty
                        def NOT_CONFIRMED(cls):
                            return cls("NotConfirmed")
                        
                        @schemas.classproperty
                        def TRANSLATION_LENGTH(cls):
                            return cls("TranslationLength")
                        
                        @schemas.classproperty
                        def ABSOLUTE_LENGTH(cls):
                            return cls("AbsoluteLength")
                        
                        @schemas.classproperty
                        def RELATIVE_LENGTH(cls):
                            return cls("RelativeLength")
                        
                        @schemas.classproperty
                        def UNRESOLVED_COMMENT(cls):
                            return cls("UnresolvedComment")
                        
                        @schemas.classproperty
                        def EMPTY_PAIR_TAGS(cls):
                            return cls("EmptyPairTags")
                        
                        @schemas.classproperty
                        def INCONSISTENT_TRANSLATION_TARGET_SOURCE(cls):
                            return cls("InconsistentTranslationTargetSource")
                        
                        @schemas.classproperty
                        def INCONSISTENT_TRANSLATION_SOURCE_TARGET(cls):
                            return cls("InconsistentTranslationSourceTarget")
                        
                        @schemas.classproperty
                        def FORBIDDEN_STRING(cls):
                            return cls("ForbiddenString")
                        
                        @schemas.classproperty
                        def SPELL_CHECK(cls):
                            return cls("SpellCheck")
                        
                        @schemas.classproperty
                        def REPEATED_WORD(cls):
                            return cls("RepeatedWord")
                        
                        @schemas.classproperty
                        def INCONSISTENT_TAG_CONTENT(cls):
                            return cls("InconsistentTagContent")
                        
                        @schemas.classproperty
                        def EMPTY_TAG_CONTENT(cls):
                            return cls("EmptyTagContent")
                        
                        @schemas.classproperty
                        def MALFORMED(cls):
                            return cls("Malformed")
                        
                        @schemas.classproperty
                        def FORBIDDEN_TERM(cls):
                            return cls("ForbiddenTerm")
                        
                        @schemas.classproperty
                        def NEWER_AT_LOWER_LEVEL(cls):
                            return cls("NewerAtLowerLevel")
                        
                        @schemas.classproperty
                        def LEADING_AND_TRAILING_SPACES(cls):
                            return cls("LeadingAndTrailingSpaces")
                        
                        @schemas.classproperty
                        def LEADING_SPACES(cls):
                            return cls("LeadingSpaces")
                        
                        @schemas.classproperty
                        def TRAILING_SPACES(cls):
                            return cls("TrailingSpaces")
                        
                        @schemas.classproperty
                        def TARGET_SOURCE_IDENTICAL(cls):
                            return cls("TargetSourceIdentical")
                        
                        @schemas.classproperty
                        def SOURCE_OR_TARGET_REGEXP(cls):
                            return cls("SourceOrTargetRegexp")
                        
                        @schemas.classproperty
                        def UNMODIFIED_FUZZY_TRANSLATION(cls):
                            return cls("UnmodifiedFuzzyTranslation")
                        
                        @schemas.classproperty
                        def UNMODIFIED_FUZZY_TRANSLATION_TM(cls):
                            return cls("UnmodifiedFuzzyTranslationTM")
                        
                        @schemas.classproperty
                        def UNMODIFIED_FUZZY_TRANSLATION_MTNT(cls):
                            return cls("UnmodifiedFuzzyTranslationMTNT")
                        
                        @schemas.classproperty
                        def MORAVIA(cls):
                            return cls("Moravia")
                        
                        @schemas.classproperty
                        def EXTRA_NUMBERS_V3(cls):
                            return cls("ExtraNumbersV3")
                        
                        @schemas.classproperty
                        def UNRESOLVED_CONVERSATION(cls):
                            return cls("UnresolvedConversation")
                        
                        @schemas.classproperty
                        def NESTED_TAGS(cls):
                            return cls("NestedTags")
                        
                        @schemas.classproperty
                        def FUZZY_INCONSISTENCY_TARGET_SOURCE(cls):
                            return cls("FuzzyInconsistencyTargetSource")
                        
                        @schemas.classproperty
                        def FUZZY_INCONSISTENCY_SOURCE_TARGET(cls):
                            return cls("FuzzyInconsistencySourceTarget")
                        
                        @schemas.classproperty
                        def CUSTOM_QA(cls):
                            return cls("CustomQA")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'warningTypes':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "initialSegment": initialSegment,
                "maxQaWarningsCount": maxQaWarningsCount,
                "warningTypes": warningTypes,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["initialSegment"]) -> 'SegmentReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxQaWarningsCount"]) -> MetaOapg.properties.maxQaWarningsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["warningTypes"]) -> MetaOapg.properties.warningTypes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["initialSegment", "maxQaWarningsCount", "warningTypes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["initialSegment"]) -> typing.Union['SegmentReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxQaWarningsCount"]) -> typing.Union[MetaOapg.properties.maxQaWarningsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["warningTypes"]) -> typing.Union[MetaOapg.properties.warningTypes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["initialSegment", "maxQaWarningsCount", "warningTypes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        initialSegment: typing.Union['SegmentReference', schemas.Unset] = schemas.unset,
        maxQaWarningsCount: typing.Union[MetaOapg.properties.maxQaWarningsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        warningTypes: typing.Union[MetaOapg.properties.warningTypes, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'QualityAssuranceRunDtoV3':
        return super().__new__(
            cls,
            *_args,
            initialSegment=initialSegment,
            maxQaWarningsCount=maxQaWarningsCount,
            warningTypes=warningTypes,
            _configuration=_configuration,
            **kwargs,
        )

from phrasetms_client.model.segment_reference import SegmentReference
