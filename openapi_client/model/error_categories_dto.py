# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ErrorCategoriesDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Error categories and their importance weight. If not provided, defaults will be created.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def accuracy() -> typing.Type['AccuracyWeightsDto']:
                return AccuracyWeightsDto
        
            @staticmethod
            def fluency() -> typing.Type['FluencyWeightsDto']:
                return FluencyWeightsDto
        
            @staticmethod
            def terminology() -> typing.Type['TerminologyWeightsDto']:
                return TerminologyWeightsDto
        
            @staticmethod
            def style() -> typing.Type['StyleWeightsDto']:
                return StyleWeightsDto
        
            @staticmethod
            def localeConvention() -> typing.Type['LocaleConventionWeightsDto']:
                return LocaleConventionWeightsDto
        
            @staticmethod
            def verity() -> typing.Type['VerityWeightsDto']:
                return VerityWeightsDto
        
            @staticmethod
            def design() -> typing.Type['DesignWeightsDto']:
                return DesignWeightsDto
        
            @staticmethod
            def other() -> typing.Type['OtherWeightsDto']:
                return OtherWeightsDto
            __annotations__ = {
                "accuracy": accuracy,
                "fluency": fluency,
                "terminology": terminology,
                "style": style,
                "localeConvention": localeConvention,
                "verity": verity,
                "design": design,
                "other": other,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accuracy"]) -> 'AccuracyWeightsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fluency"]) -> 'FluencyWeightsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["terminology"]) -> 'TerminologyWeightsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["style"]) -> 'StyleWeightsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["localeConvention"]) -> 'LocaleConventionWeightsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verity"]) -> 'VerityWeightsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["design"]) -> 'DesignWeightsDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["other"]) -> 'OtherWeightsDto': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["accuracy", "fluency", "terminology", "style", "localeConvention", "verity", "design", "other", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accuracy"]) -> typing.Union['AccuracyWeightsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fluency"]) -> typing.Union['FluencyWeightsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["terminology"]) -> typing.Union['TerminologyWeightsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["style"]) -> typing.Union['StyleWeightsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["localeConvention"]) -> typing.Union['LocaleConventionWeightsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verity"]) -> typing.Union['VerityWeightsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["design"]) -> typing.Union['DesignWeightsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["other"]) -> typing.Union['OtherWeightsDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["accuracy", "fluency", "terminology", "style", "localeConvention", "verity", "design", "other", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        accuracy: typing.Union['AccuracyWeightsDto', schemas.Unset] = schemas.unset,
        fluency: typing.Union['FluencyWeightsDto', schemas.Unset] = schemas.unset,
        terminology: typing.Union['TerminologyWeightsDto', schemas.Unset] = schemas.unset,
        style: typing.Union['StyleWeightsDto', schemas.Unset] = schemas.unset,
        localeConvention: typing.Union['LocaleConventionWeightsDto', schemas.Unset] = schemas.unset,
        verity: typing.Union['VerityWeightsDto', schemas.Unset] = schemas.unset,
        design: typing.Union['DesignWeightsDto', schemas.Unset] = schemas.unset,
        other: typing.Union['OtherWeightsDto', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ErrorCategoriesDto':
        return super().__new__(
            cls,
            *_args,
            accuracy=accuracy,
            fluency=fluency,
            terminology=terminology,
            style=style,
            localeConvention=localeConvention,
            verity=verity,
            design=design,
            other=other,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.accuracy_weights_dto import AccuracyWeightsDto
from openapi_client.model.design_weights_dto import DesignWeightsDto
from openapi_client.model.fluency_weights_dto import FluencyWeightsDto
from openapi_client.model.locale_convention_weights_dto import LocaleConventionWeightsDto
from openapi_client.model.other_weights_dto import OtherWeightsDto
from openapi_client.model.style_weights_dto import StyleWeightsDto
from openapi_client.model.terminology_weights_dto import TerminologyWeightsDto
from openapi_client.model.verity_weights_dto import VerityWeightsDto
