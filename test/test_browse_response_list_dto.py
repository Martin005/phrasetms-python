# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import unittest
import datetime

import phrasetms_client
from phrasetms_client.models.browse_response_list_dto import BrowseResponseListDto  # noqa: E501
from phrasetms_client.rest import ApiException

class TestBrowseResponseListDto(unittest.TestCase):
    """BrowseResponseListDto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test BrowseResponseListDto
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BrowseResponseListDto`
        """
        model = phrasetms_client.models.browse_response_list_dto.BrowseResponseListDto()  # noqa: E501
        if include_optional :
            return BrowseResponseListDto(
                search_results = [
                    phrasetms_client.models.concept_dto.ConceptDto(
                        id = '', 
                        writable = True, 
                        terms = [
                            [
                                phrasetms_client.models.term_dto.TermDto(
                                    id = '', 
                                    text = '', 
                                    lang = '', 
                                    rtl = True, 
                                    modified_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    modified_by = phrasetms_client.models.user_reference.UserReference(
                                        first_name = '', 
                                        last_name = '', 
                                        user_name = '', 
                                        email = '', 
                                        role = 'SYS_ADMIN', 
                                        id = '', 
                                        uid = '', ), 
                                    created_by = phrasetms_client.models.user_reference.UserReference(
                                        first_name = '', 
                                        last_name = '', 
                                        user_name = '', 
                                        email = '', 
                                        role = 'SYS_ADMIN', 
                                        id = '', 
                                        uid = '', ), 
                                    case_sensitive = True, 
                                    exact_match = True, 
                                    forbidden = True, 
                                    preferred = True, 
                                    status = 'New', 
                                    concept_id = '', 
                                    usage = '', 
                                    note = '', 
                                    writable = True, 
                                    short_translation = '', 
                                    term_type = '', 
                                    part_of_speech = '', 
                                    gender = '', 
                                    number = '', 
                                    definition = '', 
                                    domain = '', 
                                    sub_domains = [
                                        ''
                                        ], 
                                    url = '', 
                                    concept_note = '', )
                                ]
                            ], )
                    ]
            )
        else :
            return BrowseResponseListDto(
        )
        """

    def testBrowseResponseListDto(self):
        """Test BrowseResponseListDto"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
