# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import unittest
import datetime

import phrasetms_client
from phrasetms_client.models.net_rate_scheme import NetRateScheme  # noqa: E501
from phrasetms_client.rest import ApiException

class TestNetRateScheme(unittest.TestCase):
    """NetRateScheme unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test NetRateScheme
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NetRateScheme`
        """
        model = phrasetms_client.models.net_rate_scheme.NetRateScheme()  # noqa: E501
        if include_optional :
            return NetRateScheme(
                id = '', 
                uid = '', 
                name = '', 
                organization = phrasetms_client.models.organization_reference.OrganizationReference(
                    uid = '', 
                    name = '', ), 
                date_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                created_by = phrasetms_client.models.user_reference.UserReference(
                    first_name = '', 
                    last_name = '', 
                    user_name = '', 
                    email = '', 
                    role = 'SYS_ADMIN', 
                    id = '', 
                    uid = '', ), 
                workflow_step_net_schemes = [
                    phrasetms_client.models.net_rate_scheme_workflow_step_reference.NetRateSchemeWorkflowStepReference(
                        id = '', 
                        workflow_step = phrasetms_client.models.workflow_step_reference.WorkflowStepReference(
                            name = '', 
                            id = '', 
                            uid = '', 
                            order = 56, 
                            lqa_enabled = True, ), )
                    ], 
                rates = phrasetms_client.models.discount_settings_dto.DiscountSettingsDto(
                    repetition = 1.337, 
                    tm101 = 1.337, 
                    tm100 = 1.337, 
                    tm95 = 1.337, 
                    tm85 = 1.337, 
                    tm75 = 1.337, 
                    tm50 = 1.337, 
                    tm0 = 1.337, 
                    mt100 = 1.337, 
                    mt95 = 1.337, 
                    mt85 = 1.337, 
                    mt75 = 1.337, 
                    mt50 = 1.337, 
                    mt0 = 1.337, 
                    nt100 = 1.337, 
                    nt99 = 1.337, 
                    nt85 = 1.337, 
                    nt75 = 1.337, 
                    nt50 = 1.337, 
                    nt0 = 1.337, 
                    if100 = 1.337, 
                    if95 = 1.337, 
                    if85 = 1.337, 
                    if75 = 1.337, 
                    if50 = 1.337, 
                    if0 = 1.337, )
            )
        else :
            return NetRateScheme(
        )
        """

    def testNetRateScheme(self):
        """Test NetRateScheme"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
