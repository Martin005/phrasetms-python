# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import unittest
import datetime

import phrasetms_client
from phrasetms_client.models.async_analyse_response_dto import AsyncAnalyseResponseDto  # noqa: E501
from phrasetms_client.rest import ApiException

class TestAsyncAnalyseResponseDto(unittest.TestCase):
    """AsyncAnalyseResponseDto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test AsyncAnalyseResponseDto
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AsyncAnalyseResponseDto`
        """
        model = phrasetms_client.models.async_analyse_response_dto.AsyncAnalyseResponseDto()  # noqa: E501
        if include_optional :
            return AsyncAnalyseResponseDto(
                async_request = phrasetms_client.models.async_request_dto.AsyncRequestDto(
                    id = '', 
                    created_by = phrasetms_client.models.user_reference.UserReference(
                        first_name = '', 
                        last_name = '', 
                        user_name = '', 
                        email = '', 
                        role = 'SYS_ADMIN', 
                        id = '', 
                        uid = '', ), 
                    date_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    action = 'PRE_ANALYSE', 
                    async_response = phrasetms_client.models.async_response_dto.AsyncResponseDto(
                        date_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        error_code = '', 
                        error_desc = '', 
                        error_details = [
                            phrasetms_client.models.error_detail_dto.ErrorDetailDto(
                                code = '', 
                                args = {
                                    'key' : None
                                    }, 
                                message = '', )
                            ], 
                        warnings = [
                            phrasetms_client.models.error_detail_dto.ErrorDetailDto(
                                code = '', 
                                message = '', )
                            ], 
                        accepted_segments_count = 56, ), 
                    parent = phrasetms_client.models.async_request_dto.AsyncRequestDto(
                        id = '', 
                        date_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        action = 'PRE_ANALYSE', 
                        project = phrasetms_client.models.project_reference.ProjectReference(
                            uid = '', 
                            inner_id = 56, 
                            name = '', 
                            business_unit = phrasetms_client.models.business_unit_reference.BusinessUnitReference(
                                name = '', 
                                id = '', 
                                uid = '', ), 
                            domain = phrasetms_client.models.domain_reference.DomainReference(
                                name = '', 
                                id = '', 
                                uid = '', ), 
                            sub_domain = phrasetms_client.models.sub_domain_reference.SubDomainReference(
                                name = '', 
                                id = '', 
                                uid = '', ), 
                            client = phrasetms_client.models.client_reference.ClientReference(
                                id = '', 
                                uid = '', 
                                name = '', ), 
                            cost_center = phrasetms_client.models.cost_center_reference.CostCenterReference(
                                name = '', 
                                id = '', 
                                uid = '', ), 
                            due_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            created_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            owner = phrasetms_client.models.user_reference.UserReference(
                                first_name = '', 
                                last_name = '', 
                                user_name = '', 
                                email = '', 
                                role = 'SYS_ADMIN', 
                                id = '', 
                                uid = '', ), 
                            vendor = phrasetms_client.models.vendor_user_reference.VendorUserReference(
                                uid = '', 
                                vendor_uid = '', 
                                username = '', 
                                first_name = '', 
                                last_name = '', 
                                organization = phrasetms_client.models.organization_reference.OrganizationReference(
                                    uid = '', 
                                    name = '', ), ), 
                            purchase_order = '', 
                            source_lang = '', 
                            target_langs = [
                                ''
                                ], 
                            status = '', 
                            progress = phrasetms_client.models.progress_reference.ProgressReference(
                                total_count = 56, 
                                finished_count = 56, 
                                overdue_count = 56, 
                                finished_ratio = 1.337, 
                                overdue_ratio = 1.337, ), 
                            metadata = [
                                phrasetms_client.models.metadata_reference.MetadataReference(
                                    uid = '', 
                                    field_name = '', 
                                    value = '', 
                                    options = [
                                        phrasetms_client.models.metadata_option_reference.MetadataOptionReference(
                                            uid = '', 
                                            value = '', )
                                        ], )
                                ], 
                            note = '', 
                            deleted = True, 
                            archived = True, ), ), 
                    project = phrasetms_client.models.project_reference.ProjectReference(
                        uid = '', 
                        inner_id = 56, 
                        name = '', 
                        due_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        created_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        purchase_order = '', 
                        source_lang = '', 
                        status = '', 
                        note = '', 
                        deleted = True, 
                        archived = True, ), ), 
                analyse = None
            )
        else :
            return AsyncAnalyseResponseDto(
        )
        """

    def testAsyncAnalyseResponseDto(self):
        """Test AsyncAnalyseResponseDto"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
