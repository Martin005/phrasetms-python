# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import unittest
import datetime

import phrasetms_client
from phrasetms_client.models.plain_conversations_list_dto import PlainConversationsListDto  # noqa: E501
from phrasetms_client.rest import ApiException

class TestPlainConversationsListDto(unittest.TestCase):
    """PlainConversationsListDto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test PlainConversationsListDto
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PlainConversationsListDto`
        """
        model = phrasetms_client.models.plain_conversations_list_dto.PlainConversationsListDto()  # noqa: E501
        if include_optional :
            return PlainConversationsListDto(
                conversations = [
                    phrasetms_client.models.plain_conversation_dto.PlainConversationDto(
                        id = '', 
                        type = '', 
                        date_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        date_modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        date_edited = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        created_by = phrasetms_client.models.mentionable_user_dto.MentionableUserDto(
                            first_name = '', 
                            last_name = '', 
                            user_name = '', 
                            email = '', 
                            role = 'SYS_ADMIN', 
                            id = '', 
                            uid = '', 
                            unavailable = True, 
                            job_roles = [
                                phrasetms_client.models.job_role_dto.JobRoleDto(
                                    type = 'PROJECT_OWNER', 
                                    workflow_step = phrasetms_client.models.project_workflow_step_dto_v2.ProjectWorkflowStepDtoV2(
                                        id = 56, 
                                        abbreviation = '', 
                                        name = '', 
                                        workflow_level = 56, ), 
                                    organization_type = 'VENDOR', )
                                ], ), 
                        comments = [
                            phrasetms_client.models.comment_dto.CommentDto(
                                id = '', 
                                text = '', 
                                date_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                date_modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                mentions = [
                                    phrasetms_client.models.mention_dto.MentionDto(
                                        mention_type = 'USER', 
                                        mention_group_type = 'JOB', 
                                        uid_reference = phrasetms_client.models.uid_reference.UidReference(
                                            uid = '', ), 
                                        user_references = [
                                            phrasetms_client.models.mentionable_user_dto.MentionableUserDto(
                                                first_name = '', 
                                                last_name = '', 
                                                user_name = '', 
                                                email = '', 
                                                role = 'SYS_ADMIN', 
                                                id = '', 
                                                uid = '', 
                                                unavailable = True, )
                                            ], 
                                        mentionable_group = phrasetms_client.models.mentionable_group_dto.MentionableGroupDto(
                                            group_type = 'JOB', 
                                            group_name = '', 
                                            group_reference = phrasetms_client.models.uid_reference.UidReference(
                                                uid = '', ), ), 
                                        tag = '', )
                                    ], )
                            ], 
                        status = phrasetms_client.models.status_dto.StatusDto(
                            name = 'resolved', 
                            by = , 
                            date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        deleted = True, 
                        references = phrasetms_client.models.plain_references.PlainReferences(
                            task_id = '', 
                            job_part_uid = '', 
                            trans_group_id = 0, 
                            segment_id = '', 
                            conversation_title = '', 
                            conversation_title_offset = 0, 
                            commented_text = '', 
                            correlation = phrasetms_client.models.reference_correlation.ReferenceCorrelation(
                                uid = '', 
                                role = 'PARENT', ), ), )
                    ]
            )
        else :
            return PlainConversationsListDto(
        )
        """

    def testPlainConversationsListDto(self):
        """Test PlainConversationsListDto"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
