# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import unittest
import datetime

import phrasetms_client
from phrasetms_client.models.create_lqa_profile_dto import CreateLqaProfileDto  # noqa: E501
from phrasetms_client.rest import ApiException

class TestCreateLqaProfileDto(unittest.TestCase):
    """CreateLqaProfileDto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test CreateLqaProfileDto
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateLqaProfileDto`
        """
        model = phrasetms_client.models.create_lqa_profile_dto.CreateLqaProfileDto()  # noqa: E501
        if include_optional :
            return CreateLqaProfileDto(
                name = '0', 
                error_categories = phrasetms_client.models.error_categories_dto.ErrorCategoriesDto(
                    accuracy = phrasetms_client.models.accuracy_weights_dto.AccuracyWeightsDto(
                        addition = phrasetms_client.models.toggleable_weight_dto.ToggleableWeightDto(
                            enabled = True, 
                            weight = 1.0, 
                            code = 56, ), 
                        omission = phrasetms_client.models.toggleable_weight_dto.ToggleableWeightDto(
                            enabled = True, 
                            weight = 1.0, 
                            code = 56, ), 
                        mistranslation = , 
                        under_translation = , 
                        untranslated = , 
                        improper_tm_match = , 
                        over_translation = , ), 
                    fluency = phrasetms_client.models.fluency_weights_dto.FluencyWeightsDto(
                        punctuation = , 
                        spelling = , 
                        grammar = , 
                        grammatical_register = , 
                        inconsistency = , 
                        cross_reference = , 
                        character_encoding = , ), 
                    terminology = phrasetms_client.models.terminology_weights_dto.TerminologyWeightsDto(
                        inconsistent_with_tb = , 
                        inconsistent_use_of_terminology = , ), 
                    style = phrasetms_client.models.style_weights_dto.StyleWeightsDto(
                        awkward = , 
                        company_style = , 
                        inconsistent_style = , 
                        third_party_style = , 
                        unidiomatic = , ), 
                    locale_convention = phrasetms_client.models.locale_convention_weights_dto.LocaleConventionWeightsDto(
                        address_format = , 
                        date_format = , 
                        currency_format = , 
                        measurement_format = , 
                        shortcut_key = , 
                        telephone_format = , ), 
                    verity = phrasetms_client.models.verity_weights_dto.VerityWeightsDto(
                        culture_specific_reference = , ), 
                    design = phrasetms_client.models.design_weights_dto.DesignWeightsDto(
                        length = , 
                        local_formatting = , 
                        markup = , 
                        missing_text = , 
                        truncation = , ), 
                    other = phrasetms_client.models.other_weights_dto.OtherWeightsDto(), ), 
                penalty_points = phrasetms_client.models.penalty_points_dto.PenaltyPointsDto(
                    neutral = phrasetms_client.models.severity_dto.SeverityDto(
                        code = 56, 
                        value = 1.337, ), 
                    minor = phrasetms_client.models.severity_dto.SeverityDto(
                        code = 56, 
                        value = 1.337, ), 
                    major = , 
                    critical = , ), 
                pass_fail_threshold = phrasetms_client.models.pass_fail_threshold_dto.PassFailThresholdDto(
                    min_score_percentage = 99.0, )
            )
        else :
            return CreateLqaProfileDto(
                name = '0',
                error_categories = phrasetms_client.models.error_categories_dto.ErrorCategoriesDto(
                    accuracy = phrasetms_client.models.accuracy_weights_dto.AccuracyWeightsDto(
                        addition = phrasetms_client.models.toggleable_weight_dto.ToggleableWeightDto(
                            enabled = True, 
                            weight = 1.0, 
                            code = 56, ), 
                        omission = phrasetms_client.models.toggleable_weight_dto.ToggleableWeightDto(
                            enabled = True, 
                            weight = 1.0, 
                            code = 56, ), 
                        mistranslation = , 
                        under_translation = , 
                        untranslated = , 
                        improper_tm_match = , 
                        over_translation = , ), 
                    fluency = phrasetms_client.models.fluency_weights_dto.FluencyWeightsDto(
                        punctuation = , 
                        spelling = , 
                        grammar = , 
                        grammatical_register = , 
                        inconsistency = , 
                        cross_reference = , 
                        character_encoding = , ), 
                    terminology = phrasetms_client.models.terminology_weights_dto.TerminologyWeightsDto(
                        inconsistent_with_tb = , 
                        inconsistent_use_of_terminology = , ), 
                    style = phrasetms_client.models.style_weights_dto.StyleWeightsDto(
                        awkward = , 
                        company_style = , 
                        inconsistent_style = , 
                        third_party_style = , 
                        unidiomatic = , ), 
                    locale_convention = phrasetms_client.models.locale_convention_weights_dto.LocaleConventionWeightsDto(
                        address_format = , 
                        date_format = , 
                        currency_format = , 
                        measurement_format = , 
                        shortcut_key = , 
                        telephone_format = , ), 
                    verity = phrasetms_client.models.verity_weights_dto.VerityWeightsDto(
                        culture_specific_reference = , ), 
                    design = phrasetms_client.models.design_weights_dto.DesignWeightsDto(
                        length = , 
                        local_formatting = , 
                        markup = , 
                        missing_text = , 
                        truncation = , ), 
                    other = phrasetms_client.models.other_weights_dto.OtherWeightsDto(), ),
        )
        """

    def testCreateLqaProfileDto(self):
        """Test CreateLqaProfileDto"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
