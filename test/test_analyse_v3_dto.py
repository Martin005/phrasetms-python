# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import unittest
import datetime

import phrasetms_client
from phrasetms_client.models.analyse_v3_dto import AnalyseV3Dto  # noqa: E501
from phrasetms_client.rest import ApiException

class TestAnalyseV3Dto(unittest.TestCase):
    """AnalyseV3Dto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test AnalyseV3Dto
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AnalyseV3Dto`
        """
        model = phrasetms_client.models.analyse_v3_dto.AnalyseV3Dto()  # noqa: E501
        if include_optional :
            return AnalyseV3Dto(
                id = '', 
                uid = '', 
                inner_id = 56, 
                type = 'PreAnalyse', 
                name = '', 
                provider = phrasetms_client.models.provider_reference.ProviderReference(
                    type = '', 
                    id = '', 
                    uid = '', ), 
                created_by = phrasetms_client.models.user_reference.UserReference(
                    first_name = '', 
                    last_name = '', 
                    user_name = '', 
                    email = '', 
                    role = 'SYS_ADMIN', 
                    id = '', 
                    uid = '', ), 
                date_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                net_rate_scheme = phrasetms_client.models.net_rate_scheme_reference.NetRateSchemeReference(
                    id = '', 
                    uid = '', 
                    name = '', 
                    date_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    created_by = phrasetms_client.models.user_reference.UserReference(
                        first_name = '', 
                        last_name = '', 
                        user_name = '', 
                        email = '', 
                        role = 'SYS_ADMIN', 
                        id = '', 
                        uid = '', ), ), 
                can_change_net_rate_scheme = True, 
                analyse_language_parts = [
                    phrasetms_client.models.analyse_language_part_v3_dto.AnalyseLanguagePartV3Dto(
                        id = '', 
                        source_lang = '', 
                        target_lang = '', 
                        data = phrasetms_client.models.data_dto.DataDto(
                            available = True, 
                            estimate = True, 
                            all = phrasetms_client.models.counts_dto.CountsDto(
                                segments = 1.337, 
                                words = 1.337, 
                                characters = 1.337, 
                                normalized_pages = 1.337, 
                                percent = 1.337, 
                                editing_time = 1.337, ), 
                            repetitions = phrasetms_client.models.counts_dto.CountsDto(
                                segments = 1.337, 
                                words = 1.337, 
                                characters = 1.337, 
                                normalized_pages = 1.337, 
                                percent = 1.337, 
                                editing_time = 1.337, ), 
                            trans_memory_matches = phrasetms_client.models.match_counts101_dto.MatchCounts101Dto(
                                match100 = , 
                                match95 = , 
                                match85 = , 
                                match75 = , 
                                match50 = , 
                                match0 = , 
                                match101 = , ), 
                            machine_translation_matches = phrasetms_client.models.match_counts_dto.MatchCountsDto(), 
                            non_translatables_matches = phrasetms_client.models.match_counts_nt_dto.MatchCountsNTDto(), 
                            internal_fuzzy_matches = phrasetms_client.models.match_counts_dto.MatchCountsDto(), ), 
                        discounted_data = phrasetms_client.models.data_dto.DataDto(
                            available = True, 
                            estimate = True, ), 
                        jobs = [
                            phrasetms_client.models.analyse_job_reference.AnalyseJobReference(
                                uid = '', 
                                filename = '', 
                                inner_id = '', )
                            ], 
                        trans_memories = [
                            phrasetms_client.models.trans_memory_reference_dto_v2.TransMemoryReferenceDtoV2(
                                internal_id = 56, 
                                uid = '', 
                                name = '', 
                                source_lang = '', 
                                target_langs = [
                                    ''
                                    ], )
                            ], )
                    ], 
                settings = phrasetms_client.models.abstract_analyse_settings_dto.AbstractAnalyseSettingsDto(
                    include_confirmed_segments = True, 
                    include_numbers = True, 
                    include_locked_segments = True, 
                    count_source_units = True, 
                    include_trans_memory = True, 
                    naming_pattern = '', 
                    analyze_by_language = True, 
                    analyze_by_provider = True, 
                    allow_automatic_post_analysis = True, ), 
                outdated = True, 
                import_status = phrasetms_client.models.import_status_dto.ImportStatusDto(
                    status = 'RUNNING', 
                    error_message = '', ), 
                pure_warnings = [
                    ''
                    ], 
                project = phrasetms_client.models.project_reference.ProjectReference(
                    uid = '', 
                    inner_id = 56, 
                    name = '', 
                    business_unit = phrasetms_client.models.business_unit_reference.BusinessUnitReference(
                        name = '', 
                        id = '', 
                        uid = '', ), 
                    domain = phrasetms_client.models.domain_reference.DomainReference(
                        name = '', 
                        id = '', 
                        uid = '', ), 
                    sub_domain = phrasetms_client.models.sub_domain_reference.SubDomainReference(
                        name = '', 
                        id = '', 
                        uid = '', ), 
                    client = phrasetms_client.models.client_reference.ClientReference(
                        id = '', 
                        uid = '', 
                        name = '', ), 
                    cost_center = phrasetms_client.models.cost_center_reference.CostCenterReference(
                        name = '', 
                        id = '', 
                        uid = '', ), 
                    due_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    created_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    created_by = phrasetms_client.models.user_reference.UserReference(
                        first_name = '', 
                        last_name = '', 
                        user_name = '', 
                        email = '', 
                        role = 'SYS_ADMIN', 
                        id = '', 
                        uid = '', ), 
                    owner = phrasetms_client.models.user_reference.UserReference(
                        first_name = '', 
                        last_name = '', 
                        user_name = '', 
                        email = '', 
                        role = 'SYS_ADMIN', 
                        id = '', 
                        uid = '', ), 
                    vendor = phrasetms_client.models.vendor_user_reference.VendorUserReference(
                        uid = '', 
                        vendor_uid = '', 
                        username = '', 
                        first_name = '', 
                        last_name = '', 
                        organization = phrasetms_client.models.organization_reference.OrganizationReference(
                            uid = '', 
                            name = '', ), ), 
                    purchase_order = '', 
                    source_lang = '', 
                    target_langs = [
                        ''
                        ], 
                    status = '', 
                    progress = phrasetms_client.models.progress_reference.ProgressReference(
                        total_count = 56, 
                        finished_count = 56, 
                        overdue_count = 56, 
                        finished_ratio = 1.337, 
                        overdue_ratio = 1.337, ), 
                    metadata = [
                        phrasetms_client.models.metadata_reference.MetadataReference(
                            uid = '', 
                            field_name = '', 
                            value = '', 
                            options = [
                                phrasetms_client.models.metadata_option_reference.MetadataOptionReference(
                                    uid = '', 
                                    value = '', )
                                ], )
                        ], 
                    note = '', 
                    deleted = True, 
                    archived = True, )
            )
        else :
            return AnalyseV3Dto(
        )
        """

    def testAnalyseV3Dto(self):
        """Test AnalyseV3Dto"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
