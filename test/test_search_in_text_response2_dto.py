# coding: utf-8

"""
    Phrase TMS API

    Welcome to Phrase's TMS API documentation.    Please visit our [help center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more information about the APIs.    If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).    Please, include the `User-Agent` header with the name of your application or project. It might be a good idea to include some sort of contact information as well, so that we can get in touch if necessary. Examples of excellent `User-Agent` headers:  > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent: ACME Inc Java 1.8 Client (http://acmeinc.com/contact)  # noqa: E501

    The version of the OpenAPI document: Latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import unittest
import datetime

import phrasetms_client
from phrasetms_client.models.search_in_text_response2_dto import SearchInTextResponse2Dto  # noqa: E501
from phrasetms_client.rest import ApiException

class TestSearchInTextResponse2Dto(unittest.TestCase):
    """SearchInTextResponse2Dto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test SearchInTextResponse2Dto
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SearchInTextResponse2Dto`
        """
        model = phrasetms_client.models.search_in_text_response2_dto.SearchInTextResponse2Dto()  # noqa: E501
        if include_optional :
            return SearchInTextResponse2Dto(
                term_base = phrasetms_client.models.term_base_reference.TermBaseReference(
                    name = '', 
                    id = '', 
                    uid = '', ), 
                source_term = phrasetms_client.models.term_v2_dto.TermV2Dto(
                    id = '', 
                    text = '', 
                    lang = '', 
                    rtl = True, 
                    modified_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    modified_by = phrasetms_client.models.user_reference.UserReference(
                        first_name = '', 
                        last_name = '', 
                        user_name = '', 
                        email = '', 
                        role = 'SYS_ADMIN', 
                        id = '', 
                        uid = '', ), 
                    created_by = phrasetms_client.models.user_reference.UserReference(
                        first_name = '', 
                        last_name = '', 
                        user_name = '', 
                        email = '', 
                        role = 'SYS_ADMIN', 
                        id = '', 
                        uid = '', ), 
                    case_sensitive = True, 
                    exact_match = True, 
                    forbidden = True, 
                    preferred = True, 
                    status = 'New', 
                    concept_id = '', 
                    usage = '', 
                    note = '', 
                    writable = True, 
                    short_translation = '', 
                    term_type = '', 
                    part_of_speech = '', 
                    gender = '', 
                    number = '', ), 
                concept = phrasetms_client.models.concept_dtov2.ConceptDtov2(
                    id = '', 
                    definition = '', 
                    domain = '', 
                    sub_domains = [
                        ''
                        ], 
                    url = '', 
                    note = '', ), 
                translation_terms = [
                    phrasetms_client.models.term_v2_dto.TermV2Dto(
                        id = '', 
                        text = '', 
                        lang = '', 
                        rtl = True, 
                        modified_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        modified_by = phrasetms_client.models.user_reference.UserReference(
                            first_name = '', 
                            last_name = '', 
                            user_name = '', 
                            email = '', 
                            role = 'SYS_ADMIN', 
                            id = '', 
                            uid = '', ), 
                        created_by = phrasetms_client.models.user_reference.UserReference(
                            first_name = '', 
                            last_name = '', 
                            user_name = '', 
                            email = '', 
                            role = 'SYS_ADMIN', 
                            id = '', 
                            uid = '', ), 
                        case_sensitive = True, 
                        exact_match = True, 
                        forbidden = True, 
                        preferred = True, 
                        status = 'New', 
                        concept_id = '', 
                        usage = '', 
                        note = '', 
                        writable = True, 
                        short_translation = '', 
                        term_type = '', 
                        part_of_speech = '', 
                        gender = '', 
                        number = '', )
                    ], 
                sub_term = True, 
                matches = [
                    phrasetms_client.models.match.Match(
                        begin_index = 56, 
                        text = '', )
                    ]
            )
        else :
            return SearchInTextResponse2Dto(
        )
        """

    def testSearchInTextResponse2Dto(self):
        """Test SearchInTextResponse2Dto"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
